
3channelADC_h743vit6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f40  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a230  0800a230  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a230  0800a230  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a230  0800a230  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a230  0800a230  0001a230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a234  0800a234  0001a234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800a238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001864  240001e4  0800a41c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001a48  0800a41c  00021a48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b0a  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ed5  00000000  00000000  00043d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001260  00000000  00000000  00047bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d8  00000000  00000000  00048e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039e22  00000000  00000000  00049f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001264c  00000000  00000000  00083d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00164f37  00000000  00000000  0009639e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fb2d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d3c  00000000  00000000  001fb350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e4 	.word	0x240001e4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a1c0 	.word	0x0800a1c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e8 	.word	0x240001e8
 80002d4:	0800a1c0 	.word	0x0800a1c0

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 fb85 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f829 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 f9a7 	bl	8000638 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002ea:	f000 f90d 	bl	8000508 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80002ee:	f009 f99b 	bl	8009628 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t dataFromAdc7 = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	71fb      	strb	r3, [r7, #7]
  uint8_t dataFromAdc8 = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	71bb      	strb	r3, [r7, #6]
  uint8_t dataFromAdc9 = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	717b      	strb	r3, [r7, #5]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <main+0x5c>)
 8000300:	f000 fffa 	bl	80012f8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,100);
 8000304:	2164      	movs	r1, #100	; 0x64
 8000306:	480b      	ldr	r0, [pc, #44]	; (8000334 <main+0x5c>)
 8000308:	f001 f8f4 	bl	80014f4 <HAL_ADC_PollForConversion>
	  dataFromAdc7 = (uint8_t) HAL_ADC_GetValue(&hadc1);
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <main+0x5c>)
 800030e:	f001 f9dd 	bl	80016cc <HAL_ADC_GetValue>
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
	  dataFromAdc8 = (uint8_t) HAL_ADC_GetValue(&hadc1);
 8000316:	4807      	ldr	r0, [pc, #28]	; (8000334 <main+0x5c>)
 8000318:	f001 f9d8 	bl	80016cc <HAL_ADC_GetValue>
 800031c:	4603      	mov	r3, r0
 800031e:	71bb      	strb	r3, [r7, #6]
	  dataFromAdc9 = (uint8_t) HAL_ADC_GetValue(&hadc1);
 8000320:	4804      	ldr	r0, [pc, #16]	; (8000334 <main+0x5c>)
 8000322:	f001 f9d3 	bl	80016cc <HAL_ADC_GetValue>
 8000326:	4603      	mov	r3, r0
 8000328:	717b      	strb	r3, [r7, #5]
	  HAL_ADC_Stop(&hadc1);
 800032a:	4802      	ldr	r0, [pc, #8]	; (8000334 <main+0x5c>)
 800032c:	f001 f8ae 	bl	800148c <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc1);
 8000330:	e7e5      	b.n	80002fe <main+0x26>
 8000332:	bf00      	nop
 8000334:	24000210 	.word	0x24000210

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b0cc      	sub	sp, #304	; 0x130
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000342:	224c      	movs	r2, #76	; 0x4c
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f009 fe78 	bl	800a03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000350:	2220      	movs	r2, #32
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f009 fe71 	bl	800a03c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	4618      	mov	r0, r3
 8000360:	23bc      	movs	r3, #188	; 0xbc
 8000362:	461a      	mov	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f009 fe69 	bl	800a03c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800036a:	2002      	movs	r0, #2
 800036c:	f003 fcf4 	bl	8003d58 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	4b61      	ldr	r3, [pc, #388]	; (80004fc <SystemClock_Config+0x1c4>)
 8000378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800037a:	4a60      	ldr	r2, [pc, #384]	; (80004fc <SystemClock_Config+0x1c4>)
 800037c:	f023 0301 	bic.w	r3, r3, #1
 8000380:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000382:	4b5e      	ldr	r3, [pc, #376]	; (80004fc <SystemClock_Config+0x1c4>)
 8000384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000386:	f003 0201 	and.w	r2, r3, #1
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	4b5c      	ldr	r3, [pc, #368]	; (8000500 <SystemClock_Config+0x1c8>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000396:	4a5a      	ldr	r2, [pc, #360]	; (8000500 <SystemClock_Config+0x1c8>)
 8000398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b58      	ldr	r3, [pc, #352]	; (8000500 <SystemClock_Config+0x1c8>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ae:	bf00      	nop
 80003b0:	4b53      	ldr	r3, [pc, #332]	; (8000500 <SystemClock_Config+0x1c8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003bc:	d1f8      	bne.n	80003b0 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003be:	4b51      	ldr	r3, [pc, #324]	; (8000504 <SystemClock_Config+0x1cc>)
 80003c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c2:	f023 0303 	bic.w	r3, r3, #3
 80003c6:	4a4f      	ldr	r2, [pc, #316]	; (8000504 <SystemClock_Config+0x1cc>)
 80003c8:	f043 0302 	orr.w	r3, r3, #2
 80003cc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003ce:	2321      	movs	r3, #33	; 0x21
 80003d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003dc:	2301      	movs	r3, #1
 80003de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	2302      	movs	r3, #2
 80003e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e8:	2302      	movs	r3, #2
 80003ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80003ee:	2305      	movs	r3, #5
 80003f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 40;
 80003f4:	2328      	movs	r3, #40	; 0x28
 80003f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003fa:	2302      	movs	r3, #2
 80003fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000400:	2305      	movs	r3, #5
 8000402:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000406:	2302      	movs	r3, #2
 8000408:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800040c:	2308      	movs	r3, #8
 800040e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000412:	2300      	movs	r3, #0
 8000414:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000422:	4618      	mov	r0, r3
 8000424:	f003 fce2 	bl	8003dec <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800042e:	f000 f94b 	bl	80006c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	233f      	movs	r3, #63	; 0x3f
 8000434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000438:	2303      	movs	r3, #3
 800043a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000462:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000466:	2101      	movs	r1, #1
 8000468:	4618      	mov	r0, r3
 800046a:	f004 f897 	bl	800459c <HAL_RCC_ClockConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x140>
  {
    Error_Handler();
 8000474:	f000 f928 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000478:	f107 0308 	add.w	r3, r7, #8
 800047c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000480:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	2202      	movs	r2, #2
 8000488:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800048a:	f107 0308 	add.w	r3, r7, #8
 800048e:	220c      	movs	r2, #12
 8000490:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000492:	f107 0308 	add.w	r3, r7, #8
 8000496:	2201      	movs	r2, #1
 8000498:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	2202      	movs	r2, #2
 80004a0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	2202      	movs	r2, #2
 80004a8:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	22c0      	movs	r2, #192	; 0xc0
 80004b0:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	2220      	movs	r2, #32
 80004b8:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	2200      	movs	r2, #0
 80004c0:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80004ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004ce:	f107 0308 	add.w	r3, r7, #8
 80004d2:	2200      	movs	r2, #0
 80004d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004d8:	f107 0308 	add.w	r3, r7, #8
 80004dc:	4618      	mov	r0, r3
 80004de:	f004 fbb5 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x1b4>
  {
    Error_Handler();
 80004e8:	f000 f8ee 	bl	80006c8 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80004ec:	f003 fc6e 	bl	8003dcc <HAL_PWREx_EnableUSBVoltageDetector>
}
 80004f0:	bf00      	nop
 80004f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	58000400 	.word	0x58000400
 8000500:	58024800 	.word	0x58024800
 8000504:	58024400 	.word	0x58024400

08000508 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	463b      	mov	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
 8000528:	615a      	str	r2, [r3, #20]
 800052a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <MX_ADC1_Init+0x11c>)
 800052e:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <MX_ADC1_Init+0x120>)
 8000530:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000532:	4b3c      	ldr	r3, [pc, #240]	; (8000624 <MX_ADC1_Init+0x11c>)
 8000534:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000538:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800053a:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <MX_ADC1_Init+0x11c>)
 800053c:	2210      	movs	r2, #16
 800053e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000540:	4b38      	ldr	r3, [pc, #224]	; (8000624 <MX_ADC1_Init+0x11c>)
 8000542:	2201      	movs	r2, #1
 8000544:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000546:	4b37      	ldr	r3, [pc, #220]	; (8000624 <MX_ADC1_Init+0x11c>)
 8000548:	2208      	movs	r2, #8
 800054a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <MX_ADC1_Init+0x11c>)
 800054e:	2200      	movs	r2, #0
 8000550:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <MX_ADC1_Init+0x11c>)
 8000554:	2200      	movs	r2, #0
 8000556:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 3;
 8000558:	4b32      	ldr	r3, [pc, #200]	; (8000624 <MX_ADC1_Init+0x11c>)
 800055a:	2203      	movs	r2, #3
 800055c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800055e:	4b31      	ldr	r3, [pc, #196]	; (8000624 <MX_ADC1_Init+0x11c>)
 8000560:	2200      	movs	r2, #0
 8000562:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000564:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <MX_ADC1_Init+0x11c>)
 8000566:	2200      	movs	r2, #0
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056a:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <MX_ADC1_Init+0x11c>)
 800056c:	2200      	movs	r2, #0
 800056e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000570:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <MX_ADC1_Init+0x11c>)
 8000572:	2200      	movs	r2, #0
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <MX_ADC1_Init+0x11c>)
 8000578:	2200      	movs	r2, #0
 800057a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <MX_ADC1_Init+0x11c>)
 800057e:	2200      	movs	r2, #0
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <MX_ADC1_Init+0x11c>)
 8000584:	2200      	movs	r2, #0
 8000586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800058a:	4826      	ldr	r0, [pc, #152]	; (8000624 <MX_ADC1_Init+0x11c>)
 800058c:	f000 fd14 	bl	8000fb8 <HAL_ADC_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000596:	f000 f897 	bl	80006c8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	4619      	mov	r1, r3
 80005a4:	481f      	ldr	r0, [pc, #124]	; (8000624 <MX_ADC1_Init+0x11c>)
 80005a6:	f001 fe61 	bl	800226c <HAL_ADCEx_MultiModeConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005b0:	f000 f88a 	bl	80006c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_ADC1_Init+0x124>)
 80005b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b8:	2306      	movs	r3, #6
 80005ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005c6:	2304      	movs	r3, #4
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ce:	463b      	mov	r3, r7
 80005d0:	4619      	mov	r1, r3
 80005d2:	4814      	ldr	r0, [pc, #80]	; (8000624 <MX_ADC1_Init+0x11c>)
 80005d4:	f001 f888 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80005de:	f000 f873 	bl	80006c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_ADC1_Init+0x128>)
 80005e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005e6:	230c      	movs	r3, #12
 80005e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <MX_ADC1_Init+0x11c>)
 80005f0:	f001 f87a 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80005fa:	f000 f865 	bl	80006c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_ADC1_Init+0x12c>)
 8000600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000602:	2312      	movs	r3, #18
 8000604:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_ADC1_Init+0x11c>)
 800060c:	f001 f86c 	bl	80016e8 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000616:	f000 f857 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	24000210 	.word	0x24000210
 8000628:	40022000 	.word	0x40022000
 800062c:	1d500080 	.word	0x1d500080
 8000630:	21800100 	.word	0x21800100
 8000634:	25b00200 	.word	0x25b00200

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <MX_GPIO_Init+0x8c>)
 8000640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000644:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <MX_GPIO_Init+0x8c>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_GPIO_Init+0x8c>)
 8000650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_GPIO_Init+0x8c>)
 800065e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000662:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <MX_GPIO_Init+0x8c>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_GPIO_Init+0x8c>)
 800066e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_GPIO_Init+0x8c>)
 800067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000680:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <MX_GPIO_Init+0x8c>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_GPIO_Init+0x8c>)
 800068c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_GPIO_Init+0x8c>)
 800069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <MX_GPIO_Init+0x8c>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_GPIO_Init+0x8c>)
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	58024400 	.word	0x58024400

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_MspInit+0x30>)
 80006e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006e4:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x30>)
 80006e6:	f043 0302 	orr.w	r3, r3, #2
 80006ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x30>)
 80006f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006f4:	f003 0302 	and.w	r3, r3, #2
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	58024400 	.word	0x58024400

0800070c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a33      	ldr	r2, [pc, #204]	; (80007f8 <HAL_ADC_MspInit+0xec>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d15f      	bne.n	80007ee <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800072e:	4b33      	ldr	r3, [pc, #204]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 8000730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000734:	4a31      	ldr	r2, [pc, #196]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 8000736:	f043 0320 	orr.w	r3, r3, #32
 800073a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800073e:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 8000740:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000744:	f003 0320 	and.w	r3, r3, #32
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 800074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000752:	4a2a      	ldr	r2, [pc, #168]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	4a22      	ldr	r2, [pc, #136]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_ADC_MspInit+0xf0>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_INP7
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <HAL_ADC_MspInit+0xf4>)
 80007ba:	f001 ff41 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007be:	2320      	movs	r3, #32
 80007c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c2:	2303      	movs	r3, #3
 80007c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <HAL_ADC_MspInit+0xf8>)
 80007d2:	f001 ff35 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <HAL_ADC_MspInit+0xfc>)
 80007ea:	f001 ff29 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007ee:	bf00      	nop
 80007f0:	3730      	adds	r7, #48	; 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40022000 	.word	0x40022000
 80007fc:	58024400 	.word	0x58024400
 8000800:	58020000 	.word	0x58020000
 8000804:	58020800 	.word	0x58020800
 8000808:	58020400 	.word	0x58020400

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <MemManage_Handler+0x4>

08000826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <UsageFault_Handler+0x4>

08000832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000860:	f000 f936 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <OTG_FS_IRQHandler+0x10>)
 800086e:	f002 f9ee 	bl	8002c4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2400163c 	.word	0x2400163c

0800087c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <_sbrk+0x50>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <_sbrk+0x16>
		heap_end = &end;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <_sbrk+0x50>)
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <_sbrk+0x54>)
 8000890:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <_sbrk+0x50>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <_sbrk+0x50>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4413      	add	r3, r2
 80008a0:	466a      	mov	r2, sp
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d907      	bls.n	80008b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008a6:	f009 fb8f 	bl	8009fc8 <__errno>
 80008aa:	4602      	mov	r2, r0
 80008ac:	230c      	movs	r3, #12
 80008ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	e006      	b.n	80008c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <_sbrk+0x50>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	4a03      	ldr	r2, [pc, #12]	; (80008cc <_sbrk+0x50>)
 80008c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000200 	.word	0x24000200
 80008d0:	24001a48 	.word	0x24001a48

080008d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <SystemInit+0xac>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a28      	ldr	r2, [pc, #160]	; (8000980 <SystemInit+0xac>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <SystemInit+0xb0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a25      	ldr	r2, [pc, #148]	; (8000984 <SystemInit+0xb0>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <SystemInit+0xb0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <SystemInit+0xb0>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4921      	ldr	r1, [pc, #132]	; (8000984 <SystemInit+0xb0>)
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <SystemInit+0xb4>)
 8000902:	4013      	ands	r3, r2
 8000904:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <SystemInit+0xb0>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <SystemInit+0xb0>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <SystemInit+0xb0>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <SystemInit+0xb0>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <SystemInit+0xb0>)
 8000920:	2200      	movs	r2, #0
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <SystemInit+0xb0>)
 8000926:	2200      	movs	r2, #0
 8000928:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <SystemInit+0xb0>)
 800092c:	2200      	movs	r2, #0
 800092e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <SystemInit+0xb0>)
 8000932:	2200      	movs	r2, #0
 8000934:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <SystemInit+0xb0>)
 8000938:	2200      	movs	r2, #0
 800093a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <SystemInit+0xb0>)
 800093e:	2200      	movs	r2, #0
 8000940:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <SystemInit+0xb0>)
 8000944:	2200      	movs	r2, #0
 8000946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <SystemInit+0xb0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <SystemInit+0xb0>)
 800094e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000952:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <SystemInit+0xb0>)
 8000956:	2200      	movs	r2, #0
 8000958:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <SystemInit+0xb8>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <SystemInit+0xbc>)
 8000960:	4013      	ands	r3, r2
 8000962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000966:	d202      	bcs.n	800096e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <SystemInit+0xc0>)
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <SystemInit+0xac>)
 8000970:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000974:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00
 8000984:	58024400 	.word	0x58024400
 8000988:	eaf6ed7f 	.word	0xeaf6ed7f
 800098c:	5c001000 	.word	0x5c001000
 8000990:	ffff0000 	.word	0xffff0000
 8000994:	51008108 	.word	0x51008108

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800099c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800099e:	e003      	b.n	80009a8 <LoopCopyDataInit>

080009a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009a6:	3104      	adds	r1, #4

080009a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009b0:	d3f6      	bcc.n	80009a0 <CopyDataInit>
  ldr  r2, =_sbss
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009b4:	e002      	b.n	80009bc <LoopFillZerobss>

080009b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009b8:	f842 3b04 	str.w	r3, [r2], #4

080009bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009c0:	d3f9      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009c2:	f7ff ff87 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f009 fb05 	bl	8009fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fc85 	bl	80002d8 <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80009d4:	0800a238 	.word	0x0800a238
  ldr  r0, =_sdata
 80009d8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80009dc:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 80009e0:	240001e4 	.word	0x240001e4
  ldr  r3, = _ebss
 80009e4:	24001a48 	.word	0x24001a48

080009e8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC3_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f2:	2003      	movs	r0, #3
 80009f4:	f001 fde4 	bl	80025c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009f8:	f003 ff86 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80009fc:	4601      	mov	r1, r0
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_Init+0x68>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	f003 030f 	and.w	r3, r3, #15
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <HAL_Init+0x6c>)
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	f003 031f 	and.w	r3, r3, #31
 8000a10:	fa21 f303 	lsr.w	r3, r1, r3
 8000a14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_Init+0x68>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_Init+0x6c>)
 8000a20:	5cd3      	ldrb	r3, [r2, r3]
 8000a22:	f003 031f 	and.w	r3, r3, #31
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <HAL_Init+0x70>)
 8000a2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <HAL_Init+0x74>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f814 	bl	8000a64 <HAL_InitTick>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e002      	b.n	8000a4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a46:	f7ff fe47 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	58024400 	.word	0x58024400
 8000a58:	0800a220 	.word	0x0800a220
 8000a5c:	24000004 	.word	0x24000004
 8000a60:	24000000 	.word	0x24000000

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_InitTick+0x60>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e021      	b.n	8000abc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <HAL_InitTick+0x64>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_InitTick+0x60>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fdc9 	bl	8002626 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f001 fd93 	bl	80025d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x68>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2400000c 	.word	0x2400000c
 8000ac8:	24000000 	.word	0x24000000
 8000acc:	24000008 	.word	0x24000008

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2400000c 	.word	0x2400000c
 8000af4:	24000274 	.word	0x24000274

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	24000274 	.word	0x24000274

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_Delay+0x40>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2400000c 	.word	0x2400000c

08000b54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetREVID+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	0c1b      	lsrs	r3, r3, #16
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	5c001000 	.word	0x5c001000

08000b6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	609a      	str	r2, [r3, #8]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	609a      	str	r2, [r3, #8]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000bd4:	b490      	push	{r4, r7}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3360      	adds	r3, #96	; 0x60
 8000be6:	461a      	mov	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	430b      	orrs	r3, r1
 8000c00:	4313      	orrs	r3, r2
 8000c02:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc90      	pop	{r4, r7}
 8000c0c:	4770      	bx	lr

08000c0e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	f003 031f 	and.w	r3, r3, #31
 8000c28:	6879      	ldr	r1, [r7, #4]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	611a      	str	r2, [r3, #16]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000c40:	b490      	push	{r4, r7}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3360      	adds	r3, #96	; 0x60
 8000c50:	461a      	mov	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	6023      	str	r3, [r4, #0]
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc90      	pop	{r4, r7}
 8000c6e:	4770      	bx	lr

08000c70 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c96:	b490      	push	{r4, r7}
 8000c98:	b084      	sub	sp, #16
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3330      	adds	r3, #48	; 0x30
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	0a1b      	lsrs	r3, r3, #8
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	4413      	add	r3, r2
 8000cb4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000cb6:	6822      	ldr	r2, [r4, #0]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	f003 031f 	and.w	r3, r3, #31
 8000cbe:	211f      	movs	r1, #31
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	0e9b      	lsrs	r3, r3, #26
 8000ccc:	f003 011f 	and.w	r1, r3, #31
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	f003 031f 	and.w	r3, r3, #31
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc90      	pop	{r4, r7}
 8000ce6:	4770      	bx	lr

08000ce8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ce8:	b490      	push	{r4, r7}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3314      	adds	r3, #20
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	0e5b      	lsrs	r3, r3, #25
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	4413      	add	r3, r2
 8000d06:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000d08:	6822      	ldr	r2, [r4, #0]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	0d1b      	lsrs	r3, r3, #20
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	2107      	movs	r1, #7
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	0d1b      	lsrs	r3, r3, #20
 8000d20:	f003 031f 	and.w	r3, r3, #31
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc90      	pop	{r4, r7}
 8000d36:	4770      	bx	lr

08000d38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0318 	and.w	r3, r3, #24
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d5c:	40d9      	lsrs	r1, r3
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	400b      	ands	r3, r1
 8000d62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d66:	431a      	orrs	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	000fffff 	.word	0x000fffff

08000d80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f003 031f 	and.w	r3, r3, #31
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6093      	str	r3, [r2, #8]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	5fffffc0 	.word	0x5fffffc0

08000ddc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000df0:	d101      	bne.n	8000df6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	6fffffc0 	.word	0x6fffffc0

08000e2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e40:	d101      	bne.n	8000e46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <LL_ADC_Enable+0x24>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	f043 0201 	orr.w	r2, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	7fffffc0 	.word	0x7fffffc0

08000e7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <LL_ADC_Disable+0x24>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	f043 0202 	orr.w	r2, r3, #2
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	7fffffc0 	.word	0x7fffffc0

08000ea4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <LL_ADC_IsEnabled+0x18>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <LL_ADC_IsEnabled+0x1a>
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d101      	bne.n	8000ee2 <LL_ADC_IsDisableOngoing+0x18>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <LL_ADC_IsDisableOngoing+0x1a>
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <LL_ADC_REG_StartConversion+0x24>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	f043 0204 	orr.w	r2, r3, #4
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	7fffffc0 	.word	0x7fffffc0

08000f18 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <LL_ADC_REG_StopConversion+0x24>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	f043 0210 	orr.w	r2, r3, #16
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	7fffffc0 	.word	0x7fffffc0

08000f40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d101      	bne.n	8000f58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <LL_ADC_INJ_StopConversion+0x24>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	f043 0220 	orr.w	r2, r3, #32
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	7fffffc0 	.word	0x7fffffc0

08000f90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d101      	bne.n	8000fa8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e18e      	b.n	80012f0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff fb93 	bl	800070c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff feef 	bl	8000ddc <LL_ADC_IsDeepPowerDownEnabled>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d004      	beq.n	800100e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fed5 	bl	8000db8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff0a 	bl	8000e2c <LL_ADC_IsInternalRegulatorEnabled>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d113      	bne.n	8001046 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff feee 	bl	8000e04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001028:	4b9a      	ldr	r3, [pc, #616]	; (8001294 <HAL_ADC_Init+0x2dc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	099b      	lsrs	r3, r3, #6
 800102e:	4a9a      	ldr	r2, [pc, #616]	; (8001298 <HAL_ADC_Init+0x2e0>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	099b      	lsrs	r3, r3, #6
 8001036:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001038:	e002      	b.n	8001040 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3b01      	subs	r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f9      	bne.n	800103a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff feee 	bl	8000e2c <LL_ADC_IsInternalRegulatorEnabled>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10d      	bne.n	8001072 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105a:	f043 0210 	orr.w	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff62 	bl	8000f40 <LL_ADC_REG_IsConversionOngoing>
 800107c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	2b00      	cmp	r3, #0
 8001088:	f040 8129 	bne.w	80012de <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 8125 	bne.w	80012de <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001098:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800109c:	f043 0202 	orr.w	r2, r3, #2
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fefb 	bl	8000ea4 <LL_ADC_IsEnabled>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d136      	bne.n	8001122 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a78      	ldr	r2, [pc, #480]	; (800129c <HAL_ADC_Init+0x2e4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d004      	beq.n	80010c8 <HAL_ADC_Init+0x110>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a77      	ldr	r2, [pc, #476]	; (80012a0 <HAL_ADC_Init+0x2e8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d10e      	bne.n	80010e6 <HAL_ADC_Init+0x12e>
 80010c8:	4874      	ldr	r0, [pc, #464]	; (800129c <HAL_ADC_Init+0x2e4>)
 80010ca:	f7ff feeb 	bl	8000ea4 <LL_ADC_IsEnabled>
 80010ce:	4604      	mov	r4, r0
 80010d0:	4873      	ldr	r0, [pc, #460]	; (80012a0 <HAL_ADC_Init+0x2e8>)
 80010d2:	f7ff fee7 	bl	8000ea4 <LL_ADC_IsEnabled>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4323      	orrs	r3, r4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	e008      	b.n	80010f8 <HAL_ADC_Init+0x140>
 80010e6:	486f      	ldr	r0, [pc, #444]	; (80012a4 <HAL_ADC_Init+0x2ec>)
 80010e8:	f7ff fedc 	bl	8000ea4 <LL_ADC_IsEnabled>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bf0c      	ite	eq
 80010f2:	2301      	moveq	r3, #1
 80010f4:	2300      	movne	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d012      	beq.n	8001122 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a66      	ldr	r2, [pc, #408]	; (800129c <HAL_ADC_Init+0x2e4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d004      	beq.n	8001110 <HAL_ADC_Init+0x158>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a65      	ldr	r2, [pc, #404]	; (80012a0 <HAL_ADC_Init+0x2e8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d101      	bne.n	8001114 <HAL_ADC_Init+0x15c>
 8001110:	4a65      	ldr	r2, [pc, #404]	; (80012a8 <HAL_ADC_Init+0x2f0>)
 8001112:	e000      	b.n	8001116 <HAL_ADC_Init+0x15e>
 8001114:	4a65      	ldr	r2, [pc, #404]	; (80012ac <HAL_ADC_Init+0x2f4>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4619      	mov	r1, r3
 800111c:	4610      	mov	r0, r2
 800111e:	f7ff fd25 	bl	8000b6c <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001122:	f7ff fd17 	bl	8000b54 <HAL_GetREVID>
 8001126:	4602      	mov	r2, r0
 8001128:	f241 0303 	movw	r3, #4099	; 0x1003
 800112c:	429a      	cmp	r2, r3
 800112e:	d914      	bls.n	800115a <HAL_ADC_Init+0x1a2>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b10      	cmp	r3, #16
 8001136:	d110      	bne.n	800115a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7d5b      	ldrb	r3, [r3, #21]
 800113c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001142:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001148:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7f1b      	ldrb	r3, [r3, #28]
 800114e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001150:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001152:	f043 030c 	orr.w	r3, r3, #12
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	e00d      	b.n	8001176 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7d5b      	ldrb	r3, [r3, #21]
 800115e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001164:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800116a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7f1b      	ldrb	r3, [r3, #28]
 8001170:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7f1b      	ldrb	r3, [r3, #28]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d106      	bne.n	800118c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	3b01      	subs	r3, #1
 8001184:	045b      	lsls	r3, r3, #17
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	2b00      	cmp	r3, #0
 8001192:	d009      	beq.n	80011a8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <HAL_ADC_Init+0x2f8>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	430b      	orrs	r3, r1
 80011ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff febd 	bl	8000f40 <LL_ADC_REG_IsConversionOngoing>
 80011c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fedf 	bl	8000f90 <LL_ADC_INJ_IsConversionOngoing>
 80011d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d14a      	bne.n	8001270 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d147      	bne.n	8001270 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7d1b      	ldrb	r3, [r3, #20]
 80011e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <HAL_ADC_Init+0x2fc>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	69b9      	ldr	r1, [r7, #24]
 80011fe:	430b      	orrs	r3, r1
 8001200:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001208:	2b01      	cmp	r3, #1
 800120a:	d11b      	bne.n	8001244 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <HAL_ADC_Init+0x300>)
 800121a:	4013      	ands	r3, r2
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001220:	3a01      	subs	r2, #1
 8001222:	0411      	lsls	r1, r2, #16
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001228:	4311      	orrs	r1, r2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800122e:	4311      	orrs	r1, r2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001234:	430a      	orrs	r2, r1
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0201 	orr.w	r2, r2, #1
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	e007      	b.n	8001254 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fee0 	bl	8002030 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d121      	bne.n	80012bc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f023 010f 	bic.w	r1, r3, #15
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	1e5a      	subs	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
 8001290:	e01c      	b.n	80012cc <HAL_ADC_Init+0x314>
 8001292:	bf00      	nop
 8001294:	24000000 	.word	0x24000000
 8001298:	053e2d63 	.word	0x053e2d63
 800129c:	40022000 	.word	0x40022000
 80012a0:	40022100 	.word	0x40022100
 80012a4:	58026000 	.word	0x58026000
 80012a8:	40022300 	.word	0x40022300
 80012ac:	58026300 	.word	0x58026300
 80012b0:	fff0c003 	.word	0xfff0c003
 80012b4:	ffffbffc 	.word	0xffffbffc
 80012b8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 020f 	bic.w	r2, r2, #15
 80012ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d0:	f023 0303 	bic.w	r3, r3, #3
 80012d4:	f043 0201 	orr.w	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
 80012dc:	e007      	b.n	80012ee <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e2:	f043 0210 	orr.w	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3724      	adds	r7, #36	; 0x24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}

080012f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a5c      	ldr	r2, [pc, #368]	; (8001478 <HAL_ADC_Start+0x180>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d004      	beq.n	8001314 <HAL_ADC_Start+0x1c>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a5b      	ldr	r2, [pc, #364]	; (800147c <HAL_ADC_Start+0x184>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_ADC_Start+0x20>
 8001314:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <HAL_ADC_Start+0x188>)
 8001316:	e000      	b.n	800131a <HAL_ADC_Start+0x22>
 8001318:	4b5a      	ldr	r3, [pc, #360]	; (8001484 <HAL_ADC_Start+0x18c>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fd30 	bl	8000d80 <LL_ADC_GetMultimode>
 8001320:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fe0a 	bl	8000f40 <LL_ADC_REG_IsConversionOngoing>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	f040 809a 	bne.w	8001468 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_ADC_Start+0x4a>
 800133e:	2302      	movs	r3, #2
 8001340:	e095      	b.n	800146e <HAL_ADC_Start+0x176>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fd94 	bl	8001e78 <ADC_Enable>
 8001350:	4603      	mov	r3, r0
 8001352:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 8081 	bne.w	800145e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001360:	4b49      	ldr	r3, [pc, #292]	; (8001488 <HAL_ADC_Start+0x190>)
 8001362:	4013      	ands	r3, r2
 8001364:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a42      	ldr	r2, [pc, #264]	; (800147c <HAL_ADC_Start+0x184>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d002      	beq.n	800137c <HAL_ADC_Start+0x84>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	e000      	b.n	800137e <HAL_ADC_Start+0x86>
 800137c:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <HAL_ADC_Start+0x180>)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	4293      	cmp	r3, r2
 8001384:	d002      	beq.n	800138c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d105      	bne.n	8001398 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001390:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a4:	d106      	bne.n	80013b4 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f023 0206 	bic.w	r2, r3, #6
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	659a      	str	r2, [r3, #88]	; 0x58
 80013b2:	e002      	b.n	80013ba <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	221c      	movs	r2, #28
 80013c0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a2b      	ldr	r2, [pc, #172]	; (800147c <HAL_ADC_Start+0x184>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d002      	beq.n	80013da <HAL_ADC_Start+0xe2>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	e000      	b.n	80013dc <HAL_ADC_Start+0xe4>
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_ADC_Start+0x180>)
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d008      	beq.n	80013f6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d002      	beq.n	80013f6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	2b09      	cmp	r3, #9
 80013f4:	d114      	bne.n	8001420 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d007      	beq.n	8001414 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800140c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fd69 	bl	8000ef0 <LL_ADC_REG_StartConversion>
 800141e:	e025      	b.n	800146c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001424:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <HAL_ADC_Start+0x184>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d002      	beq.n	800143c <HAL_ADC_Start+0x144>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	e000      	b.n	800143e <HAL_ADC_Start+0x146>
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_ADC_Start+0x180>)
 800143e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00f      	beq.n	800146c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001450:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001454:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	655a      	str	r2, [r3, #84]	; 0x54
 800145c:	e006      	b.n	800146c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001466:	e001      	b.n	800146c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001468:	2302      	movs	r3, #2
 800146a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800146c:	7dfb      	ldrb	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40022000 	.word	0x40022000
 800147c:	40022100 	.word	0x40022100
 8001480:	40022300 	.word	0x40022300
 8001484:	58026300 	.word	0x58026300
 8001488:	fffff0fe 	.word	0xfffff0fe

0800148c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_ADC_Stop+0x16>
 800149e:	2302      	movs	r3, #2
 80014a0:	e021      	b.n	80014e6 <HAL_ADC_Stop+0x5a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80014aa:	2103      	movs	r1, #3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fc2f 	bl	8001d10 <ADC_ConversionStop>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10f      	bne.n	80014dc <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fd5f 	bl	8001f80 <ADC_Disable>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_ADC_Stop+0x64>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	ffffeefe 	.word	0xffffeefe

080014f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6e      	ldr	r2, [pc, #440]	; (80016bc <HAL_ADC_PollForConversion+0x1c8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d004      	beq.n	8001512 <HAL_ADC_PollForConversion+0x1e>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6c      	ldr	r2, [pc, #432]	; (80016c0 <HAL_ADC_PollForConversion+0x1cc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_ADC_PollForConversion+0x22>
 8001512:	4b6c      	ldr	r3, [pc, #432]	; (80016c4 <HAL_ADC_PollForConversion+0x1d0>)
 8001514:	e000      	b.n	8001518 <HAL_ADC_PollForConversion+0x24>
 8001516:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <HAL_ADC_PollForConversion+0x1d4>)
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fc31 	bl	8000d80 <LL_ADC_GetMultimode>
 800151e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d102      	bne.n	800152e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001528:	2308      	movs	r3, #8
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	e037      	b.n	800159e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b05      	cmp	r3, #5
 8001538:	d002      	beq.n	8001540 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b09      	cmp	r3, #9
 800153e:	d111      	bne.n	8001564 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d007      	beq.n	800155e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001552:	f043 0220 	orr.w	r2, r3, #32
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0aa      	b.n	80016b4 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800155e:	2304      	movs	r3, #4
 8001560:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001562:	e01c      	b.n	800159e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_ADC_PollForConversion+0x1c8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d004      	beq.n	8001578 <HAL_ADC_PollForConversion+0x84>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a53      	ldr	r2, [pc, #332]	; (80016c0 <HAL_ADC_PollForConversion+0x1cc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_ADC_PollForConversion+0x88>
 8001578:	4b52      	ldr	r3, [pc, #328]	; (80016c4 <HAL_ADC_PollForConversion+0x1d0>)
 800157a:	e000      	b.n	800157e <HAL_ADC_PollForConversion+0x8a>
 800157c:	4b52      	ldr	r3, [pc, #328]	; (80016c8 <HAL_ADC_PollForConversion+0x1d4>)
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fc0c 	bl	8000d9c <LL_ADC_GetMultiDMATransfer>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	f043 0220 	orr.w	r2, r3, #32
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e08c      	b.n	80016b4 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800159a:	2304      	movs	r3, #4
 800159c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800159e:	f7ff faab 	bl	8000af8 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015a4:	e01a      	b.n	80015dc <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d016      	beq.n	80015dc <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015ae:	f7ff faa3 	bl	8000af8 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d302      	bcc.n	80015c4 <HAL_ADC_PollForConversion+0xd0>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10b      	bne.n	80015dc <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	f043 0204 	orr.w	r2, r3, #4
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e06b      	b.n	80016b4 <HAL_ADC_PollForConversion+0x1c0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0dd      	beq.n	80015a6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fb38 	bl	8000c70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01c      	beq.n	8001640 <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7d5b      	ldrb	r3, [r3, #21]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b08      	cmp	r3, #8
 800161a:	d111      	bne.n	8001640 <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <HAL_ADC_PollForConversion+0x1cc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d002      	beq.n	8001650 <HAL_ADC_PollForConversion+0x15c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	e000      	b.n	8001652 <HAL_ADC_PollForConversion+0x15e>
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_ADC_PollForConversion+0x1c8>)
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	4293      	cmp	r3, r2
 8001658:	d008      	beq.n	800166c <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d002      	beq.n	800166c <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b09      	cmp	r3, #9
 800166a:	d104      	bne.n	8001676 <HAL_ADC_PollForConversion+0x182>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	e00c      	b.n	8001690 <HAL_ADC_PollForConversion+0x19c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_ADC_PollForConversion+0x1cc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d002      	beq.n	8001686 <HAL_ADC_PollForConversion+0x192>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	e000      	b.n	8001688 <HAL_ADC_PollForConversion+0x194>
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_ADC_PollForConversion+0x1c8>)
 8001688:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2b08      	cmp	r3, #8
 8001694:	d104      	bne.n	80016a0 <HAL_ADC_PollForConversion+0x1ac>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2208      	movs	r2, #8
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e008      	b.n	80016b2 <HAL_ADC_PollForConversion+0x1be>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d103      	bne.n	80016b2 <HAL_ADC_PollForConversion+0x1be>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40022000 	.word	0x40022000
 80016c0:	40022100 	.word	0x40022100
 80016c4:	40022300 	.word	0x40022300
 80016c8:	58026300 	.word	0x58026300

080016cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b099      	sub	sp, #100	; 0x64
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4a99      	ldr	r2, [pc, #612]	; (8001968 <HAL_ADC_ConfigChannel+0x280>)
 8001702:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x2a>
 800170e:	2302      	movs	r3, #2
 8001710:	e2e6      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x5f8>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fc0e 	bl	8000f40 <LL_ADC_REG_IsConversionOngoing>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 82cb 	bne.w	8001cc2 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001734:	2b00      	cmp	r3, #0
 8001736:	d108      	bne.n	800174a <HAL_ADC_ConfigChannel+0x62>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0e9b      	lsrs	r3, r3, #26
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	2201      	movs	r2, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	e00f      	b.n	800176a <HAL_ADC_ConfigChannel+0x82>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	2201      	movs	r2, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	69d1      	ldr	r1, [r2, #28]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	430b      	orrs	r3, r1
 8001776:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	f7ff fa86 	bl	8000c96 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fbd6 	bl	8000f40 <LL_ADC_REG_IsConversionOngoing>
 8001794:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fbf8 	bl	8000f90 <LL_ADC_INJ_IsConversionOngoing>
 80017a0:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f040 80b3 	bne.w	8001910 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f040 80af 	bne.w	8001910 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	461a      	mov	r2, r3
 80017c0:	f7ff fa92 	bl	8000ce8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017c4:	4b69      	ldr	r3, [pc, #420]	; (800196c <HAL_ADC_ConfigChannel+0x284>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80017cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017d0:	d10b      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x102>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	e01d      	b.n	8001826 <HAL_ADC_ConfigChannel+0x13e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10b      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x128>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	e00a      	b.n	8001826 <HAL_ADC_ConfigChannel+0x13e>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d027      	beq.n	8001880 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6919      	ldr	r1, [r3, #16]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800183e:	f7ff f9c9 	bl	8000bd4 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	6919      	ldr	r1, [r3, #16]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	7e5b      	ldrb	r3, [r3, #25]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d102      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x170>
 8001852:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001856:	e000      	b.n	800185a <HAL_ADC_ConfigChannel+0x172>
 8001858:	2300      	movs	r3, #0
 800185a:	461a      	mov	r2, r3
 800185c:	f7ff f9f0 	bl	8000c40 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6919      	ldr	r1, [r3, #16]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	7e1b      	ldrb	r3, [r3, #24]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d102      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x18e>
 8001870:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001874:	e000      	b.n	8001878 <HAL_ADC_ConfigChannel+0x190>
 8001876:	2300      	movs	r3, #0
 8001878:	461a      	mov	r2, r3
 800187a:	f7ff f9c8 	bl	8000c0e <LL_ADC_SetDataRightShift>
 800187e:	e047      	b.n	8001910 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	069b      	lsls	r3, r3, #26
 8001890:	429a      	cmp	r2, r3
 8001892:	d107      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018a2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	069b      	lsls	r3, r3, #26
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d107      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018c6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	069b      	lsls	r3, r3, #26
 80018d8:	429a      	cmp	r2, r3
 80018da:	d107      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	069b      	lsls	r3, r3, #26
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800190e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fac5 	bl	8000ea4 <LL_ADC_IsEnabled>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	f040 81d9 	bne.w	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6819      	ldr	r1, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	461a      	mov	r2, r3
 8001930:	f7ff fa02 	bl	8000d38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_ADC_ConfigChannel+0x280>)
 800193a:	4293      	cmp	r3, r2
 800193c:	f040 8101 	bne.w	8001b42 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10f      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x288>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0e9b      	lsrs	r3, r3, #26
 8001956:	3301      	adds	r3, #1
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	2b09      	cmp	r3, #9
 800195e:	bf94      	ite	ls
 8001960:	2301      	movls	r3, #1
 8001962:	2300      	movhi	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	e016      	b.n	8001996 <HAL_ADC_ConfigChannel+0x2ae>
 8001968:	47ff0000 	.word	0x47ff0000
 800196c:	5c001000 	.word	0x5c001000
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800197e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	2b09      	cmp	r3, #9
 800198e:	bf94      	ite	ls
 8001990:	2301      	movls	r3, #1
 8001992:	2300      	movhi	r3, #0
 8001994:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001996:	2b00      	cmp	r3, #0
 8001998:	d064      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d107      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x2ce>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0e9b      	lsrs	r3, r3, #26
 80019ac:	3301      	adds	r3, #1
 80019ae:	069b      	lsls	r3, r3, #26
 80019b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019b4:	e00e      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x2ec>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80019c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	069b      	lsls	r3, r3, #26
 80019d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d109      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x30c>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	3301      	adds	r3, #1
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	2101      	movs	r1, #1
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	e010      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x32e>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	ea42 0103 	orr.w	r1, r2, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x354>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0e9b      	lsrs	r3, r3, #26
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f003 021f 	and.w	r2, r3, #31
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	051b      	lsls	r3, r3, #20
 8001a3a:	e011      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x378>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	f003 021f 	and.w	r2, r3, #31
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a60:	430b      	orrs	r3, r1
 8001a62:	e069      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d107      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x398>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0e9b      	lsrs	r3, r3, #26
 8001a76:	3301      	adds	r3, #1
 8001a78:	069b      	lsls	r3, r3, #26
 8001a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a7e:	e00e      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x3b6>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	61fb      	str	r3, [r7, #28]
  return result;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	3301      	adds	r3, #1
 8001a98:	069b      	lsls	r3, r3, #26
 8001a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x3d6>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	0e9b      	lsrs	r3, r3, #26
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	e010      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x3f8>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	617b      	str	r3, [r7, #20]
  return result;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	ea42 0103 	orr.w	r1, r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10d      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x424>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	3301      	adds	r3, #1
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	3b1e      	subs	r3, #30
 8001b04:	051b      	lsls	r3, r3, #20
 8001b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	e014      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x44e>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	60fb      	str	r3, [r7, #12]
  return result;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b1e      	subs	r3, #30
 8001b30:	051b      	lsls	r3, r3, #20
 8001b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b36:	430b      	orrs	r3, r1
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	6892      	ldr	r2, [r2, #8]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f8d3 	bl	8000ce8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f280 80c4 	bge.w	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a65      	ldr	r2, [pc, #404]	; (8001ce8 <HAL_ADC_ConfigChannel+0x600>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x478>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a64      	ldr	r2, [pc, #400]	; (8001cec <HAL_ADC_ConfigChannel+0x604>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x47c>
 8001b60:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_ADC_ConfigChannel+0x608>)
 8001b62:	e000      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x47e>
 8001b64:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_ADC_ConfigChannel+0x60c>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f826 	bl	8000bb8 <LL_ADC_GetCommonPathInternalCh>
 8001b6c:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a5d      	ldr	r2, [pc, #372]	; (8001ce8 <HAL_ADC_ConfigChannel+0x600>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d004      	beq.n	8001b82 <HAL_ADC_ConfigChannel+0x49a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5b      	ldr	r2, [pc, #364]	; (8001cec <HAL_ADC_ConfigChannel+0x604>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10e      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x4b8>
 8001b82:	4859      	ldr	r0, [pc, #356]	; (8001ce8 <HAL_ADC_ConfigChannel+0x600>)
 8001b84:	f7ff f98e 	bl	8000ea4 <LL_ADC_IsEnabled>
 8001b88:	4604      	mov	r4, r0
 8001b8a:	4858      	ldr	r0, [pc, #352]	; (8001cec <HAL_ADC_ConfigChannel+0x604>)
 8001b8c:	f7ff f98a 	bl	8000ea4 <LL_ADC_IsEnabled>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4323      	orrs	r3, r4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	e008      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x4ca>
 8001ba0:	4855      	ldr	r0, [pc, #340]	; (8001cf8 <HAL_ADC_ConfigChannel+0x610>)
 8001ba2:	f7ff f97f 	bl	8000ea4 <LL_ADC_IsEnabled>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d07b      	beq.n	8001cae <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a50      	ldr	r2, [pc, #320]	; (8001cfc <HAL_ADC_ConfigChannel+0x614>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d12e      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x536>
 8001bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d129      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a4a      	ldr	r2, [pc, #296]	; (8001cf8 <HAL_ADC_ConfigChannel+0x610>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d17f      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a43      	ldr	r2, [pc, #268]	; (8001ce8 <HAL_ADC_ConfigChannel+0x600>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d004      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0x500>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a42      	ldr	r2, [pc, #264]	; (8001cec <HAL_ADC_ConfigChannel+0x604>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x504>
 8001be8:	4a41      	ldr	r2, [pc, #260]	; (8001cf0 <HAL_ADC_ConfigChannel+0x608>)
 8001bea:	e000      	b.n	8001bee <HAL_ADC_ConfigChannel+0x506>
 8001bec:	4a41      	ldr	r2, [pc, #260]	; (8001cf4 <HAL_ADC_ConfigChannel+0x60c>)
 8001bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f7fe ffcb 	bl	8000b92 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001bfc:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <HAL_ADC_ConfigChannel+0x618>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	4a40      	ldr	r2, [pc, #256]	; (8001d04 <HAL_ADC_ConfigChannel+0x61c>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001c0e:	e002      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f9      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c1c:	e05a      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a39      	ldr	r2, [pc, #228]	; (8001d08 <HAL_ADC_ConfigChannel+0x620>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d11e      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x57e>
 8001c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d119      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a30      	ldr	r2, [pc, #192]	; (8001cf8 <HAL_ADC_ConfigChannel+0x610>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d14b      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <HAL_ADC_ConfigChannel+0x600>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_ADC_ConfigChannel+0x568>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a28      	ldr	r2, [pc, #160]	; (8001cec <HAL_ADC_ConfigChannel+0x604>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x56c>
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_ADC_ConfigChannel+0x608>)
 8001c52:	e000      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x56e>
 8001c54:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <HAL_ADC_ConfigChannel+0x60c>)
 8001c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f7fe ff97 	bl	8000b92 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c64:	e036      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <HAL_ADC_ConfigChannel+0x624>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d131      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
 8001c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d12c      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_ADC_ConfigChannel+0x610>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d127      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_ADC_ConfigChannel+0x600>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0x5b0>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a16      	ldr	r2, [pc, #88]	; (8001cec <HAL_ADC_ConfigChannel+0x604>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x5b4>
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_ADC_ConfigChannel+0x608>)
 8001c9a:	e000      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x5b6>
 8001c9c:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <HAL_ADC_ConfigChannel+0x60c>)
 8001c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f7fe ff73 	bl	8000b92 <LL_ADC_SetCommonPathInternalCh>
 8001cac:	e012      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f043 0220 	orr.w	r2, r3, #32
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001cc0:	e008      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	f043 0220 	orr.w	r2, r3, #32
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3764      	adds	r7, #100	; 0x64
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40022100 	.word	0x40022100
 8001cf0:	40022300 	.word	0x40022300
 8001cf4:	58026300 	.word	0x58026300
 8001cf8:	58026000 	.word	0x58026000
 8001cfc:	cb840000 	.word	0xcb840000
 8001d00:	24000000 	.word	0x24000000
 8001d04:	053e2d63 	.word	0x053e2d63
 8001d08:	c7520000 	.word	0xc7520000
 8001d0c:	cfb80000 	.word	0xcfb80000

08001d10 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f90a 	bl	8000f40 <LL_ADC_REG_IsConversionOngoing>
 8001d2c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f92c 	bl	8000f90 <LL_ADC_INJ_IsConversionOngoing>
 8001d38:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d103      	bne.n	8001d48 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8090 	beq.w	8001e68 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d02a      	beq.n	8001dac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7d5b      	ldrb	r3, [r3, #21]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d126      	bne.n	8001dac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7d1b      	ldrb	r3, [r3, #20]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d122      	bne.n	8001dac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001d6a:	e014      	b.n	8001d96 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	4a41      	ldr	r2, [pc, #260]	; (8001e74 <ADC_ConversionStop+0x164>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d90d      	bls.n	8001d90 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	f043 0210 	orr.w	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e06c      	b.n	8001e6a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	3301      	adds	r3, #1
 8001d94:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d1e3      	bne.n	8001d6c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2240      	movs	r2, #64	; 0x40
 8001daa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d014      	beq.n	8001ddc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f8c2 	bl	8000f40 <LL_ADC_REG_IsConversionOngoing>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00c      	beq.n	8001ddc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f87f 	bl	8000eca <LL_ADC_IsDisableOngoing>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d104      	bne.n	8001ddc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f89e 	bl	8000f18 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d014      	beq.n	8001e0c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f8d2 	bl	8000f90 <LL_ADC_INJ_IsConversionOngoing>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f867 	bl	8000eca <LL_ADC_IsDisableOngoing>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d104      	bne.n	8001e0c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f8ae 	bl	8000f68 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d004      	beq.n	8001e1c <ADC_ConversionStop+0x10c>
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d105      	bne.n	8001e22 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001e16:	230c      	movs	r3, #12
 8001e18:	617b      	str	r3, [r7, #20]
        break;
 8001e1a:	e005      	b.n	8001e28 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	617b      	str	r3, [r7, #20]
        break;
 8001e20:	e002      	b.n	8001e28 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001e22:	2304      	movs	r3, #4
 8001e24:	617b      	str	r3, [r7, #20]
        break;
 8001e26:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001e28:	f7fe fe66 	bl	8000af8 <HAL_GetTick>
 8001e2c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001e2e:	e014      	b.n	8001e5a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e30:	f7fe fe62 	bl	8000af8 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	d90d      	bls.n	8001e5a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	f043 0210 	orr.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e007      	b.n	8001e6a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e3      	bne.n	8001e30 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	000cdbff 	.word	0x000cdbff

08001e78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f80d 	bl	8000ea4 <LL_ADC_IsEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d167      	bne.n	8001f60 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <ADC_Enable+0xf4>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00d      	beq.n	8001eba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea2:	f043 0210 	orr.w	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e053      	b.n	8001f62 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe ffc8 	bl	8000e54 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fe18 	bl	8000af8 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <ADC_Enable+0xf8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d004      	beq.n	8001ede <ADC_Enable+0x66>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <ADC_Enable+0xfc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <ADC_Enable+0x6a>
 8001ede:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <ADC_Enable+0x100>)
 8001ee0:	e000      	b.n	8001ee4 <ADC_Enable+0x6c>
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <ADC_Enable+0x104>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe ff4b 	bl	8000d80 <LL_ADC_GetMultimode>
 8001eea:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <ADC_Enable+0xfc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d002      	beq.n	8001efc <ADC_Enable+0x84>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e000      	b.n	8001efe <ADC_Enable+0x86>
 8001efc:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <ADC_Enable+0xf8>)
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d025      	beq.n	8001f52 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d129      	bne.n	8001f60 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f0c:	e021      	b.n	8001f52 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe ffc6 	bl	8000ea4 <LL_ADC_IsEnabled>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d104      	bne.n	8001f28 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe ff96 	bl	8000e54 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f28:	f7fe fde6 	bl	8000af8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d90d      	bls.n	8001f52 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f043 0210 	orr.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e007      	b.n	8001f62 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d1d6      	bne.n	8001f0e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	8000003f 	.word	0x8000003f
 8001f70:	40022000 	.word	0x40022000
 8001f74:	40022100 	.word	0x40022100
 8001f78:	40022300 	.word	0x40022300
 8001f7c:	58026300 	.word	0x58026300

08001f80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe ff9c 	bl	8000eca <LL_ADC_IsDisableOngoing>
 8001f92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe ff83 	bl	8000ea4 <LL_ADC_IsEnabled>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d040      	beq.n	8002026 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d13d      	bne.n	8002026 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 030d 	and.w	r3, r3, #13
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d10c      	bne.n	8001fd2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe ff5d 	bl	8000e7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fca:	f7fe fd95 	bl	8000af8 <HAL_GetTick>
 8001fce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fd0:	e022      	b.n	8002018 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f043 0210 	orr.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e01c      	b.n	8002028 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fee:	f7fe fd83 	bl	8000af8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d90d      	bls.n	8002018 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f043 0210 	orr.w	r2, r3, #16
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e007      	b.n	8002028 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1e3      	bne.n	8001fee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a70      	ldr	r2, [pc, #448]	; (8002200 <ADC_ConfigureBoostMode+0x1d0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d004      	beq.n	800204c <ADC_ConfigureBoostMode+0x1c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6f      	ldr	r2, [pc, #444]	; (8002204 <ADC_ConfigureBoostMode+0x1d4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d109      	bne.n	8002060 <ADC_ConfigureBoostMode+0x30>
 800204c:	4b6e      	ldr	r3, [pc, #440]	; (8002208 <ADC_ConfigureBoostMode+0x1d8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf14      	ite	ne
 8002058:	2301      	movne	r3, #1
 800205a:	2300      	moveq	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e008      	b.n	8002072 <ADC_ConfigureBoostMode+0x42>
 8002060:	4b6a      	ldr	r3, [pc, #424]	; (800220c <ADC_ConfigureBoostMode+0x1dc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d01a      	beq.n	80020ac <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002076:	f002 fdb9 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 800207a:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002084:	d006      	beq.n	8002094 <ADC_ConfigureBoostMode+0x64>
 8002086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800208a:	d00b      	beq.n	80020a4 <ADC_ConfigureBoostMode+0x74>
 800208c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002090:	d000      	beq.n	8002094 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002092:	e05d      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	60fb      	str	r3, [r7, #12]
        break;
 80020a2:	e055      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	60fb      	str	r3, [r7, #12]
        break;
 80020aa:	e051      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80020ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020b0:	f003 fcaa 	bl	8005a08 <HAL_RCCEx_GetPeriphCLKFreq>
 80020b4:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020be:	d02a      	beq.n	8002116 <ADC_ConfigureBoostMode+0xe6>
 80020c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020c4:	d813      	bhi.n	80020ee <ADC_ConfigureBoostMode+0xbe>
 80020c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020ca:	d024      	beq.n	8002116 <ADC_ConfigureBoostMode+0xe6>
 80020cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020d0:	d806      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0xb0>
 80020d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020d6:	d01e      	beq.n	8002116 <ADC_ConfigureBoostMode+0xe6>
 80020d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020dc:	d01b      	beq.n	8002116 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80020de:	e037      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80020e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e4:	d017      	beq.n	8002116 <ADC_ConfigureBoostMode+0xe6>
 80020e6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80020ea:	d014      	beq.n	8002116 <ADC_ConfigureBoostMode+0xe6>
        break;
 80020ec:	e030      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80020ee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020f2:	d021      	beq.n	8002138 <ADC_ConfigureBoostMode+0x108>
 80020f4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020f8:	d806      	bhi.n	8002108 <ADC_ConfigureBoostMode+0xd8>
 80020fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80020fe:	d013      	beq.n	8002128 <ADC_ConfigureBoostMode+0xf8>
 8002100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002104:	d014      	beq.n	8002130 <ADC_ConfigureBoostMode+0x100>
        break;
 8002106:	e023      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002108:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800210c:	d018      	beq.n	8002140 <ADC_ConfigureBoostMode+0x110>
 800210e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002112:	d019      	beq.n	8002148 <ADC_ConfigureBoostMode+0x118>
        break;
 8002114:	e01c      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	0c9b      	lsrs	r3, r3, #18
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	60fb      	str	r3, [r7, #12]
        break;
 8002126:	e013      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	60fb      	str	r3, [r7, #12]
      break;
 800212e:	e00f      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	60fb      	str	r3, [r7, #12]
        break;
 8002136:	e00b      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	099b      	lsrs	r3, r3, #6
 800213c:	60fb      	str	r3, [r7, #12]
        break;
 800213e:	e007      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	09db      	lsrs	r3, r3, #7
 8002144:	60fb      	str	r3, [r7, #12]
        break;
 8002146:	e003      	b.n	8002150 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	60fb      	str	r3, [r7, #12]
        break;
 800214e:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002150:	f7fe fd00 	bl	8000b54 <HAL_GetREVID>
 8002154:	4602      	mov	r2, r0
 8002156:	f241 0303 	movw	r3, #4099	; 0x1003
 800215a:	429a      	cmp	r2, r3
 800215c:	d815      	bhi.n	800218a <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <ADC_ConfigureBoostMode+0x1e0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d908      	bls.n	8002178 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002174:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002176:	e03e      	b.n	80021f6 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002186:	609a      	str	r2, [r3, #8]
}
 8002188:	e035      	b.n	80021f6 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4a20      	ldr	r2, [pc, #128]	; (8002214 <ADC_ConfigureBoostMode+0x1e4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d808      	bhi.n	80021aa <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021a6:	609a      	str	r2, [r3, #8]
}
 80021a8:	e025      	b.n	80021f6 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a1a      	ldr	r2, [pc, #104]	; (8002218 <ADC_ConfigureBoostMode+0x1e8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d80a      	bhi.n	80021c8 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021c4:	609a      	str	r2, [r3, #8]
}
 80021c6:	e016      	b.n	80021f6 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a14      	ldr	r2, [pc, #80]	; (800221c <ADC_ConfigureBoostMode+0x1ec>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d80a      	bhi.n	80021e6 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	e007      	b.n	80021f6 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80021f4:	609a      	str	r2, [r3, #8]
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40022100 	.word	0x40022100
 8002208:	40022300 	.word	0x40022300
 800220c:	58026300 	.word	0x58026300
 8002210:	01312d00 	.word	0x01312d00
 8002214:	005f5e10 	.word	0x005f5e10
 8002218:	00bebc20 	.word	0x00bebc20
 800221c:	017d7840 	.word	0x017d7840

08002220 <LL_ADC_IsEnabled>:
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <LL_ADC_IsEnabled+0x18>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <LL_ADC_IsEnabled+0x1a>
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_ADC_REG_IsConversionOngoing>:
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b04      	cmp	r3, #4
 8002258:	d101      	bne.n	800225e <LL_ADC_REG_IsConversionOngoing+0x18>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b09f      	sub	sp, #124	; 0x7c
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002286:	2302      	movs	r3, #2
 8002288:	e0ba      	b.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a5c      	ldr	r2, [pc, #368]	; (8002408 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d102      	bne.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800229c:	4b5b      	ldr	r3, [pc, #364]	; (800240c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	e001      	b.n	80022a6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f043 0220 	orr.w	r2, r3, #32
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e09d      	b.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ffbd 	bl	8002246 <LL_ADC_REG_IsConversionOngoing>
 80022cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ffb7 	bl	8002246 <LL_ADC_REG_IsConversionOngoing>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d17f      	bne.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80022de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d17c      	bne.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a47      	ldr	r2, [pc, #284]	; (8002408 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a46      	ldr	r2, [pc, #280]	; (800240c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80022f8:	4b45      	ldr	r3, [pc, #276]	; (8002410 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80022fa:	e000      	b.n	80022fe <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80022fc:	4b45      	ldr	r3, [pc, #276]	; (8002414 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80022fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d039      	beq.n	800237c <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	431a      	orrs	r2, r3
 8002316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002318:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a3a      	ldr	r2, [pc, #232]	; (8002408 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d004      	beq.n	800232e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a38      	ldr	r2, [pc, #224]	; (800240c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10e      	bne.n	800234c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800232e:	4836      	ldr	r0, [pc, #216]	; (8002408 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002330:	f7ff ff76 	bl	8002220 <LL_ADC_IsEnabled>
 8002334:	4604      	mov	r4, r0
 8002336:	4835      	ldr	r0, [pc, #212]	; (800240c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002338:	f7ff ff72 	bl	8002220 <LL_ADC_IsEnabled>
 800233c:	4603      	mov	r3, r0
 800233e:	4323      	orrs	r3, r4
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e008      	b.n	800235e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 800234c:	4832      	ldr	r0, [pc, #200]	; (8002418 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800234e:	f7ff ff67 	bl	8002220 <LL_ADC_IsEnabled>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d047      	beq.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002368:	4013      	ands	r3, r2
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	6811      	ldr	r1, [r2, #0]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	6892      	ldr	r2, [r2, #8]
 8002372:	430a      	orrs	r2, r1
 8002374:	431a      	orrs	r2, r3
 8002376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002378:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800237a:	e03a      	b.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800237c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002386:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d10e      	bne.n	80023ba <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 800239c:	481a      	ldr	r0, [pc, #104]	; (8002408 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800239e:	f7ff ff3f 	bl	8002220 <LL_ADC_IsEnabled>
 80023a2:	4604      	mov	r4, r0
 80023a4:	4819      	ldr	r0, [pc, #100]	; (800240c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80023a6:	f7ff ff3b 	bl	8002220 <LL_ADC_IsEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4323      	orrs	r3, r4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	e008      	b.n	80023cc <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80023ba:	4817      	ldr	r0, [pc, #92]	; (8002418 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80023bc:	f7ff ff30 	bl	8002220 <LL_ADC_IsEnabled>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf0c      	ite	eq
 80023c6:	2301      	moveq	r3, #1
 80023c8:	2300      	movne	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d010      	beq.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023dc:	e009      	b.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f043 0220 	orr.w	r2, r3, #32
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80023f0:	e000      	b.n	80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002400:	4618      	mov	r0, r3
 8002402:	377c      	adds	r7, #124	; 0x7c
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	40022000 	.word	0x40022000
 800240c:	40022100 	.word	0x40022100
 8002410:	40022300 	.word	0x40022300
 8002414:	58026300 	.word	0x58026300
 8002418:	58026000 	.word	0x58026000
 800241c:	fffff0e0 	.word	0xfffff0e0

08002420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <__NVIC_SetPriorityGrouping+0x40>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	4313      	orrs	r3, r2
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	; (8002460 <__NVIC_SetPriorityGrouping+0x40>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00
 8002464:	05fa0000 	.word	0x05fa0000

08002468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <__NVIC_GetPriorityGrouping+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0307 	and.w	r3, r3, #7
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0b      	blt.n	80024ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4907      	ldr	r1, [pc, #28]	; (80024bc <__NVIC_EnableIRQ+0x38>)
 800249e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	; (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800258c:	d301      	bcc.n	8002592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258e:	2301      	movs	r3, #1
 8002590:	e00f      	b.n	80025b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <SysTick_Config+0x40>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259a:	210f      	movs	r1, #15
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f7ff ff8e 	bl	80024c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <SysTick_Config+0x40>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <SysTick_Config+0x40>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff29 	bl	8002420 <__NVIC_SetPriorityGrouping>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff ff40 	bl	8002468 <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff90 	bl	8002514 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5f 	bl	80024c0 <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff33 	bl	8002484 <__NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffa4 	bl	800257c <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800264e:	4b89      	ldr	r3, [pc, #548]	; (8002874 <HAL_GPIO_Init+0x234>)
 8002650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002652:	e194      	b.n	800297e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8186 	beq.w	8002978 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d00b      	beq.n	800268c <HAL_GPIO_Init+0x4c>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d007      	beq.n	800268c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002680:	2b11      	cmp	r3, #17
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b12      	cmp	r3, #18
 800268a:	d130      	bne.n	80026ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c2:	2201      	movs	r2, #1
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	f003 0201 	and.w	r2, r3, #1
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0xee>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b12      	cmp	r3, #18
 800272c:	d123      	bne.n	8002776 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	69b9      	ldr	r1, [r7, #24]
 8002772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80e0 	beq.w	8002978 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b8:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <HAL_GPIO_Init+0x238>)
 80027ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027be:	4a2e      	ldr	r2, [pc, #184]	; (8002878 <HAL_GPIO_Init+0x238>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_GPIO_Init+0x238>)
 80027ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d6:	4a29      	ldr	r2, [pc, #164]	; (800287c <HAL_GPIO_Init+0x23c>)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	220f      	movs	r2, #15
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a20      	ldr	r2, [pc, #128]	; (8002880 <HAL_GPIO_Init+0x240>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d052      	beq.n	80028a8 <HAL_GPIO_Init+0x268>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1f      	ldr	r2, [pc, #124]	; (8002884 <HAL_GPIO_Init+0x244>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d031      	beq.n	800286e <HAL_GPIO_Init+0x22e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <HAL_GPIO_Init+0x248>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02b      	beq.n	800286a <HAL_GPIO_Init+0x22a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_GPIO_Init+0x24c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d025      	beq.n	8002866 <HAL_GPIO_Init+0x226>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_GPIO_Init+0x250>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01f      	beq.n	8002862 <HAL_GPIO_Init+0x222>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <HAL_GPIO_Init+0x254>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d019      	beq.n	800285e <HAL_GPIO_Init+0x21e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <HAL_GPIO_Init+0x258>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_GPIO_Init+0x21a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_GPIO_Init+0x25c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00d      	beq.n	8002856 <HAL_GPIO_Init+0x216>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <HAL_GPIO_Init+0x260>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d007      	beq.n	8002852 <HAL_GPIO_Init+0x212>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <HAL_GPIO_Init+0x264>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_GPIO_Init+0x20e>
 800284a:	2309      	movs	r3, #9
 800284c:	e02d      	b.n	80028aa <HAL_GPIO_Init+0x26a>
 800284e:	230a      	movs	r3, #10
 8002850:	e02b      	b.n	80028aa <HAL_GPIO_Init+0x26a>
 8002852:	2308      	movs	r3, #8
 8002854:	e029      	b.n	80028aa <HAL_GPIO_Init+0x26a>
 8002856:	2307      	movs	r3, #7
 8002858:	e027      	b.n	80028aa <HAL_GPIO_Init+0x26a>
 800285a:	2306      	movs	r3, #6
 800285c:	e025      	b.n	80028aa <HAL_GPIO_Init+0x26a>
 800285e:	2305      	movs	r3, #5
 8002860:	e023      	b.n	80028aa <HAL_GPIO_Init+0x26a>
 8002862:	2304      	movs	r3, #4
 8002864:	e021      	b.n	80028aa <HAL_GPIO_Init+0x26a>
 8002866:	2303      	movs	r3, #3
 8002868:	e01f      	b.n	80028aa <HAL_GPIO_Init+0x26a>
 800286a:	2302      	movs	r3, #2
 800286c:	e01d      	b.n	80028aa <HAL_GPIO_Init+0x26a>
 800286e:	2301      	movs	r3, #1
 8002870:	e01b      	b.n	80028aa <HAL_GPIO_Init+0x26a>
 8002872:	bf00      	nop
 8002874:	58000080 	.word	0x58000080
 8002878:	58024400 	.word	0x58024400
 800287c:	58000400 	.word	0x58000400
 8002880:	58020000 	.word	0x58020000
 8002884:	58020400 	.word	0x58020400
 8002888:	58020800 	.word	0x58020800
 800288c:	58020c00 	.word	0x58020c00
 8002890:	58021000 	.word	0x58021000
 8002894:	58021400 	.word	0x58021400
 8002898:	58021800 	.word	0x58021800
 800289c:	58021c00 	.word	0x58021c00
 80028a0:	58022000 	.word	0x58022000
 80028a4:	58022400 	.word	0x58022400
 80028a8:	2300      	movs	r3, #0
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	f002 0203 	and.w	r2, r2, #3
 80028b0:	0092      	lsls	r2, r2, #2
 80028b2:	4093      	lsls	r3, r2
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ba:	4938      	ldr	r1, [pc, #224]	; (800299c <HAL_GPIO_Init+0x35c>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	3302      	adds	r3, #2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800294a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	3301      	adds	r3, #1
 800297c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	f47f ae63 	bne.w	8002654 <HAL_GPIO_Init+0x14>
  }
}
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	58000400 	.word	0x58000400

080029a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a2:	b08f      	sub	sp, #60	; 0x3c
 80029a4:	af0a      	add	r7, sp, #40	; 0x28
 80029a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e116      	b.n	8002be0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f006 fff9 	bl	80099c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2203      	movs	r2, #3
 80029d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 f8f4 	bl	8006bde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	687e      	ldr	r6, [r7, #4]
 80029fe:	466d      	mov	r5, sp
 8002a00:	f106 0410 	add.w	r4, r6, #16
 8002a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a14:	1d33      	adds	r3, r6, #4
 8002a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a18:	6838      	ldr	r0, [r7, #0]
 8002a1a:	f003 ffcb 	bl	80069b4 <USB_CoreInit>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0d7      	b.n	8002be0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 f8e2 	bl	8006c00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e04a      	b.n	8002ad8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	333d      	adds	r3, #61	; 0x3d
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	333c      	adds	r3, #60	; 0x3c
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	b298      	uxth	r0, r3
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3342      	adds	r3, #66	; 0x42
 8002a7e:	4602      	mov	r2, r0
 8002a80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	333f      	adds	r3, #63	; 0x3f
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3344      	adds	r3, #68	; 0x44
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3348      	adds	r3, #72	; 0x48
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3350      	adds	r3, #80	; 0x50
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d3af      	bcc.n	8002a42 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e044      	b.n	8002b72 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3b5      	bcc.n	8002ae8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	687e      	ldr	r6, [r7, #4]
 8002b84:	466d      	mov	r5, sp
 8002b86:	f106 0410 	add.w	r4, r6, #16
 8002b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b9a:	1d33      	adds	r3, r6, #4
 8002b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9e:	6838      	ldr	r0, [r7, #0]
 8002ba0:	f004 f858 	bl	8006c54 <USB_DevInit>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e014      	b.n	8002be0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f001 f892 	bl	8003cf8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f005 f83f 	bl	8007c5c <USB_DevDisconnect>

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002be8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_PCD_Start+0x1c>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e020      	b.n	8002c46 <HAL_PCD_Start+0x5e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d109      	bne.n	8002c28 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d005      	beq.n	8002c28 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f004 fffd 	bl	8007c2c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 ffc0 	bl	8006bbc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c4e:	b590      	push	{r4, r7, lr}
 8002c50:	b08d      	sub	sp, #52	; 0x34
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f005 f8a4 	bl	8007db2 <USB_GetMode>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f040 83ca 	bne.w	8003406 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f005 f808 	bl	8007c8c <USB_ReadInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 83c0 	beq.w	8003404 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f004 ffff 	bl	8007c8c <USB_ReadInterrupts>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d107      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f002 0202 	and.w	r2, r2, #2
 8002ca6:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f004 ffed 	bl	8007c8c <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d161      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0210 	bic.w	r2, r2, #16
 8002cca:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f003 020f 	and.w	r2, r3, #15
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3304      	adds	r3, #4
 8002cea:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	0c5b      	lsrs	r3, r3, #17
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d124      	bne.n	8002d42 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d035      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	6a38      	ldr	r0, [r7, #32]
 8002d18:	f004 fe65 	bl	80079e6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d28:	441a      	add	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d3a:	441a      	add	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	619a      	str	r2, [r3, #24]
 8002d40:	e016      	b.n	8002d70 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	0c5b      	lsrs	r3, r3, #17
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d110      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d54:	2208      	movs	r2, #8
 8002d56:	4619      	mov	r1, r3
 8002d58:	6a38      	ldr	r0, [r7, #32]
 8002d5a:	f004 fe44 	bl	80079e6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d6a:	441a      	add	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0210 	orr.w	r2, r2, #16
 8002d7e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f004 ff81 	bl	8007c8c <USB_ReadInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d94:	d16e      	bne.n	8002e74 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 ff87 	bl	8007cb2 <USB_ReadDevAllOutEpInterrupt>
 8002da4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002da6:	e062      	b.n	8002e6e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d057      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 ffac 	bl	8007d1a <USB_ReadDevOutEPInterrupt>
 8002dc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2301      	movs	r3, #1
 8002dde:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fdde 	bl	80039a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2308      	movs	r3, #8
 8002e02:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fed8 	bl	8003bbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e22:	461a      	mov	r2, r3
 8002e24:	2310      	movs	r3, #16
 8002e26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2320      	movs	r3, #32
 8002e42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	3301      	adds	r3, #1
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d199      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f004 ff07 	bl	8007c8c <USB_ReadInterrupts>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e88:	f040 80c0 	bne.w	800300c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f004 ff28 	bl	8007ce6 <USB_ReadDevAllInEpInterrupt>
 8002e96:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e9c:	e0b2      	b.n	8003004 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a7 	beq.w	8002ff8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 ff4e 	bl	8007d56 <USB_ReadDevInEPInterrupt>
 8002eba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d057      	beq.n	8002f76 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	2201      	movs	r2, #1
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69f9      	ldr	r1, [r7, #28]
 8002ee2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2301      	movs	r3, #1
 8002efa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d132      	bne.n	8002f6a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3348      	adds	r3, #72	; 0x48
 8002f14:	6819      	ldr	r1, [r3, #0]
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4403      	add	r3, r0
 8002f24:	3344      	adds	r3, #68	; 0x44
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4419      	add	r1, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4403      	add	r3, r0
 8002f38:	3348      	adds	r3, #72	; 0x48
 8002f3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d113      	bne.n	8002f6a <HAL_PCD_IRQHandler+0x31c>
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3350      	adds	r3, #80	; 0x50
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d108      	bne.n	8002f6a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f62:	461a      	mov	r2, r3
 8002f64:	2101      	movs	r1, #1
 8002f66:	f004 ff57 	bl	8007e18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f006 fda6 	bl	8009ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2308      	movs	r3, #8
 8002f90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2310      	movs	r3, #16
 8002fac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2340      	movs	r3, #64	; 0x40
 8002fc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fc48 	bl	8003888 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	085b      	lsrs	r3, r3, #1
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	2b00      	cmp	r3, #0
 8003008:	f47f af49 	bne.w	8002e9e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f004 fe3b 	bl	8007c8c <USB_ReadInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800301c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003020:	d122      	bne.n	8003068 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800303c:	2b01      	cmp	r3, #1
 800303e:	d108      	bne.n	8003052 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003048:	2100      	movs	r1, #0
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fe78 	bl	8003d40 <HAL_PCDEx_LPM_Callback>
 8003050:	e002      	b.n	8003058 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f006 fdac 	bl	8009bb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003066:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f004 fe0d 	bl	8007c8c <USB_ReadInterrupts>
 8003072:	4603      	mov	r3, r0
 8003074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307c:	d112      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f006 fd68 	bl	8009b64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030a2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f004 fdef 	bl	8007c8c <USB_ReadInterrupts>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b8:	d121      	bne.n	80030fe <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80030c8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d111      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	f003 020f 	and.w	r2, r3, #15
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80030ee:	2101      	movs	r1, #1
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fe25 	bl	8003d40 <HAL_PCDEx_LPM_Callback>
 80030f6:	e002      	b.n	80030fe <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f006 fd33 	bl	8009b64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f004 fdc2 	bl	8007c8c <USB_ReadInterrupts>
 8003108:	4603      	mov	r3, r0
 800310a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003112:	f040 80c7 	bne.w	80032a4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2110      	movs	r1, #16
 8003130:	4618      	mov	r0, r3
 8003132:	f003 feed 	bl	8006f10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003136:	2300      	movs	r3, #0
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313a:	e056      	b.n	80031ea <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	461a      	mov	r2, r3
 800314a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800314e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003160:	0151      	lsls	r1, r2, #5
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	440a      	add	r2, r1
 8003166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800316a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800316e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003180:	0151      	lsls	r1, r2, #5
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	440a      	add	r2, r1
 8003186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800318a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800318e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319c:	461a      	mov	r2, r3
 800319e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b4:	0151      	lsls	r1, r2, #5
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	440a      	add	r2, r1
 80031ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d4:	0151      	lsls	r1, r2, #5
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	440a      	add	r2, r1
 80031da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	3301      	adds	r3, #1
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3a3      	bcc.n	800313c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003202:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003206:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003220:	f043 030b 	orr.w	r3, r3, #11
 8003224:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003236:	f043 030b 	orr.w	r3, r3, #11
 800323a:	6453      	str	r3, [r2, #68]	; 0x44
 800323c:	e015      	b.n	800326a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324c:	4619      	mov	r1, r3
 800324e:	f242 032b 	movw	r3, #8235	; 0x202b
 8003252:	4313      	orrs	r3, r2
 8003254:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003264:	f043 030b 	orr.w	r3, r3, #11
 8003268:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003278:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800327c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800328e:	461a      	mov	r2, r3
 8003290:	f004 fdc2 	bl	8007e18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f004 fcef 	bl	8007c8c <USB_ReadInterrupts>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b8:	d124      	bne.n	8003304 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 fd86 	bl	8007dd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fe82 	bl	8006fd2 <USB_GetDevSpeed>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681c      	ldr	r4, [r3, #0]
 80032da:	f001 fc87 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 80032de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	4620      	mov	r0, r4
 80032ea:	f003 fbc5 	bl	8006a78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f006 fc0f 	bl	8009b12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003302:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f004 fcbf 	bl	8007c8c <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b08      	cmp	r3, #8
 8003316:	d10a      	bne.n	800332e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f006 fbec 	bl	8009af6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f002 0208 	and.w	r2, r2, #8
 800332c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f004 fcaa 	bl	8007c8c <USB_ReadInterrupts>
 8003338:	4603      	mov	r3, r0
 800333a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003342:	d10f      	bne.n	8003364 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f006 fc4e 	bl	8009bf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f004 fc8f 	bl	8007c8c <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003378:	d10f      	bne.n	800339a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f006 fc21 	bl	8009bcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f004 fc74 	bl	8007c8c <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ae:	d10a      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f006 fc2f 	bl	8009c14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f004 fc5e 	bl	8007c8c <USB_ReadInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d115      	bne.n	8003406 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f006 fc1f 	bl	8009c30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	e000      	b.n	8003406 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003404:	bf00      	nop
    }
  }
}
 8003406:	3734      	adds	r7, #52	; 0x34
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}

0800340c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_PCD_SetAddress+0x1a>
 8003422:	2302      	movs	r3, #2
 8003424:	e013      	b.n	800344e <HAL_PCD_SetAddress+0x42>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f004 fbce 	bl	8007be0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	4608      	mov	r0, r1
 8003460:	4611      	mov	r1, r2
 8003462:	461a      	mov	r2, r3
 8003464:	4603      	mov	r3, r0
 8003466:	70fb      	strb	r3, [r7, #3]
 8003468:	460b      	mov	r3, r1
 800346a:	803b      	strh	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003478:	2b00      	cmp	r3, #0
 800347a:	da0f      	bge.n	800349c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	f003 020f 	and.w	r2, r3, #15
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	3338      	adds	r3, #56	; 0x38
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	3304      	adds	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	705a      	strb	r2, [r3, #1]
 800349a:	e00f      	b.n	80034bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	f003 020f 	and.w	r2, r3, #15
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034c8:	883a      	ldrh	r2, [r7, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	78ba      	ldrb	r2, [r7, #2]
 80034d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	785b      	ldrb	r3, [r3, #1]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034e6:	78bb      	ldrb	r3, [r7, #2]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d102      	bne.n	80034f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_PCD_EP_Open+0xaa>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e00e      	b.n	800351e <HAL_PCD_EP_Open+0xc8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68f9      	ldr	r1, [r7, #12]
 800350e:	4618      	mov	r0, r3
 8003510:	f003 fd84 	bl	800701c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800351c:	7afb      	ldrb	r3, [r7, #11]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003532:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003536:	2b00      	cmp	r3, #0
 8003538:	da0f      	bge.n	800355a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	f003 020f 	and.w	r2, r3, #15
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	3338      	adds	r3, #56	; 0x38
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	3304      	adds	r3, #4
 8003550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	705a      	strb	r2, [r3, #1]
 8003558:	e00f      	b.n	800357a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	f003 020f 	and.w	r2, r3, #15
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_PCD_EP_Close+0x6e>
 8003590:	2302      	movs	r3, #2
 8003592:	e00e      	b.n	80035b2 <HAL_PCD_EP_Close+0x8c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f003 fdc2 	bl	800712c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	460b      	mov	r3, r1
 80035c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ca:	7afb      	ldrb	r3, [r7, #11]
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2200      	movs	r2, #0
 80035f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035fc:	7afb      	ldrb	r3, [r7, #11]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	b2da      	uxtb	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d102      	bne.n	8003616 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003616:	7afb      	ldrb	r3, [r7, #11]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	2b00      	cmp	r3, #0
 800361e:	d109      	bne.n	8003634 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	6979      	ldr	r1, [r7, #20]
 800362e:	f004 f84d 	bl	80076cc <USB_EP0StartXfer>
 8003632:	e008      	b.n	8003646 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	6979      	ldr	r1, [r7, #20]
 8003642:	f003 fdf7 	bl	8007234 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f003 020f 	and.w	r2, r3, #15
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	460b      	mov	r3, r1
 800368e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003690:	7afb      	ldrb	r3, [r7, #11]
 8003692:	f003 020f 	and.w	r2, r3, #15
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	3338      	adds	r3, #56	; 0x38
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	3304      	adds	r3, #4
 80036a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2201      	movs	r2, #1
 80036be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c0:	7afb      	ldrb	r3, [r7, #11]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d102      	bne.n	80036da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036da:	7afb      	ldrb	r3, [r7, #11]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	6979      	ldr	r1, [r7, #20]
 80036f2:	f003 ffeb 	bl	80076cc <USB_EP0StartXfer>
 80036f6:	e008      	b.n	800370a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	6979      	ldr	r1, [r7, #20]
 8003706:	f003 fd95 	bl	8007234 <USB_EPStartXfer>
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f003 020f 	and.w	r2, r3, #15
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d901      	bls.n	8003732 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e050      	b.n	80037d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003736:	2b00      	cmp	r3, #0
 8003738:	da0f      	bge.n	800375a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3338      	adds	r3, #56	; 0x38
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	705a      	strb	r2, [r3, #1]
 8003758:	e00d      	b.n	8003776 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_PCD_EP_SetStall+0x82>
 8003792:	2302      	movs	r3, #2
 8003794:	e01e      	b.n	80037d4 <HAL_PCD_EP_SetStall+0xc0>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 f947 	bl	8007a38 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	b2d9      	uxtb	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037c4:	461a      	mov	r2, r3
 80037c6:	f004 fb27 	bl	8007e18 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	f003 020f 	and.w	r2, r3, #15
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d901      	bls.n	80037fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e042      	b.n	8003880 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da0f      	bge.n	8003822 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 020f 	and.w	r2, r3, #15
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3338      	adds	r3, #56	; 0x38
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	3304      	adds	r3, #4
 8003818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	705a      	strb	r2, [r3, #1]
 8003820:	e00f      	b.n	8003842 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 020f 	and.w	r2, r3, #15
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_PCD_EP_ClrStall+0x86>
 800385e:	2302      	movs	r3, #2
 8003860:	e00e      	b.n	8003880 <HAL_PCD_EP_ClrStall+0xa4>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68f9      	ldr	r1, [r7, #12]
 8003870:	4618      	mov	r0, r3
 8003872:	f004 f94f 	bl	8007b14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af02      	add	r7, sp, #8
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	3338      	adds	r3, #56	; 0x38
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d901      	bls.n	80038c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e06c      	b.n	800399a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d902      	bls.n	80038dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	3303      	adds	r3, #3
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038e4:	e02b      	b.n	800393e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d902      	bls.n	8003902 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3303      	adds	r3, #3
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	68d9      	ldr	r1, [r3, #12]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800391a:	b2db      	uxtb	r3, r3
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4603      	mov	r3, r0
 8003920:	6978      	ldr	r0, [r7, #20]
 8003922:	f004 f82b 	bl	800797c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	441a      	add	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	b29b      	uxth	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	429a      	cmp	r2, r3
 8003952:	d809      	bhi.n	8003968 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800395c:	429a      	cmp	r2, r3
 800395e:	d203      	bcs.n	8003968 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1be      	bne.n	80038e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	429a      	cmp	r2, r3
 8003972:	d811      	bhi.n	8003998 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	43db      	mvns	r3, r3
 800398e:	6939      	ldr	r1, [r7, #16]
 8003990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003994:	4013      	ands	r3, r2
 8003996:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	333c      	adds	r3, #60	; 0x3c
 80039bc:	3304      	adds	r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	f040 80a0 	bne.w	8003b1c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d015      	beq.n	8003a12 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a72      	ldr	r2, [pc, #456]	; (8003bb4 <PCD_EP_OutXfrComplete_int+0x210>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	f240 80dd 	bls.w	8003baa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80d7 	beq.w	8003baa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0e:	6093      	str	r3, [r2, #8]
 8003a10:	e0cb      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	6093      	str	r3, [r2, #8]
 8003a2e:	e0bc      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f040 80b7 	bne.w	8003baa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a5d      	ldr	r2, [pc, #372]	; (8003bb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d90f      	bls.n	8003a64 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a60:	6093      	str	r3, [r2, #8]
 8003a62:	e0a2      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a76:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	0159      	lsls	r1, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	440b      	add	r3, r1
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a8a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4403      	add	r3, r0
 8003a9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a9e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4403      	add	r3, r0
 8003ac2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4419      	add	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003adc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d114      	bne.n	8003b0e <PCD_EP_OutXfrComplete_int+0x16a>
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d108      	bne.n	8003b0e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b06:	461a      	mov	r2, r3
 8003b08:	2101      	movs	r1, #1
 8003b0a:	f004 f985 	bl	8007e18 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f005 ffb9 	bl	8009a8c <HAL_PCD_DataOutStageCallback>
 8003b1a:	e046      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a26      	ldr	r2, [pc, #152]	; (8003bb8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d124      	bne.n	8003b6e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b40:	6093      	str	r3, [r2, #8]
 8003b42:	e032      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f005 ff90 	bl	8009a8c <HAL_PCD_DataOutStageCallback>
 8003b6c:	e01d      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d114      	bne.n	8003b9e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b96:	461a      	mov	r2, r3
 8003b98:	2100      	movs	r1, #0
 8003b9a:	f004 f93d 	bl	8007e18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f005 ff71 	bl	8009a8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	4f54300a 	.word	0x4f54300a
 8003bb8:	4f54310a 	.word	0x4f54310a

08003bbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	333c      	adds	r3, #60	; 0x3c
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d90e      	bls.n	8003c10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f005 ff29 	bl	8009a68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d90c      	bls.n	8003c38 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d108      	bne.n	8003c38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c30:	461a      	mov	r2, r3
 8003c32:	2101      	movs	r1, #1
 8003c34:	f004 f8f0 	bl	8007e18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	4f54300a 	.word	0x4f54300a

08003c48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
 8003c54:	4613      	mov	r3, r2
 8003c56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c66:	883b      	ldrh	r3, [r7, #0]
 8003c68:	0419      	lsls	r1, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
 8003c74:	e028      	b.n	8003cc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	4413      	add	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
 8003c88:	e00d      	b.n	8003ca6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	3340      	adds	r3, #64	; 0x40
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d3ec      	bcc.n	8003c8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cb0:	883b      	ldrh	r3, [r7, #0]
 8003cb2:	0418      	lsls	r0, r3, #16
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	4302      	orrs	r2, r0
 8003cc0:	3340      	adds	r3, #64	; 0x40
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_PCDEx_ActivateLPM+0x44>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	10000003 	.word	0x10000003

08003d40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d00a      	beq.n	8003d82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d6c:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d001      	beq.n	8003d7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e01f      	b.n	8003dbe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e01d      	b.n	8003dbe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f023 0207 	bic.w	r2, r3, #7
 8003d8a:	490f      	ldr	r1, [pc, #60]	; (8003dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d92:	f7fc feb1 	bl	8000af8 <HAL_GetTick>
 8003d96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d98:	e009      	b.n	8003dae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d9a:	f7fc fead 	bl	8000af8 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003da8:	d901      	bls.n	8003dae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e007      	b.n	8003dbe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dba:	d1ee      	bne.n	8003d9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	58024800 	.word	0x58024800

08003dcc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dda:	60d3      	str	r3, [r2, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	58024800 	.word	0x58024800

08003dec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08c      	sub	sp, #48	; 0x30
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e3c4      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8087 	beq.w	8003f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e0c:	4ba2      	ldr	r3, [pc, #648]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e16:	4ba0      	ldr	r3, [pc, #640]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d007      	beq.n	8003e32 <HAL_RCC_OscConfig+0x46>
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	2b18      	cmp	r3, #24
 8003e26:	d110      	bne.n	8003e4a <HAL_RCC_OscConfig+0x5e>
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d10b      	bne.n	8003e4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e32:	4b99      	ldr	r3, [pc, #612]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d06c      	beq.n	8003f18 <HAL_RCC_OscConfig+0x12c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d168      	bne.n	8003f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e39e      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x76>
 8003e54:	4b90      	ldr	r3, [pc, #576]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a8f      	ldr	r2, [pc, #572]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	e02e      	b.n	8003ec0 <HAL_RCC_OscConfig+0xd4>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x98>
 8003e6a:	4b8b      	ldr	r3, [pc, #556]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a8a      	ldr	r2, [pc, #552]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	4b88      	ldr	r3, [pc, #544]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a87      	ldr	r2, [pc, #540]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e01d      	b.n	8003ec0 <HAL_RCC_OscConfig+0xd4>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xbc>
 8003e8e:	4b82      	ldr	r3, [pc, #520]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a81      	ldr	r2, [pc, #516]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4b7f      	ldr	r3, [pc, #508]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a7e      	ldr	r2, [pc, #504]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e00b      	b.n	8003ec0 <HAL_RCC_OscConfig+0xd4>
 8003ea8:	4b7b      	ldr	r3, [pc, #492]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a7a      	ldr	r2, [pc, #488]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b78      	ldr	r3, [pc, #480]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a77      	ldr	r2, [pc, #476]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d013      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fc fe16 	bl	8000af8 <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fc fe12 	bl	8000af8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e352      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ee2:	4b6d      	ldr	r3, [pc, #436]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0xe4>
 8003eee:	e014      	b.n	8003f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fc fe02 	bl	8000af8 <HAL_GetTick>
 8003ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fc fdfe 	bl	8000af8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e33e      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f0a:	4b63      	ldr	r3, [pc, #396]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x10c>
 8003f16:	e000      	b.n	8003f1a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8092 	beq.w	800404c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f28:	4b5b      	ldr	r3, [pc, #364]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f32:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <HAL_RCC_OscConfig+0x162>
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	2b18      	cmp	r3, #24
 8003f42:	d12d      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1b4>
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d128      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f4e:	4b52      	ldr	r3, [pc, #328]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_RCC_OscConfig+0x17a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e310      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f66:	f7fc fdf5 	bl	8000b54 <HAL_GetREVID>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d80a      	bhi.n	8003f8a <HAL_RCC_OscConfig+0x19e>
 8003f74:	4b48      	ldr	r3, [pc, #288]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	031b      	lsls	r3, r3, #12
 8003f82:	4945      	ldr	r1, [pc, #276]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f88:	e060      	b.n	800404c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8a:	4b43      	ldr	r3, [pc, #268]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	061b      	lsls	r3, r3, #24
 8003f98:	493f      	ldr	r1, [pc, #252]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f9e:	e055      	b.n	800404c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d038      	beq.n	800401a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fa8:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 0219 	bic.w	r2, r3, #25
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4938      	ldr	r1, [pc, #224]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fc fd9d 	bl	8000af8 <HAL_GetTick>
 8003fbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc2:	f7fc fd99 	bl	8000af8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e2d9      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fd4:	4b30      	ldr	r3, [pc, #192]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe0:	f7fc fdb8 	bl	8000b54 <HAL_GetREVID>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d80a      	bhi.n	8004004 <HAL_RCC_OscConfig+0x218>
 8003fee:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	031b      	lsls	r3, r3, #12
 8003ffc:	4926      	ldr	r1, [pc, #152]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
 8004002:	e023      	b.n	800404c <HAL_RCC_OscConfig+0x260>
 8004004:	4b24      	ldr	r3, [pc, #144]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	4921      	ldr	r1, [pc, #132]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
 8004018:	e018      	b.n	800404c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401a:	4b1f      	ldr	r3, [pc, #124]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fc fd67 	bl	8000af8 <HAL_GetTick>
 800402a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402e:	f7fc fd63 	bl	8000af8 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e2a3      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004040:	4b15      	ldr	r3, [pc, #84]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8091 	beq.w	800417c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800405a:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004062:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b08      	cmp	r3, #8
 800406e:	d007      	beq.n	8004080 <HAL_RCC_OscConfig+0x294>
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2b18      	cmp	r3, #24
 8004074:	d12f      	bne.n	80040d6 <HAL_RCC_OscConfig+0x2ea>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d12a      	bne.n	80040d6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_RCC_OscConfig+0x2b0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2b80      	cmp	r3, #128	; 0x80
 8004092:	d003      	beq.n	800409c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e277      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
 8004098:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800409c:	f7fc fd5a 	bl	8000b54 <HAL_GetREVID>
 80040a0:	4602      	mov	r2, r0
 80040a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d80a      	bhi.n	80040c0 <HAL_RCC_OscConfig+0x2d4>
 80040aa:	4ba2      	ldr	r3, [pc, #648]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	069b      	lsls	r3, r3, #26
 80040b8:	499e      	ldr	r1, [pc, #632]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040be:	e05d      	b.n	800417c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040c0:	4b9c      	ldr	r3, [pc, #624]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	4999      	ldr	r1, [pc, #612]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040d4:	e052      	b.n	800417c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d035      	beq.n	800414a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040de:	4b95      	ldr	r3, [pc, #596]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a94      	ldr	r2, [pc, #592]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80040e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fc fd05 	bl	8000af8 <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040f2:	f7fc fd01 	bl	8000af8 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e241      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004104:	4b8b      	ldr	r3, [pc, #556]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004110:	f7fc fd20 	bl	8000b54 <HAL_GetREVID>
 8004114:	4602      	mov	r2, r0
 8004116:	f241 0303 	movw	r3, #4099	; 0x1003
 800411a:	429a      	cmp	r2, r3
 800411c:	d80a      	bhi.n	8004134 <HAL_RCC_OscConfig+0x348>
 800411e:	4b85      	ldr	r3, [pc, #532]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	069b      	lsls	r3, r3, #26
 800412c:	4981      	ldr	r1, [pc, #516]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
 8004132:	e023      	b.n	800417c <HAL_RCC_OscConfig+0x390>
 8004134:	4b7f      	ldr	r3, [pc, #508]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	061b      	lsls	r3, r3, #24
 8004142:	497c      	ldr	r1, [pc, #496]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004144:	4313      	orrs	r3, r2
 8004146:	60cb      	str	r3, [r1, #12]
 8004148:	e018      	b.n	800417c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800414a:	4b7a      	ldr	r3, [pc, #488]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a79      	ldr	r2, [pc, #484]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004156:	f7fc fccf 	bl	8000af8 <HAL_GetTick>
 800415a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800415e:	f7fc fccb 	bl	8000af8 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e20b      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004170:	4b70      	ldr	r3, [pc, #448]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d036      	beq.n	80041f6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d019      	beq.n	80041c4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004190:	4b68      	ldr	r3, [pc, #416]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004194:	4a67      	ldr	r2, [pc, #412]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fc fcac 	bl	8000af8 <HAL_GetTick>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a4:	f7fc fca8 	bl	8000af8 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e1e8      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041b6:	4b5f      	ldr	r3, [pc, #380]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80041b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x3b8>
 80041c2:	e018      	b.n	80041f6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c4:	4b5b      	ldr	r3, [pc, #364]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80041c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c8:	4a5a      	ldr	r2, [pc, #360]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fc fc92 	bl	8000af8 <HAL_GetTick>
 80041d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fc fc8e 	bl	8000af8 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e1ce      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041ea:	4b52      	ldr	r3, [pc, #328]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80041ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d036      	beq.n	8004270 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d019      	beq.n	800423e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800420a:	4b4a      	ldr	r3, [pc, #296]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a49      	ldr	r2, [pc, #292]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004210:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004214:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004216:	f7fc fc6f 	bl	8000af8 <HAL_GetTick>
 800421a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800421e:	f7fc fc6b 	bl	8000af8 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1ab      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004230:	4b40      	ldr	r3, [pc, #256]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x432>
 800423c:	e018      	b.n	8004270 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800423e:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a3c      	ldr	r2, [pc, #240]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004248:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800424a:	f7fc fc55 	bl	8000af8 <HAL_GetTick>
 800424e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004252:	f7fc fc51 	bl	8000af8 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e191      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004264:	4b33      	ldr	r3, [pc, #204]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f0      	bne.n	8004252 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8086 	beq.w	800438a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800427e:	4b2e      	ldr	r3, [pc, #184]	; (8004338 <HAL_RCC_OscConfig+0x54c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2d      	ldr	r2, [pc, #180]	; (8004338 <HAL_RCC_OscConfig+0x54c>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004288:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800428a:	f7fc fc35 	bl	8000af8 <HAL_GetTick>
 800428e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004292:	f7fc fc31 	bl	8000af8 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b64      	cmp	r3, #100	; 0x64
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e171      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a4:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_RCC_OscConfig+0x54c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x4da>
 80042b8:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6713      	str	r3, [r2, #112]	; 0x70
 80042c4:	e02d      	b.n	8004322 <HAL_RCC_OscConfig+0x536>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4fc>
 80042ce:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	4a18      	ldr	r2, [pc, #96]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	6713      	str	r3, [r2, #112]	; 0x70
 80042da:	4b16      	ldr	r3, [pc, #88]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	4a15      	ldr	r2, [pc, #84]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80042e0:	f023 0304 	bic.w	r3, r3, #4
 80042e4:	6713      	str	r3, [r2, #112]	; 0x70
 80042e6:	e01c      	b.n	8004322 <HAL_RCC_OscConfig+0x536>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d10c      	bne.n	800430a <HAL_RCC_OscConfig+0x51e>
 80042f0:	4b10      	ldr	r3, [pc, #64]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	4a0f      	ldr	r2, [pc, #60]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80042f6:	f043 0304 	orr.w	r3, r3, #4
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	4a0c      	ldr	r2, [pc, #48]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6713      	str	r3, [r2, #112]	; 0x70
 8004308:	e00b      	b.n	8004322 <HAL_RCC_OscConfig+0x536>
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4a09      	ldr	r2, [pc, #36]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	6713      	str	r3, [r2, #112]	; 0x70
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	4a06      	ldr	r2, [pc, #24]	; (8004334 <HAL_RCC_OscConfig+0x548>)
 800431c:	f023 0304 	bic.w	r3, r3, #4
 8004320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01a      	beq.n	8004360 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432a:	f7fc fbe5 	bl	8000af8 <HAL_GetTick>
 800432e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004330:	e00f      	b.n	8004352 <HAL_RCC_OscConfig+0x566>
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
 8004338:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fc fbdc 	bl	8000af8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e11a      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004352:	4b8f      	ldr	r3, [pc, #572]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0ee      	beq.n	800433c <HAL_RCC_OscConfig+0x550>
 800435e:	e014      	b.n	800438a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fc fbca 	bl	8000af8 <HAL_GetTick>
 8004364:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004366:	e00a      	b.n	800437e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7fc fbc6 	bl	8000af8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	; 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e104      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800437e:	4b84      	ldr	r3, [pc, #528]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1ee      	bne.n	8004368 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 80f9 	beq.w	8004586 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004394:	4b7e      	ldr	r3, [pc, #504]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800439c:	2b18      	cmp	r3, #24
 800439e:	f000 80b4 	beq.w	800450a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	f040 8095 	bne.w	80044d6 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ac:	4b78      	ldr	r3, [pc, #480]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a77      	ldr	r2, [pc, #476]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fc fb9e 	bl	8000af8 <HAL_GetTick>
 80043bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fc fb9a 	bl	8000af8 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e0da      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043d2:	4b6f      	ldr	r3, [pc, #444]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043de:	4b6c      	ldr	r3, [pc, #432]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80043e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043e2:	4b6c      	ldr	r3, [pc, #432]	; (8004594 <HAL_RCC_OscConfig+0x7a8>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043ee:	0112      	lsls	r2, r2, #4
 80043f0:	430a      	orrs	r2, r1
 80043f2:	4967      	ldr	r1, [pc, #412]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	628b      	str	r3, [r1, #40]	; 0x28
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	3b01      	subs	r3, #1
 80043fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004406:	3b01      	subs	r3, #1
 8004408:	025b      	lsls	r3, r3, #9
 800440a:	b29b      	uxth	r3, r3
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	3b01      	subs	r3, #1
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004420:	3b01      	subs	r3, #1
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004428:	4959      	ldr	r1, [pc, #356]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800442e:	4b58      	ldr	r3, [pc, #352]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	4a57      	ldr	r2, [pc, #348]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800443a:	4b55      	ldr	r3, [pc, #340]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 800443c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443e:	4b56      	ldr	r3, [pc, #344]	; (8004598 <HAL_RCC_OscConfig+0x7ac>)
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004446:	00d2      	lsls	r2, r2, #3
 8004448:	4951      	ldr	r1, [pc, #324]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800444e:	4b50      	ldr	r3, [pc, #320]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	f023 020c 	bic.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	494d      	ldr	r1, [pc, #308]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 800445c:	4313      	orrs	r3, r2
 800445e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004460:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	f023 0202 	bic.w	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	4948      	ldr	r1, [pc, #288]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004472:	4b47      	ldr	r3, [pc, #284]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	4a46      	ldr	r2, [pc, #280]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447e:	4b44      	ldr	r3, [pc, #272]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	4a43      	ldr	r2, [pc, #268]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004488:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800448a:	4b41      	ldr	r3, [pc, #260]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	4a40      	ldr	r2, [pc, #256]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004494:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004496:	4b3e      	ldr	r3, [pc, #248]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	4a3d      	ldr	r2, [pc, #244]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a2:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80044a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fc fb23 	bl	8000af8 <HAL_GetTick>
 80044b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fc fb1f 	bl	8000af8 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e05f      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044c8:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x6ca>
 80044d4:	e057      	b.n	8004586 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d6:	4b2e      	ldr	r3, [pc, #184]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2d      	ldr	r2, [pc, #180]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80044dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fc fb09 	bl	8000af8 <HAL_GetTick>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ea:	f7fc fb05 	bl	8000af8 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e045      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044fc:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f0      	bne.n	80044ea <HAL_RCC_OscConfig+0x6fe>
 8004508:	e03d      	b.n	8004586 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800450a:	4b21      	ldr	r3, [pc, #132]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004510:	4b1f      	ldr	r3, [pc, #124]	; (8004590 <HAL_RCC_OscConfig+0x7a4>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2b01      	cmp	r3, #1
 800451c:	d031      	beq.n	8004582 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f003 0203 	and.w	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d12a      	bne.n	8004582 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d122      	bne.n	8004582 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d11a      	bne.n	8004582 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	0a5b      	lsrs	r3, r3, #9
 8004550:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d111      	bne.n	8004582 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d108      	bne.n	8004582 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	0e1b      	lsrs	r3, r3, #24
 8004574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3730      	adds	r7, #48	; 0x30
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	58024400 	.word	0x58024400
 8004594:	fffffc0c 	.word	0xfffffc0c
 8004598:	ffff0007 	.word	0xffff0007

0800459c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e19c      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045b0:	4b8a      	ldr	r3, [pc, #552]	; (80047dc <HAL_RCC_ClockConfig+0x240>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d910      	bls.n	80045e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b87      	ldr	r3, [pc, #540]	; (80047dc <HAL_RCC_ClockConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 020f 	bic.w	r2, r3, #15
 80045c6:	4985      	ldr	r1, [pc, #532]	; (80047dc <HAL_RCC_ClockConfig+0x240>)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ce:	4b83      	ldr	r3, [pc, #524]	; (80047dc <HAL_RCC_ClockConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e184      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	4b7b      	ldr	r3, [pc, #492]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d908      	bls.n	800460e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045fc:	4b78      	ldr	r3, [pc, #480]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	4975      	ldr	r1, [pc, #468]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800460a:	4313      	orrs	r3, r2
 800460c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004626:	429a      	cmp	r2, r3
 8004628:	d908      	bls.n	800463c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800462a:	4b6d      	ldr	r3, [pc, #436]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	496a      	ldr	r1, [pc, #424]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004638:	4313      	orrs	r3, r2
 800463a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d010      	beq.n	800466a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	4b64      	ldr	r3, [pc, #400]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004654:	429a      	cmp	r2, r3
 8004656:	d908      	bls.n	800466a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004658:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	495e      	ldr	r1, [pc, #376]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004666:	4313      	orrs	r3, r2
 8004668:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d010      	beq.n	8004698 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	4b59      	ldr	r3, [pc, #356]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004682:	429a      	cmp	r2, r3
 8004684:	d908      	bls.n	8004698 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004686:	4b56      	ldr	r3, [pc, #344]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4953      	ldr	r1, [pc, #332]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004694:	4313      	orrs	r3, r2
 8004696:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d010      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	4b4d      	ldr	r3, [pc, #308]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d908      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b4:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f023 020f 	bic.w	r2, r3, #15
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4947      	ldr	r1, [pc, #284]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d055      	beq.n	800477e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046d2:	4b43      	ldr	r3, [pc, #268]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	4940      	ldr	r1, [pc, #256]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046ec:	4b3c      	ldr	r3, [pc, #240]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d121      	bne.n	800473c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0f6      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d107      	bne.n	8004714 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004704:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d115      	bne.n	800473c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0ea      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d107      	bne.n	800472c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800471c:	4b30      	ldr	r3, [pc, #192]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0de      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800472c:	4b2c      	ldr	r3, [pc, #176]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0d6      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800473c:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f023 0207 	bic.w	r2, r3, #7
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4925      	ldr	r1, [pc, #148]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800474a:	4313      	orrs	r3, r2
 800474c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fc f9d3 	bl	8000af8 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004754:	e00a      	b.n	800476c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004756:	f7fc f9cf 	bl	8000af8 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e0be      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476c:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	429a      	cmp	r2, r3
 800477c:	d1eb      	bne.n	8004756 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	429a      	cmp	r2, r3
 8004798:	d208      	bcs.n	80047ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479a:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f023 020f 	bic.w	r2, r3, #15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	490e      	ldr	r1, [pc, #56]	; (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <HAL_RCC_ClockConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d214      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <HAL_RCC_ClockConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 020f 	bic.w	r2, r3, #15
 80047c2:	4906      	ldr	r1, [pc, #24]	; (80047dc <HAL_RCC_ClockConfig+0x240>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <HAL_RCC_ClockConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e086      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
 80047dc:	52002000 	.word	0x52002000
 80047e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d010      	beq.n	8004812 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d208      	bcs.n	8004812 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004800:	4b3c      	ldr	r3, [pc, #240]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	4939      	ldr	r1, [pc, #228]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 800480e:	4313      	orrs	r3, r2
 8004810:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d010      	beq.n	8004840 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	4b34      	ldr	r3, [pc, #208]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800482a:	429a      	cmp	r2, r3
 800482c:	d208      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800482e:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	492e      	ldr	r1, [pc, #184]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 800483c:	4313      	orrs	r3, r2
 800483e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d010      	beq.n	800486e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004858:	429a      	cmp	r2, r3
 800485a:	d208      	bcs.n	800486e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800485c:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	4922      	ldr	r1, [pc, #136]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 800486a:	4313      	orrs	r3, r2
 800486c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d010      	beq.n	800489c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004886:	429a      	cmp	r2, r3
 8004888:	d208      	bcs.n	800489c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800488a:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	4917      	ldr	r1, [pc, #92]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004898:	4313      	orrs	r3, r2
 800489a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800489c:	f000 f834 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80048a0:	4601      	mov	r1, r0
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <HAL_RCC_ClockConfig+0x35c>)
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa21 f303 	lsr.w	r3, r1, r3
 80048b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <HAL_RCC_ClockConfig+0x358>)
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	4a0d      	ldr	r2, [pc, #52]	; (80048f8 <HAL_RCC_ClockConfig+0x35c>)
 80048c4:	5cd3      	ldrb	r3, [r2, r3]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
 80048d0:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <HAL_RCC_ClockConfig+0x360>)
 80048d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048d4:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <HAL_RCC_ClockConfig+0x364>)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <HAL_RCC_ClockConfig+0x368>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc f8c0 	bl	8000a64 <HAL_InitTick>
 80048e4:	4603      	mov	r3, r0
 80048e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	58024400 	.word	0x58024400
 80048f8:	0800a220 	.word	0x0800a220
 80048fc:	24000004 	.word	0x24000004
 8004900:	24000000 	.word	0x24000000
 8004904:	24000008 	.word	0x24000008

08004908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	b089      	sub	sp, #36	; 0x24
 800490c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490e:	4baf      	ldr	r3, [pc, #700]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004916:	2b18      	cmp	r3, #24
 8004918:	f200 814e 	bhi.w	8004bb8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <HAL_RCC_GetSysClockFreq+0x1c>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004989 	.word	0x08004989
 8004928:	08004bb9 	.word	0x08004bb9
 800492c:	08004bb9 	.word	0x08004bb9
 8004930:	08004bb9 	.word	0x08004bb9
 8004934:	08004bb9 	.word	0x08004bb9
 8004938:	08004bb9 	.word	0x08004bb9
 800493c:	08004bb9 	.word	0x08004bb9
 8004940:	08004bb9 	.word	0x08004bb9
 8004944:	080049af 	.word	0x080049af
 8004948:	08004bb9 	.word	0x08004bb9
 800494c:	08004bb9 	.word	0x08004bb9
 8004950:	08004bb9 	.word	0x08004bb9
 8004954:	08004bb9 	.word	0x08004bb9
 8004958:	08004bb9 	.word	0x08004bb9
 800495c:	08004bb9 	.word	0x08004bb9
 8004960:	08004bb9 	.word	0x08004bb9
 8004964:	080049b5 	.word	0x080049b5
 8004968:	08004bb9 	.word	0x08004bb9
 800496c:	08004bb9 	.word	0x08004bb9
 8004970:	08004bb9 	.word	0x08004bb9
 8004974:	08004bb9 	.word	0x08004bb9
 8004978:	08004bb9 	.word	0x08004bb9
 800497c:	08004bb9 	.word	0x08004bb9
 8004980:	08004bb9 	.word	0x08004bb9
 8004984:	080049bb 	.word	0x080049bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004988:	4b90      	ldr	r3, [pc, #576]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d009      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004994:	4b8d      	ldr	r3, [pc, #564]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	08db      	lsrs	r3, r3, #3
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	4a8c      	ldr	r2, [pc, #560]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
 80049a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80049a6:	e10a      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049a8:	4b89      	ldr	r3, [pc, #548]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80049aa:	61bb      	str	r3, [r7, #24]
    break;
 80049ac:	e107      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80049ae:	4b89      	ldr	r3, [pc, #548]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80049b0:	61bb      	str	r3, [r7, #24]
    break;
 80049b2:	e104      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80049b4:	4b88      	ldr	r3, [pc, #544]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80049b6:	61bb      	str	r3, [r7, #24]
    break;
 80049b8:	e101      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049ba:	4b84      	ldr	r3, [pc, #528]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049c4:	4b81      	ldr	r3, [pc, #516]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049d0:	4b7e      	ldr	r3, [pc, #504]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049da:	4b7c      	ldr	r3, [pc, #496]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	08db      	lsrs	r3, r3, #3
 80049e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	fb02 f303 	mul.w	r3, r2, r3
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80da 	beq.w	8004bb2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d05a      	beq.n	8004aba <HAL_RCC_GetSysClockFreq+0x1b2>
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d302      	bcc.n	8004a0e <HAL_RCC_GetSysClockFreq+0x106>
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d078      	beq.n	8004afe <HAL_RCC_GetSysClockFreq+0x1f6>
 8004a0c:	e099      	b.n	8004b42 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a0e:	4b6f      	ldr	r3, [pc, #444]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d02d      	beq.n	8004a76 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a1a:	4b6c      	ldr	r3, [pc, #432]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	08db      	lsrs	r3, r3, #3
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	4a6a      	ldr	r2, [pc, #424]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a44:	4b61      	ldr	r3, [pc, #388]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a54:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a58:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a70:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004a74:	e087      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	ee07 3a90 	vmov	s15, r3
 8004a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a80:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004be0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004a84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a88:	4b50      	ldr	r3, [pc, #320]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a98:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a9c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004aa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ab8:	e065      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	ee07 3a90 	vmov	s15, r3
 8004ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004be4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004acc:	4b3f      	ldr	r3, [pc, #252]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad4:	ee07 3a90 	vmov	s15, r3
 8004ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004adc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ae0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004afc:	e043      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b08:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b10:	4b2e      	ldr	r3, [pc, #184]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b20:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b24:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b40:	e021      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	ee07 3a90 	vmov	s15, r3
 8004b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004be4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b54:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b64:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b68:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b84:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	0a5b      	lsrs	r3, r3, #9
 8004b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b90:	3301      	adds	r3, #1
 8004b92:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004baa:	ee17 3a90 	vmov	r3, s15
 8004bae:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004bb0:	e005      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61bb      	str	r3, [r7, #24]
    break;
 8004bb6:	e002      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004bba:	61bb      	str	r3, [r7, #24]
    break;
 8004bbc:	bf00      	nop
  }

  return sysclockfreq;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3724      	adds	r7, #36	; 0x24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	58024400 	.word	0x58024400
 8004bd0:	03d09000 	.word	0x03d09000
 8004bd4:	003d0900 	.word	0x003d0900
 8004bd8:	017d7840 	.word	0x017d7840
 8004bdc:	46000000 	.word	0x46000000
 8004be0:	4c742400 	.word	0x4c742400
 8004be4:	4a742400 	.word	0x4a742400
 8004be8:	4bbebc20 	.word	0x4bbebc20

08004bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bf2:	f7ff fe89 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8004bf6:	4601      	mov	r1, r0
 8004bf8:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <HAL_RCC_GetHCLKFreq+0x50>)
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c04:	5cd3      	ldrb	r3, [r2, r3]
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <HAL_RCC_GetHCLKFreq+0x50>)
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	fa22 f303 	lsr.w	r3, r2, r3
 8004c26:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c2a:	4a07      	ldr	r2, [pc, #28]	; (8004c48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c30:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c32:	681b      	ldr	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	58024400 	.word	0x58024400
 8004c40:	0800a220 	.word	0x0800a220
 8004c44:	24000004 	.word	0x24000004
 8004c48:	24000000 	.word	0x24000000

08004c4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c54:	2300      	movs	r3, #0
 8004c56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c58:	2300      	movs	r3, #0
 8004c5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d03d      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c70:	d013      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c76:	d802      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004c7c:	e01f      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c82:	d013      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004c84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c88:	d01c      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004c8a:	e018      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8c:	4baf      	ldr	r3, [pc, #700]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	4aae      	ldr	r2, [pc, #696]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c98:	e015      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f001 fd23 	bl	80066ec <RCCEx_PLL2_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004caa:	e00c      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3324      	adds	r3, #36	; 0x24
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 fdcc 	bl	8006850 <RCCEx_PLL3_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004cbc:	e003      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ccc:	4b9f      	ldr	r3, [pc, #636]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cd8:	499c      	ldr	r1, [pc, #624]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	650b      	str	r3, [r1, #80]	; 0x50
 8004cde:	e001      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
 8004ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d03d      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d826      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004cf8:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d15 	.word	0x08004d15
 8004d04:	08004d23 	.word	0x08004d23
 8004d08:	08004d35 	.word	0x08004d35
 8004d0c:	08004d4d 	.word	0x08004d4d
 8004d10:	08004d4d 	.word	0x08004d4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d14:	4b8d      	ldr	r3, [pc, #564]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	4a8c      	ldr	r2, [pc, #560]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d20:	e015      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 fcdf 	bl	80066ec <RCCEx_PLL2_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d32:	e00c      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 fd88 	bl	8006850 <RCCEx_PLL3_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d44:	e003      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
      break;
 8004d4a:	e000      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d109      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d54:	4b7d      	ldr	r3, [pc, #500]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d58:	f023 0207 	bic.w	r2, r3, #7
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d60:	497a      	ldr	r1, [pc, #488]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	650b      	str	r3, [r1, #80]	; 0x50
 8004d66:	e001      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d03e      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	2b80      	cmp	r3, #128	; 0x80
 8004d7e:	d01c      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004d80:	2b80      	cmp	r3, #128	; 0x80
 8004d82:	d804      	bhi.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d00d      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004d8c:	e01e      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d90:	d01f      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d96:	d01e      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d98:	e018      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d9a:	4b6c      	ldr	r3, [pc, #432]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	4a6b      	ldr	r2, [pc, #428]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004da6:	e017      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	2100      	movs	r1, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 fc9c 	bl	80066ec <RCCEx_PLL2_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004db8:	e00e      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3324      	adds	r3, #36	; 0x24
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f001 fd45 	bl	8006850 <RCCEx_PLL3_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004dca:	e005      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd0:	e002      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004dd2:	bf00      	nop
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d109      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004dde:	4b5b      	ldr	r3, [pc, #364]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	4958      	ldr	r1, [pc, #352]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	650b      	str	r3, [r1, #80]	; 0x50
 8004df0:	e001      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
 8004df4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d044      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e0c:	d01f      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e12:	d805      	bhi.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e1c:	d00e      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004e1e:	e01f      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004e20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e24:	d01f      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004e26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e2a:	d01e      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e2c:	e018      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2e:	4b47      	ldr	r3, [pc, #284]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	4a46      	ldr	r2, [pc, #280]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e3a:	e017      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fc52 	bl	80066ec <RCCEx_PLL2_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e4c:	e00e      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3324      	adds	r3, #36	; 0x24
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f001 fcfb 	bl	8006850 <RCCEx_PLL3_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e5e:	e005      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75fb      	strb	r3, [r7, #23]
      break;
 8004e64:	e002      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e72:	4b36      	ldr	r3, [pc, #216]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e80:	4932      	ldr	r1, [pc, #200]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	658b      	str	r3, [r1, #88]	; 0x58
 8004e86:	e001      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d044      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ea2:	d01f      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ea8:	d805      	bhi.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004eae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004eb4:	e01f      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004eb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004eba:	d01f      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec0:	d01e      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004ec2:	e018      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec4:	4b21      	ldr	r3, [pc, #132]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	4a20      	ldr	r2, [pc, #128]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ed0:	e017      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 fc07 	bl	80066ec <RCCEx_PLL2_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004ee2:	e00e      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3324      	adds	r3, #36	; 0x24
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 fcb0 	bl	8006850 <RCCEx_PLL3_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ef4:	e005      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8004efa:	e002      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004efc:	bf00      	nop
 8004efe:	e000      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f08:	4b10      	ldr	r3, [pc, #64]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f16:	490d      	ldr	r1, [pc, #52]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	658b      	str	r3, [r1, #88]	; 0x58
 8004f1c:	e001      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d035      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d00c      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d802      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01b      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004f3e:	e017      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d00c      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d018      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004f48:	e012      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004f4a:	bf00      	nop
 8004f4c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f50:	4baf      	ldr	r3, [pc, #700]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	4aae      	ldr	r2, [pc, #696]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f5c:	e00e      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3304      	adds	r3, #4
 8004f62:	2102      	movs	r1, #2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 fbc1 	bl	80066ec <RCCEx_PLL2_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f6e:	e005      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	75fb      	strb	r3, [r7, #23]
      break;
 8004f74:	e002      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004f76:	bf00      	nop
 8004f78:	e000      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f82:	4ba3      	ldr	r3, [pc, #652]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8e:	49a0      	ldr	r1, [pc, #640]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f94:	e001      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d042      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fae:	d01f      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb4:	d805      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbe:	d00e      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004fc0:	e01f      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004fc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fc6:	d01f      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fcc:	d01e      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004fce:	e018      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd0:	4b8f      	ldr	r3, [pc, #572]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	4a8e      	ldr	r2, [pc, #568]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fdc:	e017      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 fb81 	bl	80066ec <RCCEx_PLL2_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fee:	e00e      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3324      	adds	r3, #36	; 0x24
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 fc2a 	bl	8006850 <RCCEx_PLL3_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005000:	e005      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
      break;
 8005006:	e002      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005008:	bf00      	nop
 800500a:	e000      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800500c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005014:	4b7e      	ldr	r3, [pc, #504]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005018:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005020:	497b      	ldr	r1, [pc, #492]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005022:	4313      	orrs	r3, r2
 8005024:	650b      	str	r3, [r1, #80]	; 0x50
 8005026:	e001      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d042      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005040:	d01b      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005042:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005046:	d805      	bhi.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d022      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800504c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005052:	e01b      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005058:	d01d      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800505a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800505e:	d01c      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005060:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005064:	d01b      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005066:	e011      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	2101      	movs	r1, #1
 800506e:	4618      	mov	r0, r3
 8005070:	f001 fb3c 	bl	80066ec <RCCEx_PLL2_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005078:	e012      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3324      	adds	r3, #36	; 0x24
 800507e:	2101      	movs	r1, #1
 8005080:	4618      	mov	r0, r3
 8005082:	f001 fbe5 	bl	8006850 <RCCEx_PLL3_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800508a:	e009      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
      break;
 8005090:	e006      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005092:	bf00      	nop
 8005094:	e004      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005096:	bf00      	nop
 8005098:	e002      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800509e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050a6:	4b5a      	ldr	r3, [pc, #360]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b2:	4957      	ldr	r1, [pc, #348]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	650b      	str	r3, [r1, #80]	; 0x50
 80050b8:	e001      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
 80050bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d044      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d4:	d01b      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80050d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050da:	d805      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d022      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80050e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80050e6:	e01b      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ec:	d01d      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80050ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050f2:	d01c      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80050f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050f8:	d01b      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80050fa:	e011      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3304      	adds	r3, #4
 8005100:	2101      	movs	r1, #1
 8005102:	4618      	mov	r0, r3
 8005104:	f001 faf2 	bl	80066ec <RCCEx_PLL2_Config>
 8005108:	4603      	mov	r3, r0
 800510a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800510c:	e012      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3324      	adds	r3, #36	; 0x24
 8005112:	2101      	movs	r1, #1
 8005114:	4618      	mov	r0, r3
 8005116:	f001 fb9b 	bl	8006850 <RCCEx_PLL3_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800511e:	e009      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	75fb      	strb	r3, [r7, #23]
      break;
 8005124:	e006      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005126:	bf00      	nop
 8005128:	e004      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800512a:	bf00      	nop
 800512c:	e002      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800512e:	bf00      	nop
 8005130:	e000      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005134:	7dfb      	ldrb	r3, [r7, #23]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800513a:	4b35      	ldr	r3, [pc, #212]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005148:	4931      	ldr	r1, [pc, #196]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800514a:	4313      	orrs	r3, r2
 800514c:	658b      	str	r3, [r1, #88]	; 0x58
 800514e:	e001      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d02d      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005168:	d005      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800516a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800516e:	d009      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005174:	e00f      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005176:	4b26      	ldr	r3, [pc, #152]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	4a25      	ldr	r2, [pc, #148]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800517c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005180:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005182:	e00c      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	2101      	movs	r1, #1
 800518a:	4618      	mov	r0, r3
 800518c:	f001 faae 	bl	80066ec <RCCEx_PLL2_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005194:	e003      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	75fb      	strb	r3, [r7, #23]
      break;
 800519a:	e000      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800519c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051a4:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b0:	4917      	ldr	r1, [pc, #92]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	650b      	str	r3, [r1, #80]	; 0x50
 80051b6:	e001      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d035      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d81b      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	08005215 	.word	0x08005215
 80051dc:	080051e9 	.word	0x080051e9
 80051e0:	080051f7 	.word	0x080051f7
 80051e4:	08005215 	.word	0x08005215
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051f4:	e00f      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3304      	adds	r3, #4
 80051fa:	2102      	movs	r1, #2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fa75 	bl	80066ec <RCCEx_PLL2_Config>
 8005202:	4603      	mov	r3, r0
 8005204:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005206:	e006      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
      break;
 800520c:	e003      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800520e:	bf00      	nop
 8005210:	58024400 	.word	0x58024400
      break;
 8005214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800521c:	4bba      	ldr	r3, [pc, #744]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800521e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005220:	f023 0203 	bic.w	r2, r3, #3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	49b7      	ldr	r1, [pc, #732]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800522a:	4313      	orrs	r3, r2
 800522c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800522e:	e001      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8086 	beq.w	800534e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005242:	4bb2      	ldr	r3, [pc, #712]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4ab1      	ldr	r2, [pc, #708]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800524e:	f7fb fc53 	bl	8000af8 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005254:	e009      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005256:	f7fb fc4f 	bl	8000af8 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b64      	cmp	r3, #100	; 0x64
 8005262:	d902      	bls.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	75fb      	strb	r3, [r7, #23]
        break;
 8005268:	e005      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800526a:	4ba8      	ldr	r3, [pc, #672]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ef      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005276:	7dfb      	ldrb	r3, [r7, #23]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d166      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800527c:	4ba2      	ldr	r3, [pc, #648]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800527e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005286:	4053      	eors	r3, r2
 8005288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005290:	4b9d      	ldr	r3, [pc, #628]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005298:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800529a:	4b9b      	ldr	r3, [pc, #620]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	4a9a      	ldr	r2, [pc, #616]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052a6:	4b98      	ldr	r3, [pc, #608]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052aa:	4a97      	ldr	r2, [pc, #604]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052b2:	4a95      	ldr	r2, [pc, #596]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c2:	d115      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fb fc18 	bl	8000af8 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052ca:	e00b      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052cc:	f7fb fc14 	bl	8000af8 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052da:	4293      	cmp	r3, r2
 80052dc:	d902      	bls.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	75fb      	strb	r3, [r7, #23]
            break;
 80052e2:	e005      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052e4:	4b88      	ldr	r3, [pc, #544]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ed      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d126      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005304:	d10d      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005306:	4b80      	ldr	r3, [pc, #512]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005314:	0919      	lsrs	r1, r3, #4
 8005316:	4b7e      	ldr	r3, [pc, #504]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005318:	400b      	ands	r3, r1
 800531a:	497b      	ldr	r1, [pc, #492]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	610b      	str	r3, [r1, #16]
 8005320:	e005      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005322:	4b79      	ldr	r3, [pc, #484]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	4a78      	ldr	r2, [pc, #480]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005328:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800532c:	6113      	str	r3, [r2, #16]
 800532e:	4b76      	ldr	r3, [pc, #472]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005330:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533c:	4972      	ldr	r1, [pc, #456]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800533e:	4313      	orrs	r3, r2
 8005340:	670b      	str	r3, [r1, #112]	; 0x70
 8005342:	e004      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005344:	7dfb      	ldrb	r3, [r7, #23]
 8005346:	75bb      	strb	r3, [r7, #22]
 8005348:	e001      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d07d      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800535e:	2b28      	cmp	r3, #40	; 0x28
 8005360:	d866      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	08005437 	.word	0x08005437
 800536c:	08005431 	.word	0x08005431
 8005370:	08005431 	.word	0x08005431
 8005374:	08005431 	.word	0x08005431
 8005378:	08005431 	.word	0x08005431
 800537c:	08005431 	.word	0x08005431
 8005380:	08005431 	.word	0x08005431
 8005384:	08005431 	.word	0x08005431
 8005388:	0800540d 	.word	0x0800540d
 800538c:	08005431 	.word	0x08005431
 8005390:	08005431 	.word	0x08005431
 8005394:	08005431 	.word	0x08005431
 8005398:	08005431 	.word	0x08005431
 800539c:	08005431 	.word	0x08005431
 80053a0:	08005431 	.word	0x08005431
 80053a4:	08005431 	.word	0x08005431
 80053a8:	0800541f 	.word	0x0800541f
 80053ac:	08005431 	.word	0x08005431
 80053b0:	08005431 	.word	0x08005431
 80053b4:	08005431 	.word	0x08005431
 80053b8:	08005431 	.word	0x08005431
 80053bc:	08005431 	.word	0x08005431
 80053c0:	08005431 	.word	0x08005431
 80053c4:	08005431 	.word	0x08005431
 80053c8:	08005437 	.word	0x08005437
 80053cc:	08005431 	.word	0x08005431
 80053d0:	08005431 	.word	0x08005431
 80053d4:	08005431 	.word	0x08005431
 80053d8:	08005431 	.word	0x08005431
 80053dc:	08005431 	.word	0x08005431
 80053e0:	08005431 	.word	0x08005431
 80053e4:	08005431 	.word	0x08005431
 80053e8:	08005437 	.word	0x08005437
 80053ec:	08005431 	.word	0x08005431
 80053f0:	08005431 	.word	0x08005431
 80053f4:	08005431 	.word	0x08005431
 80053f8:	08005431 	.word	0x08005431
 80053fc:	08005431 	.word	0x08005431
 8005400:	08005431 	.word	0x08005431
 8005404:	08005431 	.word	0x08005431
 8005408:	08005437 	.word	0x08005437
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	2101      	movs	r1, #1
 8005412:	4618      	mov	r0, r3
 8005414:	f001 f96a 	bl	80066ec <RCCEx_PLL2_Config>
 8005418:	4603      	mov	r3, r0
 800541a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800541c:	e00c      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3324      	adds	r3, #36	; 0x24
 8005422:	2101      	movs	r1, #1
 8005424:	4618      	mov	r0, r3
 8005426:	f001 fa13 	bl	8006850 <RCCEx_PLL3_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800542e:	e003      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	75fb      	strb	r3, [r7, #23]
      break;
 8005434:	e000      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800543e:	4b32      	ldr	r3, [pc, #200]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800544a:	492f      	ldr	r1, [pc, #188]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800544c:	4313      	orrs	r3, r2
 800544e:	654b      	str	r3, [r1, #84]	; 0x54
 8005450:	e001      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d037      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005466:	2b05      	cmp	r3, #5
 8005468:	d820      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x860>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	080054b3 	.word	0x080054b3
 8005474:	08005489 	.word	0x08005489
 8005478:	0800549b 	.word	0x0800549b
 800547c:	080054b3 	.word	0x080054b3
 8005480:	080054b3 	.word	0x080054b3
 8005484:	080054b3 	.word	0x080054b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3304      	adds	r3, #4
 800548c:	2101      	movs	r1, #1
 800548e:	4618      	mov	r0, r3
 8005490:	f001 f92c 	bl	80066ec <RCCEx_PLL2_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005498:	e00c      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3324      	adds	r3, #36	; 0x24
 800549e:	2101      	movs	r1, #1
 80054a0:	4618      	mov	r0, r3
 80054a2:	f001 f9d5 	bl	8006850 <RCCEx_PLL3_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054aa:	e003      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]
      break;
 80054b0:	e000      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80054b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f023 0207 	bic.w	r2, r3, #7
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c6:	4910      	ldr	r1, [pc, #64]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	654b      	str	r3, [r1, #84]	; 0x54
 80054cc:	e001      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d040      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e4:	2b05      	cmp	r3, #5
 80054e6:	d827      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80054e8:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	0800553f 	.word	0x0800553f
 80054f4:	08005515 	.word	0x08005515
 80054f8:	08005527 	.word	0x08005527
 80054fc:	0800553f 	.word	0x0800553f
 8005500:	0800553f 	.word	0x0800553f
 8005504:	0800553f 	.word	0x0800553f
 8005508:	58024400 	.word	0x58024400
 800550c:	58024800 	.word	0x58024800
 8005510:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	2101      	movs	r1, #1
 800551a:	4618      	mov	r0, r3
 800551c:	f001 f8e6 	bl	80066ec <RCCEx_PLL2_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005524:	e00c      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3324      	adds	r3, #36	; 0x24
 800552a:	2101      	movs	r1, #1
 800552c:	4618      	mov	r0, r3
 800552e:	f001 f98f 	bl	8006850 <RCCEx_PLL3_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005536:	e003      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	75fb      	strb	r3, [r7, #23]
      break;
 800553c:	e000      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800553e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005540:	7dfb      	ldrb	r3, [r7, #23]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005546:	4bb2      	ldr	r3, [pc, #712]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554a:	f023 0207 	bic.w	r2, r3, #7
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	49ae      	ldr	r1, [pc, #696]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005556:	4313      	orrs	r3, r2
 8005558:	658b      	str	r3, [r1, #88]	; 0x58
 800555a:	e001      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	d044      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005576:	d01b      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557c:	d805      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d022      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005586:	d00a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005588:	e01b      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558e:	d01d      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005594:	d01c      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005596:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800559a:	d01b      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800559c:	e011      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3304      	adds	r3, #4
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f001 f8a1 	bl	80066ec <RCCEx_PLL2_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055ae:	e012      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3324      	adds	r3, #36	; 0x24
 80055b4:	2102      	movs	r1, #2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 f94a 	bl	8006850 <RCCEx_PLL3_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055c0:	e009      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]
      break;
 80055c6:	e006      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80055c8:	bf00      	nop
 80055ca:	e004      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80055cc:	bf00      	nop
 80055ce:	e002      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80055d0:	bf00      	nop
 80055d2:	e000      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80055d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055dc:	4b8c      	ldr	r3, [pc, #560]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80055de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ea:	4989      	ldr	r1, [pc, #548]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	654b      	str	r3, [r1, #84]	; 0x54
 80055f0:	e001      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d044      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560c:	d01b      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800560e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005612:	d805      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d022      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561c:	d00a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800561e:	e01b      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005624:	d01d      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005626:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800562a:	d01c      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800562c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005630:	d01b      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005632:	e011      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3304      	adds	r3, #4
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f001 f856 	bl	80066ec <RCCEx_PLL2_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005644:	e012      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3324      	adds	r3, #36	; 0x24
 800564a:	2102      	movs	r1, #2
 800564c:	4618      	mov	r0, r3
 800564e:	f001 f8ff 	bl	8006850 <RCCEx_PLL3_Config>
 8005652:	4603      	mov	r3, r0
 8005654:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005656:	e009      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	75fb      	strb	r3, [r7, #23]
      break;
 800565c:	e006      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800565e:	bf00      	nop
 8005660:	e004      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005662:	bf00      	nop
 8005664:	e002      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005666:	bf00      	nop
 8005668:	e000      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800566a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005672:	4b67      	ldr	r3, [pc, #412]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005676:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005680:	4963      	ldr	r1, [pc, #396]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005682:	4313      	orrs	r3, r2
 8005684:	658b      	str	r3, [r1, #88]	; 0x58
 8005686:	e001      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005688:	7dfb      	ldrb	r3, [r7, #23]
 800568a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005694:	2b00      	cmp	r3, #0
 8005696:	d044      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800569e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056a2:	d01b      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80056a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056a8:	d805      	bhi.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d022      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80056ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80056b4:	e01b      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80056b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ba:	d01d      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80056bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056c0:	d01c      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80056c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056c6:	d01b      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80056c8:	e011      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3304      	adds	r3, #4
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 f80b 	bl	80066ec <RCCEx_PLL2_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056da:	e012      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	2102      	movs	r1, #2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 f8b4 	bl	8006850 <RCCEx_PLL3_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056ec:	e009      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	75fb      	strb	r3, [r7, #23]
      break;
 80056f2:	e006      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80056f4:	bf00      	nop
 80056f6:	e004      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80056f8:	bf00      	nop
 80056fa:	e002      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80056fc:	bf00      	nop
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005708:	4b41      	ldr	r3, [pc, #260]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005716:	493e      	ldr	r1, [pc, #248]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005718:	4313      	orrs	r3, r2
 800571a:	658b      	str	r3, [r1, #88]	; 0x58
 800571c:	e001      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571e:	7dfb      	ldrb	r3, [r7, #23]
 8005720:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01a      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005738:	d10a      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3324      	adds	r3, #36	; 0x24
 800573e:	2102      	movs	r1, #2
 8005740:	4618      	mov	r0, r3
 8005742:	f001 f885 	bl	8006850 <RCCEx_PLL3_Config>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005750:	4b2f      	ldr	r3, [pc, #188]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005754:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800575e:	492c      	ldr	r1, [pc, #176]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005760:	4313      	orrs	r3, r2
 8005762:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577a:	d10a      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3324      	adds	r3, #36	; 0x24
 8005780:	2102      	movs	r1, #2
 8005782:	4618      	mov	r0, r3
 8005784:	f001 f864 	bl	8006850 <RCCEx_PLL3_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005792:	4b1f      	ldr	r3, [pc, #124]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a0:	491b      	ldr	r1, [pc, #108]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d032      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057bc:	d00d      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80057be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057c2:	d016      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d111      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 ff8c 	bl	80066ec <RCCEx_PLL2_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057d8:	e00c      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3324      	adds	r3, #36	; 0x24
 80057de:	2102      	movs	r1, #2
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 f835 	bl	8006850 <RCCEx_PLL3_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057ea:	e003      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	75fb      	strb	r3, [r7, #23]
      break;
 80057f0:	e000      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80057f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10c      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005808:	4901      	ldr	r1, [pc, #4]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800580a:	4313      	orrs	r3, r2
 800580c:	658b      	str	r3, [r1, #88]	; 0x58
 800580e:	e003      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d02f      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800582a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800582e:	d00c      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005834:	d015      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583a:	d10f      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583c:	4b71      	ldr	r3, [pc, #452]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	4a70      	ldr	r2, [pc, #448]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005848:	e00c      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3324      	adds	r3, #36	; 0x24
 800584e:	2101      	movs	r1, #1
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fffd 	bl	8006850 <RCCEx_PLL3_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800585a:	e003      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	75fb      	strb	r3, [r7, #23]
      break;
 8005860:	e000      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800586a:	4b66      	ldr	r3, [pc, #408]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005878:	4962      	ldr	r1, [pc, #392]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800587a:	4313      	orrs	r3, r2
 800587c:	654b      	str	r3, [r1, #84]	; 0x54
 800587e:	e001      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
 8005882:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d029      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589c:	d007      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800589e:	e00f      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a0:	4b58      	ldr	r3, [pc, #352]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	4a57      	ldr	r2, [pc, #348]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058ac:	e00b      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3304      	adds	r3, #4
 80058b2:	2102      	movs	r1, #2
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 ff19 	bl	80066ec <RCCEx_PLL2_Config>
 80058ba:	4603      	mov	r3, r0
 80058bc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058be:	e002      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	75fb      	strb	r3, [r7, #23]
      break;
 80058c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058cc:	4b4d      	ldr	r3, [pc, #308]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d8:	494a      	ldr	r1, [pc, #296]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058de:	e001      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3324      	adds	r3, #36	; 0x24
 80058f4:	2102      	movs	r1, #2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 ffaa 	bl	8006850 <RCCEx_PLL3_Config>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d02f      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800591a:	d00c      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800591c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005920:	d802      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d011      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005926:	e00d      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800592c:	d00f      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800592e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005932:	d00e      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005934:	e006      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005936:	4b33      	ldr	r3, [pc, #204]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	4a32      	ldr	r2, [pc, #200]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800593c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005942:	e007      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	75fb      	strb	r3, [r7, #23]
      break;
 8005948:	e004      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800594a:	bf00      	nop
 800594c:	e002      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800594e:	bf00      	nop
 8005950:	e000      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005954:	7dfb      	ldrb	r3, [r7, #23]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800595a:	4b2a      	ldr	r3, [pc, #168]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005966:	4927      	ldr	r1, [pc, #156]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005968:	4313      	orrs	r3, r2
 800596a:	654b      	str	r3, [r1, #84]	; 0x54
 800596c:	e001      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d008      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800597e:	4b21      	ldr	r3, [pc, #132]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005982:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598a:	491e      	ldr	r1, [pc, #120]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800598c:	4313      	orrs	r3, r2
 800598e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800599c:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800599e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a8:	4916      	ldr	r1, [pc, #88]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00d      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	4a11      	ldr	r2, [pc, #68]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059c4:	6113      	str	r3, [r2, #16]
 80059c6:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80059d0:	490c      	ldr	r1, [pc, #48]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	da08      	bge.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059de:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ea:	4906      	ldr	r1, [pc, #24]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80059f0:	7dbb      	ldrb	r3, [r7, #22]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e000      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	58024400 	.word	0x58024400

08005a08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b090      	sub	sp, #64	; 0x40
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a16:	d150      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005a18:	4ba1      	ldr	r3, [pc, #644]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d844      	bhi.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005a28:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2e:	bf00      	nop
 8005a30:	08005a45 	.word	0x08005a45
 8005a34:	08005a55 	.word	0x08005a55
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	08005aad 	.word	0x08005aad
 8005a40:	08005a75 	.word	0x08005a75
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fd03 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a52:	e241      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a54:	f107 0318 	add.w	r3, r7, #24
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fa63 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a62:	e239      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a64:	f107 030c 	add.w	r3, r7, #12
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fba7 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a72:	e231      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a74:	4b8a      	ldr	r3, [pc, #552]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005a84:	4b87      	ldr	r3, [pc, #540]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005a88:	e226      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a90:	d102      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8005a92:	4b85      	ldr	r3, [pc, #532]	; (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a96:	e21f      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a9e:	d102      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005aa0:	4b82      	ldr	r3, [pc, #520]	; (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aa4:	e218      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aaa:	e215      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005aac:	4b80      	ldr	r3, [pc, #512]	; (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab0:	e212      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab6:	bf00      	nop
 8005ab8:	e20e      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac0:	d14f      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005ac2:	4b77      	ldr	r3, [pc, #476]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	2b80      	cmp	r3, #128	; 0x80
 8005ad0:	d01c      	beq.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005ad2:	2b80      	cmp	r3, #128	; 0x80
 8005ad4:	d804      	bhi.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8005ada:	2b40      	cmp	r3, #64	; 0x40
 8005adc:	d00e      	beq.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005ade:	e03c      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005ae0:	2bc0      	cmp	r3, #192	; 0xc0
 8005ae2:	d037      	beq.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae8:	d018      	beq.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005aea:	e036      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fcaf 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005afa:	e1ed      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005afc:	f107 0318 	add.w	r3, r7, #24
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fa0f 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b0a:	e1e5      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b0c:	f107 030c 	add.w	r3, r7, #12
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fb53 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b1a:	e1dd      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b1c:	4b60      	ldr	r3, [pc, #384]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005b2c:	4b5d      	ldr	r3, [pc, #372]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005b30:	e1d2      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b38:	d102      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8005b3a:	4b5b      	ldr	r3, [pc, #364]	; (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b3e:	e1cb      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b46:	d102      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005b48:	4b58      	ldr	r3, [pc, #352]	; (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b4c:	e1c4      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b52:	e1c1      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b54:	4b56      	ldr	r3, [pc, #344]	; (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b58:	e1be      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b5e:	bf00      	nop
 8005b60:	e1ba      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b68:	d153      	bne.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005b6a:	4b4d      	ldr	r3, [pc, #308]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005b72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b7a:	d01f      	beq.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b80:	d805      	bhi.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005b86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b8a:	d00f      	beq.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005b8c:	e03d      	b.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005b8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b92:	d037      	beq.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005b94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b98:	d018      	beq.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005b9a:	e036      	b.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fc57 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005baa:	e195      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bac:	f107 0318 	add.w	r3, r7, #24
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 f9b7 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bba:	e18d      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bbc:	f107 030c 	add.w	r3, r7, #12
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fafb 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bca:	e185      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005bcc:	4b34      	ldr	r3, [pc, #208]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d102      	bne.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005bdc:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005be0:	e17a      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be8:	d102      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8005bea:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bee:	e173      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf6:	d102      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005bf8:	4b2c      	ldr	r3, [pc, #176]	; (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bfc:	e16c      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c02:	e169      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c04:	4b2a      	ldr	r3, [pc, #168]	; (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c08:	e166      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c0e:	bf00      	nop
 8005c10:	e162      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c18:	d15d      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005c1a:	4b21      	ldr	r3, [pc, #132]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005c22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c2a:	d01f      	beq.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c30:	d805      	bhi.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005c36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c3a:	d00f      	beq.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005c3c:	e047      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005c3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c42:	d041      	beq.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c48:	d018      	beq.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005c4a:	e040      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fbff 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c5a:	e13d      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c5c:	f107 0318 	add.w	r3, r7, #24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f95f 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c6a:	e135      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c6c:	f107 030c 	add.w	r3, r7, #12
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 faa3 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c7a:	e12d      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c7c:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005c90:	e122      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c98:	d10c      	bne.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8005c9a:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c9e:	e11b      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005ca0:	58024400 	.word	0x58024400
 8005ca4:	03d09000 	.word	0x03d09000
 8005ca8:	003d0900 	.word	0x003d0900
 8005cac:	017d7840 	.word	0x017d7840
 8005cb0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cba:	d102      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8005cbc:	4b89      	ldr	r3, [pc, #548]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cc0:	e10a      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cc6:	e107      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cc8:	4b87      	ldr	r3, [pc, #540]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ccc:	e104      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cd2:	bf00      	nop
 8005cd4:	e100      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cdc:	d153      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005cde:	4b83      	ldr	r3, [pc, #524]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005ce6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cee:	d01f      	beq.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf4:	d805      	bhi.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfe:	d00f      	beq.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005d00:	e03d      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005d02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d06:	d037      	beq.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d0c:	d018      	beq.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005d0e:	e036      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fb9d 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d1e:	e0db      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d20:	f107 0318 	add.w	r3, r7, #24
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 f8fd 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d2e:	e0d3      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d30:	f107 030c 	add.w	r3, r7, #12
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fa41 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d3e:	e0cb      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d40:	4b6a      	ldr	r3, [pc, #424]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005d50:	4b67      	ldr	r3, [pc, #412]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005d54:	e0c0      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d5c:	d102      	bne.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8005d5e:	4b65      	ldr	r3, [pc, #404]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d62:	e0b9      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d6a:	d102      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8005d6c:	4b5d      	ldr	r3, [pc, #372]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d70:	e0b2      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d76:	e0af      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d78:	4b5b      	ldr	r3, [pc, #364]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d7c:	e0ac      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d82:	bf00      	nop
 8005d84:	e0a8      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d8c:	d13d      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005d8e:	4b57      	ldr	r3, [pc, #348]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d96:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9e:	d00c      	beq.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005da4:	d011      	beq.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d12b      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005daa:	f107 0318 	add.w	r3, r7, #24
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f8b8 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005db8:	e08e      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dba:	f107 030c 	add.w	r3, r7, #12
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f9fc 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dc8:	e086      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005dca:	4b48      	ldr	r3, [pc, #288]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005dd2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005dda:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005dde:	e07b      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de6:	d102      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005de8:	4b42      	ldr	r3, [pc, #264]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dec:	e074      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df4:	d102      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8005df6:	4b3b      	ldr	r3, [pc, #236]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dfa:	e06d      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e00:	e06a      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e06:	bf00      	nop
 8005e08:	e066      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e10:	d11f      	bne.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005e12:	4b36      	ldr	r3, [pc, #216]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e26:	d008      	beq.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005e28:	e00f      	b.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fb10 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e38:	e04e      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e3a:	f107 0318 	add.w	r3, r7, #24
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f870 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e48:	e046      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e4e:	bf00      	nop
 8005e50:	e042      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e58:	d13c      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005e62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e6a:	d01e      	beq.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8005e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e70:	d805      	bhi.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00d      	beq.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e7a:	d00e      	beq.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8005e7c:	e026      	b.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e82:	d01d      	beq.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e88:	d01d      	beq.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005e8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e8e:	d014      	beq.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8005e90:	e01c      	b.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005e92:	f000 f831 	bl	8005ef8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e96:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005e98:	e01e      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9a:	f107 0318 	add.w	r3, r7, #24
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f840 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ea8:	e016      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eaa:	f107 030c 	add.w	r3, r7, #12
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f984 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eb8:	e00e      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8005ec6:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eca:	e005      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ed0:	bf00      	nop
 8005ed2:	e001      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3740      	adds	r7, #64	; 0x40
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	017d7840 	.word	0x017d7840
 8005ee8:	00bb8000 	.word	0x00bb8000
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	03d09000 	.word	0x03d09000
 8005ef4:	003d0900 	.word	0x003d0900

08005ef8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005efc:	f7fe fe76 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8005f00:	4601      	mov	r1, r0
 8005f02:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f0e:	5cd3      	ldrb	r3, [r2, r3]
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	58024400 	.word	0x58024400
 8005f20:	0800a220 	.word	0x0800a220

08005f24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b089      	sub	sp, #36	; 0x24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f2c:	4b9d      	ldr	r3, [pc, #628]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005f36:	4b9b      	ldr	r3, [pc, #620]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	0b1b      	lsrs	r3, r3, #12
 8005f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f42:	4b98      	ldr	r3, [pc, #608]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005f4e:	4b95      	ldr	r3, [pc, #596]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f52:	08db      	lsrs	r3, r3, #3
 8005f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	fb02 f303 	mul.w	r3, r2, r3
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 810a 	beq.w	8006186 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d05a      	beq.n	800602e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d302      	bcc.n	8005f82 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d078      	beq.n	8006072 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005f80:	e099      	b.n	80060b6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f82:	4b88      	ldr	r3, [pc, #544]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d02d      	beq.n	8005fea <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f8e:	4b85      	ldr	r3, [pc, #532]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	08db      	lsrs	r3, r3, #3
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	4a83      	ldr	r2, [pc, #524]	; (80061a8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb8:	4b7a      	ldr	r3, [pc, #488]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fcc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005fe8:	e087      	b.n	80060fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80061b0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffc:	4b69      	ldr	r3, [pc, #420]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006010:	eddf 5a66 	vldr	s11, [pc, #408]	; 80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006028:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800602c:	e065      	b.n	80060fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006038:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800603c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006040:	4b58      	ldr	r3, [pc, #352]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006050:	ed97 6a03 	vldr	s12, [r7, #12]
 8006054:	eddf 5a55 	vldr	s11, [pc, #340]	; 80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006070:	e043      	b.n	80060fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80061b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006084:	4b47      	ldr	r3, [pc, #284]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006094:	ed97 6a03 	vldr	s12, [r7, #12]
 8006098:	eddf 5a44 	vldr	s11, [pc, #272]	; 80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800609c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060b4:	e021      	b.n	80060fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80060c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c8:	4b36      	ldr	r3, [pc, #216]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80060dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80060e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060f8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80060fa:	4b2a      	ldr	r3, [pc, #168]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	0a5b      	lsrs	r3, r3, #9
 8006100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006110:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006114:	edd7 6a07 	vldr	s13, [r7, #28]
 8006118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800611c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006120:	ee17 2a90 	vmov	r2, s15
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006128:	4b1e      	ldr	r3, [pc, #120]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800613e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006142:	edd7 6a07 	vldr	s13, [r7, #28]
 8006146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800614a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614e:	ee17 2a90 	vmov	r2, s15
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006156:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	0e1b      	lsrs	r3, r3, #24
 800615c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006160:	ee07 3a90 	vmov	s15, r3
 8006164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800616c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006170:	edd7 6a07 	vldr	s13, [r7, #28]
 8006174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617c:	ee17 2a90 	vmov	r2, s15
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006184:	e008      	b.n	8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	609a      	str	r2, [r3, #8]
}
 8006198:	bf00      	nop
 800619a:	3724      	adds	r7, #36	; 0x24
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	58024400 	.word	0x58024400
 80061a8:	03d09000 	.word	0x03d09000
 80061ac:	46000000 	.word	0x46000000
 80061b0:	4c742400 	.word	0x4c742400
 80061b4:	4a742400 	.word	0x4a742400
 80061b8:	4bbebc20 	.word	0x4bbebc20

080061bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80061bc:	b480      	push	{r7}
 80061be:	b089      	sub	sp, #36	; 0x24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061c4:	4b9d      	ldr	r3, [pc, #628]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80061ce:	4b9b      	ldr	r3, [pc, #620]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	0d1b      	lsrs	r3, r3, #20
 80061d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80061da:	4b98      	ldr	r3, [pc, #608]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80061e6:	4b95      	ldr	r3, [pc, #596]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	08db      	lsrs	r3, r3, #3
 80061ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	fb02 f303 	mul.w	r3, r2, r3
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 810a 	beq.w	800641e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d05a      	beq.n	80062c6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006210:	2b01      	cmp	r3, #1
 8006212:	d302      	bcc.n	800621a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006214:	2b02      	cmp	r3, #2
 8006216:	d078      	beq.n	800630a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006218:	e099      	b.n	800634e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800621a:	4b88      	ldr	r3, [pc, #544]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d02d      	beq.n	8006282 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006226:	4b85      	ldr	r3, [pc, #532]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	08db      	lsrs	r3, r3, #3
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	4a83      	ldr	r2, [pc, #524]	; (8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006232:	fa22 f303 	lsr.w	r3, r2, r3
 8006236:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006250:	4b7a      	ldr	r3, [pc, #488]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006258:	ee07 3a90 	vmov	s15, r3
 800625c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006260:	ed97 6a03 	vldr	s12, [r7, #12]
 8006264:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006280:	e087      	b.n	8006392 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	ee07 3a90 	vmov	s15, r3
 8006288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006448 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006294:	4b69      	ldr	r3, [pc, #420]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629c:	ee07 3a90 	vmov	s15, r3
 80062a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80062ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062c4:	e065      	b.n	8006392 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	ee07 3a90 	vmov	s15, r3
 80062cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800644c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80062d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d8:	4b58      	ldr	r3, [pc, #352]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80062f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006308:	e043      	b.n	8006392 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	ee07 3a90 	vmov	s15, r3
 8006310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006314:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006450 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631c:	4b47      	ldr	r3, [pc, #284]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006330:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006348:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800634c:	e021      	b.n	8006392 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006358:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800644c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800635c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006360:	4b36      	ldr	r3, [pc, #216]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006368:	ee07 3a90 	vmov	s15, r3
 800636c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006370:	ed97 6a03 	vldr	s12, [r7, #12]
 8006374:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006390:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006392:	4b2a      	ldr	r3, [pc, #168]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	0a5b      	lsrs	r3, r3, #9
 8006398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639c:	ee07 3a90 	vmov	s15, r3
 80063a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063b8:	ee17 2a90 	vmov	r2, s15
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80063c0:	4b1e      	ldr	r3, [pc, #120]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	0c1b      	lsrs	r3, r3, #16
 80063c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063da:	edd7 6a07 	vldr	s13, [r7, #28]
 80063de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e6:	ee17 2a90 	vmov	r2, s15
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80063ee:	4b13      	ldr	r3, [pc, #76]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	0e1b      	lsrs	r3, r3, #24
 80063f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f8:	ee07 3a90 	vmov	s15, r3
 80063fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006408:	edd7 6a07 	vldr	s13, [r7, #28]
 800640c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006414:	ee17 2a90 	vmov	r2, s15
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800641c:	e008      	b.n	8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	3724      	adds	r7, #36	; 0x24
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	58024400 	.word	0x58024400
 8006440:	03d09000 	.word	0x03d09000
 8006444:	46000000 	.word	0x46000000
 8006448:	4c742400 	.word	0x4c742400
 800644c:	4a742400 	.word	0x4a742400
 8006450:	4bbebc20 	.word	0x4bbebc20

08006454 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006454:	b480      	push	{r7}
 8006456:	b089      	sub	sp, #36	; 0x24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800645c:	4b9d      	ldr	r3, [pc, #628]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006466:	4b9b      	ldr	r3, [pc, #620]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	091b      	lsrs	r3, r3, #4
 800646c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006470:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006472:	4b98      	ldr	r3, [pc, #608]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800647c:	4b95      	ldr	r3, [pc, #596]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800647e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006480:	08db      	lsrs	r3, r3, #3
 8006482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	fb02 f303 	mul.w	r3, r2, r3
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006494:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 810a 	beq.w	80066b4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d05a      	beq.n	800655c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d302      	bcc.n	80064b0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d078      	beq.n	80065a0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80064ae:	e099      	b.n	80065e4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064b0:	4b88      	ldr	r3, [pc, #544]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02d      	beq.n	8006518 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064bc:	4b85      	ldr	r3, [pc, #532]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	08db      	lsrs	r3, r3, #3
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	4a84      	ldr	r2, [pc, #528]	; (80066d8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
 80064cc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e6:	4b7b      	ldr	r3, [pc, #492]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80066dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80064fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006512:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006516:	e087      	b.n	8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006522:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8006526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652a:	4b6a      	ldr	r3, [pc, #424]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653a:	ed97 6a03 	vldr	s12, [r7, #12]
 800653e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80066dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800654e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006556:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800655a:	e065      	b.n	8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006566:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800656a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656e:	4b59      	ldr	r3, [pc, #356]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006582:	eddf 5a56 	vldr	s11, [pc, #344]	; 80066dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800659e:	e043      	b.n	8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80066e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b2:	4b48      	ldr	r3, [pc, #288]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80066dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80065ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065e2:	e021      	b.n	8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80066e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80065f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f6:	4b37      	ldr	r3, [pc, #220]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006606:	ed97 6a03 	vldr	s12, [r7, #12]
 800660a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80066dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800660e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800661a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006626:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006628:	4b2a      	ldr	r3, [pc, #168]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	0a5b      	lsrs	r3, r3, #9
 800662e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800663e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006642:	edd7 6a07 	vldr	s13, [r7, #28]
 8006646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800664a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800664e:	ee17 2a90 	vmov	r2, s15
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006656:	4b1f      	ldr	r3, [pc, #124]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	0c1b      	lsrs	r3, r3, #16
 800665c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800666c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006670:	edd7 6a07 	vldr	s13, [r7, #28]
 8006674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800667c:	ee17 2a90 	vmov	r2, s15
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006684:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	0e1b      	lsrs	r3, r3, #24
 800668a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800669a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800669e:	edd7 6a07 	vldr	s13, [r7, #28]
 80066a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066aa:	ee17 2a90 	vmov	r2, s15
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80066b2:	e008      	b.n	80066c6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	609a      	str	r2, [r3, #8]
}
 80066c6:	bf00      	nop
 80066c8:	3724      	adds	r7, #36	; 0x24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	58024400 	.word	0x58024400
 80066d8:	03d09000 	.word	0x03d09000
 80066dc:	46000000 	.word	0x46000000
 80066e0:	4c742400 	.word	0x4c742400
 80066e4:	4a742400 	.word	0x4a742400
 80066e8:	4bbebc20 	.word	0x4bbebc20

080066ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066fa:	4b53      	ldr	r3, [pc, #332]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	2b03      	cmp	r3, #3
 8006704:	d101      	bne.n	800670a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e099      	b.n	800683e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800670a:	4b4f      	ldr	r3, [pc, #316]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a4e      	ldr	r2, [pc, #312]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 8006710:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006716:	f7fa f9ef 	bl	8000af8 <HAL_GetTick>
 800671a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800671c:	e008      	b.n	8006730 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800671e:	f7fa f9eb 	bl	8000af8 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e086      	b.n	800683e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006730:	4b45      	ldr	r3, [pc, #276]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f0      	bne.n	800671e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800673c:	4b42      	ldr	r3, [pc, #264]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	031b      	lsls	r3, r3, #12
 800674a:	493f      	ldr	r1, [pc, #252]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 800674c:	4313      	orrs	r3, r2
 800674e:	628b      	str	r3, [r1, #40]	; 0x28
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	3b01      	subs	r3, #1
 8006756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	3b01      	subs	r3, #1
 8006760:	025b      	lsls	r3, r3, #9
 8006762:	b29b      	uxth	r3, r3
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	3b01      	subs	r3, #1
 800676c:	041b      	lsls	r3, r3, #16
 800676e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	3b01      	subs	r3, #1
 800677a:	061b      	lsls	r3, r3, #24
 800677c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006780:	4931      	ldr	r1, [pc, #196]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 8006782:	4313      	orrs	r3, r2
 8006784:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006786:	4b30      	ldr	r3, [pc, #192]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	492d      	ldr	r1, [pc, #180]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 8006794:	4313      	orrs	r3, r2
 8006796:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006798:	4b2b      	ldr	r3, [pc, #172]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	f023 0220 	bic.w	r2, r3, #32
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	4928      	ldr	r1, [pc, #160]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80067aa:	4b27      	ldr	r3, [pc, #156]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	4a26      	ldr	r2, [pc, #152]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067b0:	f023 0310 	bic.w	r3, r3, #16
 80067b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80067b6:	4b24      	ldr	r3, [pc, #144]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ba:	4b24      	ldr	r3, [pc, #144]	; (800684c <RCCEx_PLL2_Config+0x160>)
 80067bc:	4013      	ands	r3, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	69d2      	ldr	r2, [r2, #28]
 80067c2:	00d2      	lsls	r2, r2, #3
 80067c4:	4920      	ldr	r1, [pc, #128]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80067ca:	4b1f      	ldr	r3, [pc, #124]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	4a1e      	ldr	r2, [pc, #120]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067d0:	f043 0310 	orr.w	r3, r3, #16
 80067d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d106      	bne.n	80067ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80067dc:	4b1a      	ldr	r3, [pc, #104]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	4a19      	ldr	r2, [pc, #100]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067e8:	e00f      	b.n	800680a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d106      	bne.n	80067fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80067f0:	4b15      	ldr	r3, [pc, #84]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	4a14      	ldr	r2, [pc, #80]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 80067f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067fc:	e005      	b.n	800680a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80067fe:	4b12      	ldr	r3, [pc, #72]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	4a11      	ldr	r2, [pc, #68]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 8006804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006808:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800680a:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a0e      	ldr	r2, [pc, #56]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 8006810:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006816:	f7fa f96f 	bl	8000af8 <HAL_GetTick>
 800681a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800681c:	e008      	b.n	8006830 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800681e:	f7fa f96b 	bl	8000af8 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d901      	bls.n	8006830 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e006      	b.n	800683e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <RCCEx_PLL2_Config+0x15c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0f0      	beq.n	800681e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	58024400 	.word	0x58024400
 800684c:	ffff0007 	.word	0xffff0007

08006850 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800685e:	4b53      	ldr	r3, [pc, #332]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b03      	cmp	r3, #3
 8006868:	d101      	bne.n	800686e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e099      	b.n	80069a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800686e:	4b4f      	ldr	r3, [pc, #316]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a4e      	ldr	r2, [pc, #312]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800687a:	f7fa f93d 	bl	8000af8 <HAL_GetTick>
 800687e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006880:	e008      	b.n	8006894 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006882:	f7fa f939 	bl	8000af8 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e086      	b.n	80069a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006894:	4b45      	ldr	r3, [pc, #276]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f0      	bne.n	8006882 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80068a0:	4b42      	ldr	r3, [pc, #264]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	051b      	lsls	r3, r3, #20
 80068ae:	493f      	ldr	r1, [pc, #252]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	628b      	str	r3, [r1, #40]	; 0x28
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	025b      	lsls	r3, r3, #9
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	041b      	lsls	r3, r3, #16
 80068d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	3b01      	subs	r3, #1
 80068de:	061b      	lsls	r3, r3, #24
 80068e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068e4:	4931      	ldr	r1, [pc, #196]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80068ea:	4b30      	ldr	r3, [pc, #192]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	492d      	ldr	r1, [pc, #180]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80068fc:	4b2b      	ldr	r3, [pc, #172]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	4928      	ldr	r1, [pc, #160]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 800690a:	4313      	orrs	r3, r2
 800690c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800690e:	4b27      	ldr	r3, [pc, #156]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	4a26      	ldr	r2, [pc, #152]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006918:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800691a:	4b24      	ldr	r3, [pc, #144]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 800691c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800691e:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <RCCEx_PLL3_Config+0x160>)
 8006920:	4013      	ands	r3, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	69d2      	ldr	r2, [r2, #28]
 8006926:	00d2      	lsls	r2, r2, #3
 8006928:	4920      	ldr	r1, [pc, #128]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 800692a:	4313      	orrs	r3, r2
 800692c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800692e:	4b1f      	ldr	r3, [pc, #124]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	4a1e      	ldr	r2, [pc, #120]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d106      	bne.n	800694e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006940:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	4a19      	ldr	r2, [pc, #100]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006946:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800694a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800694c:	e00f      	b.n	800696e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d106      	bne.n	8006962 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006954:	4b15      	ldr	r3, [pc, #84]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	4a14      	ldr	r2, [pc, #80]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 800695a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800695e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006960:	e005      	b.n	800696e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006962:	4b12      	ldr	r3, [pc, #72]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	4a11      	ldr	r2, [pc, #68]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006968:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800696c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800696e:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a0e      	ldr	r2, [pc, #56]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800697a:	f7fa f8bd 	bl	8000af8 <HAL_GetTick>
 800697e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006980:	e008      	b.n	8006994 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006982:	f7fa f8b9 	bl	8000af8 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d901      	bls.n	8006994 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e006      	b.n	80069a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <RCCEx_PLL3_Config+0x15c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0f0      	beq.n	8006982 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	58024400 	.word	0x58024400
 80069b0:	ffff0007 	.word	0xffff0007

080069b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069b4:	b084      	sub	sp, #16
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	f107 001c 	add.w	r0, r7, #28
 80069c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d120      	bne.n	8006a0e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	4b25      	ldr	r3, [pc, #148]	; (8006a74 <USB_CoreInit+0xc0>)
 80069de:	4013      	ands	r3, r2
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d105      	bne.n	8006a02 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fa66 	bl	8007ed4 <USB_CoreReset>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
 8006a0c:	e01a      	b.n	8006a44 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fa5a 	bl	8007ed4 <USB_CoreReset>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d106      	bne.n	8006a38 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	639a      	str	r2, [r3, #56]	; 0x38
 8006a36:	e005      	b.n	8006a44 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d10b      	bne.n	8006a62 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f043 0206 	orr.w	r2, r3, #6
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f043 0220 	orr.w	r2, r3, #32
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a6e:	b004      	add	sp, #16
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	ffbdffbf 	.word	0xffbdffbf

08006a78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d165      	bne.n	8006b58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4a41      	ldr	r2, [pc, #260]	; (8006b94 <USB_SetTurnaroundTime+0x11c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d906      	bls.n	8006aa2 <USB_SetTurnaroundTime+0x2a>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4a40      	ldr	r2, [pc, #256]	; (8006b98 <USB_SetTurnaroundTime+0x120>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d802      	bhi.n	8006aa2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a9c:	230f      	movs	r3, #15
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e062      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4a3c      	ldr	r2, [pc, #240]	; (8006b98 <USB_SetTurnaroundTime+0x120>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d906      	bls.n	8006ab8 <USB_SetTurnaroundTime+0x40>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4a3b      	ldr	r2, [pc, #236]	; (8006b9c <USB_SetTurnaroundTime+0x124>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d802      	bhi.n	8006ab8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ab2:	230e      	movs	r3, #14
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	e057      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4a38      	ldr	r2, [pc, #224]	; (8006b9c <USB_SetTurnaroundTime+0x124>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d906      	bls.n	8006ace <USB_SetTurnaroundTime+0x56>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4a37      	ldr	r2, [pc, #220]	; (8006ba0 <USB_SetTurnaroundTime+0x128>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d802      	bhi.n	8006ace <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ac8:	230d      	movs	r3, #13
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	e04c      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4a33      	ldr	r2, [pc, #204]	; (8006ba0 <USB_SetTurnaroundTime+0x128>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d906      	bls.n	8006ae4 <USB_SetTurnaroundTime+0x6c>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4a32      	ldr	r2, [pc, #200]	; (8006ba4 <USB_SetTurnaroundTime+0x12c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d802      	bhi.n	8006ae4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006ade:	230c      	movs	r3, #12
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	e041      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4a2f      	ldr	r2, [pc, #188]	; (8006ba4 <USB_SetTurnaroundTime+0x12c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d906      	bls.n	8006afa <USB_SetTurnaroundTime+0x82>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4a2e      	ldr	r2, [pc, #184]	; (8006ba8 <USB_SetTurnaroundTime+0x130>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d802      	bhi.n	8006afa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006af4:	230b      	movs	r3, #11
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e036      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <USB_SetTurnaroundTime+0x130>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d906      	bls.n	8006b10 <USB_SetTurnaroundTime+0x98>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4a29      	ldr	r2, [pc, #164]	; (8006bac <USB_SetTurnaroundTime+0x134>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d802      	bhi.n	8006b10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b0a:	230a      	movs	r3, #10
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	e02b      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4a26      	ldr	r2, [pc, #152]	; (8006bac <USB_SetTurnaroundTime+0x134>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d906      	bls.n	8006b26 <USB_SetTurnaroundTime+0xae>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4a25      	ldr	r2, [pc, #148]	; (8006bb0 <USB_SetTurnaroundTime+0x138>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d802      	bhi.n	8006b26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b20:	2309      	movs	r3, #9
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e020      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4a21      	ldr	r2, [pc, #132]	; (8006bb0 <USB_SetTurnaroundTime+0x138>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d906      	bls.n	8006b3c <USB_SetTurnaroundTime+0xc4>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4a20      	ldr	r2, [pc, #128]	; (8006bb4 <USB_SetTurnaroundTime+0x13c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d802      	bhi.n	8006b3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b36:	2308      	movs	r3, #8
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	e015      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <USB_SetTurnaroundTime+0x13c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d906      	bls.n	8006b52 <USB_SetTurnaroundTime+0xda>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4a1c      	ldr	r2, [pc, #112]	; (8006bb8 <USB_SetTurnaroundTime+0x140>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d802      	bhi.n	8006b52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b4c:	2307      	movs	r3, #7
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e00a      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b52:	2306      	movs	r3, #6
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	e007      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d102      	bne.n	8006b64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b5e:	2309      	movs	r3, #9
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	e001      	b.n	8006b68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b64:	2309      	movs	r3, #9
 8006b66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68da      	ldr	r2, [r3, #12]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	029b      	lsls	r3, r3, #10
 8006b7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	371c      	adds	r7, #28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	00d8acbf 	.word	0x00d8acbf
 8006b98:	00e4e1bf 	.word	0x00e4e1bf
 8006b9c:	00f423ff 	.word	0x00f423ff
 8006ba0:	0106737f 	.word	0x0106737f
 8006ba4:	011a499f 	.word	0x011a499f
 8006ba8:	01312cff 	.word	0x01312cff
 8006bac:	014ca43f 	.word	0x014ca43f
 8006bb0:	016e35ff 	.word	0x016e35ff
 8006bb4:	01a6ab1f 	.word	0x01a6ab1f
 8006bb8:	01e847ff 	.word	0x01e847ff

08006bbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f043 0201 	orr.w	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f023 0201 	bic.w	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d106      	bne.n	8006c2c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	e00b      	b.n	8006c44 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60da      	str	r2, [r3, #12]
 8006c3e:	e001      	b.n	8006c44 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e003      	b.n	8006c4c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006c44:	2032      	movs	r0, #50	; 0x32
 8006c46:	f7f9 ff63 	bl	8000b10 <HAL_Delay>

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c54:	b084      	sub	sp, #16
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c6e:	2300      	movs	r3, #0
 8006c70:	613b      	str	r3, [r7, #16]
 8006c72:	e009      	b.n	8006c88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	3340      	adds	r3, #64	; 0x40
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	2200      	movs	r2, #0
 8006c80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	3301      	adds	r3, #1
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b0e      	cmp	r3, #14
 8006c8c:	d9f2      	bls.n	8006c74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11c      	bne.n	8006cce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ca2:	f043 0302 	orr.w	r3, r3, #2
 8006ca6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	e005      	b.n	8006cda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cec:	4619      	mov	r1, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	680b      	ldr	r3, [r1, #0]
 8006cf8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d10c      	bne.n	8006d1a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d06:	2100      	movs	r1, #0
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f949 	bl	8006fa0 <USB_SetDevSpeed>
 8006d0e:	e008      	b.n	8006d22 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d10:	2101      	movs	r1, #1
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f944 	bl	8006fa0 <USB_SetDevSpeed>
 8006d18:	e003      	b.n	8006d22 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d1a:	2103      	movs	r1, #3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f93f 	bl	8006fa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d22:	2110      	movs	r1, #16
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f8f3 	bl	8006f10 <USB_FlushTxFifo>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f911 	bl	8006f5c <USB_FlushRxFifo>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	461a      	mov	r2, r3
 8006d58:	2300      	movs	r3, #0
 8006d5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d62:	461a      	mov	r2, r3
 8006d64:	2300      	movs	r3, #0
 8006d66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	e043      	b.n	8006df6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d84:	d118      	bne.n	8006db8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	e013      	b.n	8006dca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dae:	461a      	mov	r2, r3
 8006db0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	e008      	b.n	8006dca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	2300      	movs	r3, #0
 8006dda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	461a      	mov	r2, r3
 8006dea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	3301      	adds	r3, #1
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d3b7      	bcc.n	8006d6e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e043      	b.n	8006e8c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e1a:	d118      	bne.n	8006e4e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	e013      	b.n	8006e60 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e44:	461a      	mov	r2, r3
 8006e46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	e008      	b.n	8006e60 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d3b7      	bcc.n	8006e04 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ea6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006eb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f043 0210 	orr.w	r2, r3, #16
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699a      	ldr	r2, [r3, #24]
 8006ecc:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <USB_DevInit+0x2b4>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f043 0208 	orr.w	r2, r3, #8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d105      	bne.n	8006ef8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699a      	ldr	r2, [r3, #24]
 8006ef0:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <USB_DevInit+0x2b8>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f04:	b004      	add	sp, #16
 8006f06:	4770      	bx	lr
 8006f08:	803c3800 	.word	0x803c3800
 8006f0c:	40000004 	.word	0x40000004

08006f10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	019b      	lsls	r3, r3, #6
 8006f22:	f043 0220 	orr.w	r2, r3, #32
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4a09      	ldr	r2, [pc, #36]	; (8006f58 <USB_FlushTxFifo+0x48>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d901      	bls.n	8006f3c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e006      	b.n	8006f4a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d0f0      	beq.n	8006f2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	00030d40 	.word	0x00030d40

08006f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2210      	movs	r2, #16
 8006f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3301      	adds	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4a09      	ldr	r2, [pc, #36]	; (8006f9c <USB_FlushRxFifo+0x40>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d901      	bls.n	8006f80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e006      	b.n	8006f8e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d0f0      	beq.n	8006f6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	00030d40 	.word	0x00030d40

08006fa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	68f9      	ldr	r1, [r7, #12]
 8006fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b087      	sub	sp, #28
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 0306 	and.w	r3, r3, #6
 8006fea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	75fb      	strb	r3, [r7, #23]
 8006ff6:	e00a      	b.n	800700e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d002      	beq.n	8007004 <USB_GetDevSpeed+0x32>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b06      	cmp	r3, #6
 8007002:	d102      	bne.n	800700a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007004:	2302      	movs	r3, #2
 8007006:	75fb      	strb	r3, [r7, #23]
 8007008:	e001      	b.n	800700e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800700a:	230f      	movs	r3, #15
 800700c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007010:	4618      	mov	r0, r3
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	785b      	ldrb	r3, [r3, #1]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d139      	bne.n	80070ac <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	f003 030f 	and.w	r3, r3, #15
 8007048:	2101      	movs	r1, #1
 800704a:	fa01 f303 	lsl.w	r3, r1, r3
 800704e:	b29b      	uxth	r3, r3
 8007050:	68f9      	ldr	r1, [r7, #12]
 8007052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007056:	4313      	orrs	r3, r2
 8007058:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d153      	bne.n	8007118 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	78db      	ldrb	r3, [r3, #3]
 800708a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800708c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	059b      	lsls	r3, r3, #22
 8007092:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007094:	431a      	orrs	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	0159      	lsls	r1, r3, #5
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	440b      	add	r3, r1
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	4619      	mov	r1, r3
 80070a4:	4b20      	ldr	r3, [pc, #128]	; (8007128 <USB_ActivateEndpoint+0x10c>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	600b      	str	r3, [r1, #0]
 80070aa:	e035      	b.n	8007118 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b2:	69da      	ldr	r2, [r3, #28]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	2101      	movs	r1, #1
 80070be:	fa01 f303 	lsl.w	r3, r1, r3
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	68f9      	ldr	r1, [r7, #12]
 80070c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ca:	4313      	orrs	r3, r2
 80070cc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d119      	bne.n	8007118 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	78db      	ldrb	r3, [r3, #3]
 80070fe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007100:	430b      	orrs	r3, r1
 8007102:	431a      	orrs	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	0159      	lsls	r1, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	440b      	add	r3, r1
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	4619      	mov	r1, r3
 8007112:	4b05      	ldr	r3, [pc, #20]	; (8007128 <USB_ActivateEndpoint+0x10c>)
 8007114:	4313      	orrs	r3, r2
 8007116:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	10008000 	.word	0x10008000

0800712c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d135      	bne.n	80071b4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	2101      	movs	r1, #1
 800715a:	fa01 f303 	lsl.w	r3, r1, r3
 800715e:	b29b      	uxth	r3, r3
 8007160:	43db      	mvns	r3, r3
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007168:	4013      	ands	r3, r2
 800716a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007172:	69da      	ldr	r2, [r3, #28]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	2101      	movs	r1, #1
 800717e:	fa01 f303 	lsl.w	r3, r1, r3
 8007182:	b29b      	uxth	r3, r3
 8007184:	43db      	mvns	r3, r3
 8007186:	68f9      	ldr	r1, [r7, #12]
 8007188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800718c:	4013      	ands	r3, r2
 800718e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	0159      	lsls	r1, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	440b      	add	r3, r1
 80071a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071aa:	4619      	mov	r1, r3
 80071ac:	4b1f      	ldr	r3, [pc, #124]	; (800722c <USB_DeactivateEndpoint+0x100>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	600b      	str	r3, [r1, #0]
 80071b2:	e034      	b.n	800721e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	2101      	movs	r1, #1
 80071c6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ca:	041b      	lsls	r3, r3, #16
 80071cc:	43db      	mvns	r3, r3
 80071ce:	68f9      	ldr	r1, [r7, #12]
 80071d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071d4:	4013      	ands	r3, r2
 80071d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	2101      	movs	r1, #1
 80071ea:	fa01 f303 	lsl.w	r3, r1, r3
 80071ee:	041b      	lsls	r3, r3, #16
 80071f0:	43db      	mvns	r3, r3
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f8:	4013      	ands	r3, r2
 80071fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	0159      	lsls	r1, r3, #5
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	440b      	add	r3, r1
 8007212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007216:	4619      	mov	r1, r3
 8007218:	4b05      	ldr	r3, [pc, #20]	; (8007230 <USB_DeactivateEndpoint+0x104>)
 800721a:	4013      	ands	r3, r2
 800721c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	ec337800 	.word	0xec337800
 8007230:	eff37800 	.word	0xeff37800

08007234 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08a      	sub	sp, #40	; 0x28
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	2b01      	cmp	r3, #1
 8007252:	f040 8163 	bne.w	800751c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d132      	bne.n	80072c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	0159      	lsls	r1, r3, #5
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	440b      	add	r3, r1
 8007274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007278:	4619      	mov	r1, r3
 800727a:	4ba5      	ldr	r3, [pc, #660]	; (8007510 <USB_EPStartXfer+0x2dc>)
 800727c:	4013      	ands	r3, r2
 800727e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	0151      	lsls	r1, r2, #5
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	440a      	add	r2, r1
 8007296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	691a      	ldr	r2, [r3, #16]
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	0159      	lsls	r1, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	440b      	add	r3, r1
 80072b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ba:	4619      	mov	r1, r3
 80072bc:	4b95      	ldr	r3, [pc, #596]	; (8007514 <USB_EPStartXfer+0x2e0>)
 80072be:	4013      	ands	r3, r2
 80072c0:	610b      	str	r3, [r1, #16]
 80072c2:	e074      	b.n	80073ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	0159      	lsls	r1, r3, #5
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	440b      	add	r3, r1
 80072da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072de:	4619      	mov	r1, r3
 80072e0:	4b8c      	ldr	r3, [pc, #560]	; (8007514 <USB_EPStartXfer+0x2e0>)
 80072e2:	4013      	ands	r3, r2
 80072e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	0159      	lsls	r1, r3, #5
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	440b      	add	r3, r1
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	4619      	mov	r1, r3
 8007302:	4b83      	ldr	r3, [pc, #524]	; (8007510 <USB_EPStartXfer+0x2dc>)
 8007304:	4013      	ands	r3, r2
 8007306:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6959      	ldr	r1, [r3, #20]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	440b      	add	r3, r1
 8007320:	1e59      	subs	r1, r3, #1
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	fbb1 f3f3 	udiv	r3, r1, r3
 800732a:	04d9      	lsls	r1, r3, #19
 800732c:	4b7a      	ldr	r3, [pc, #488]	; (8007518 <USB_EPStartXfer+0x2e4>)
 800732e:	400b      	ands	r3, r1
 8007330:	69b9      	ldr	r1, [r7, #24]
 8007332:	0148      	lsls	r0, r1, #5
 8007334:	69f9      	ldr	r1, [r7, #28]
 8007336:	4401      	add	r1, r0
 8007338:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800733c:	4313      	orrs	r3, r2
 800733e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734c:	691a      	ldr	r2, [r3, #16]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007356:	69b9      	ldr	r1, [r7, #24]
 8007358:	0148      	lsls	r0, r1, #5
 800735a:	69f9      	ldr	r1, [r7, #28]
 800735c:	4401      	add	r1, r0
 800735e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007362:	4313      	orrs	r3, r2
 8007364:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	78db      	ldrb	r3, [r3, #3]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d11f      	bne.n	80073ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	0151      	lsls	r1, r2, #5
 8007380:	69fa      	ldr	r2, [r7, #28]
 8007382:	440a      	add	r2, r1
 8007384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007388:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800738c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d14b      	bne.n	800744c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d009      	beq.n	80073d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	461a      	mov	r2, r3
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	78db      	ldrb	r3, [r3, #3]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d128      	bne.n	800742a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d110      	bne.n	800740a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	0151      	lsls	r1, r2, #5
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	440a      	add	r2, r1
 80073fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007402:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	e00f      	b.n	800742a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007428:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	440a      	add	r2, r1
 8007440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007444:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	e133      	b.n	80076b4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	0151      	lsls	r1, r2, #5
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	440a      	add	r2, r1
 8007462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007466:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800746a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	78db      	ldrb	r3, [r3, #3]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d015      	beq.n	80074a0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 811b 	beq.w	80076b4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	2101      	movs	r1, #1
 8007490:	fa01 f303 	lsl.w	r3, r1, r3
 8007494:	69f9      	ldr	r1, [r7, #28]
 8007496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800749a:	4313      	orrs	r3, r2
 800749c:	634b      	str	r3, [r1, #52]	; 0x34
 800749e:	e109      	b.n	80076b4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d110      	bne.n	80074d2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	e00f      	b.n	80074f2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	0151      	lsls	r1, r2, #5
 80074e4:	69fa      	ldr	r2, [r7, #28]
 80074e6:	440a      	add	r2, r1
 80074e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	68d9      	ldr	r1, [r3, #12]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	781a      	ldrb	r2, [r3, #0]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	b298      	uxth	r0, r3
 8007500:	79fb      	ldrb	r3, [r7, #7]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	4603      	mov	r3, r0
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 fa38 	bl	800797c <USB_WritePacket>
 800750c:	e0d2      	b.n	80076b4 <USB_EPStartXfer+0x480>
 800750e:	bf00      	nop
 8007510:	e007ffff 	.word	0xe007ffff
 8007514:	fff80000 	.word	0xfff80000
 8007518:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	0159      	lsls	r1, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	440b      	add	r3, r1
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	4619      	mov	r1, r3
 8007538:	4b61      	ldr	r3, [pc, #388]	; (80076c0 <USB_EPStartXfer+0x48c>)
 800753a:	4013      	ands	r3, r2
 800753c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	691a      	ldr	r2, [r3, #16]
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	0159      	lsls	r1, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	440b      	add	r3, r1
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	4619      	mov	r1, r3
 800755a:	4b5a      	ldr	r3, [pc, #360]	; (80076c4 <USB_EPStartXfer+0x490>)
 800755c:	4013      	ands	r3, r2
 800755e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d123      	bne.n	80075b0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007574:	691a      	ldr	r2, [r3, #16]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800757e:	69b9      	ldr	r1, [r7, #24]
 8007580:	0148      	lsls	r0, r1, #5
 8007582:	69f9      	ldr	r1, [r7, #28]
 8007584:	4401      	add	r1, r0
 8007586:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800758a:	4313      	orrs	r3, r2
 800758c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	0151      	lsls	r1, r2, #5
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	440a      	add	r2, r1
 80075a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075ac:	6113      	str	r3, [r2, #16]
 80075ae:	e033      	b.n	8007618 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	695a      	ldr	r2, [r3, #20]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	4413      	add	r3, r2
 80075ba:	1e5a      	subs	r2, r3, #1
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	8afb      	ldrh	r3, [r7, #22]
 80075d6:	04d9      	lsls	r1, r3, #19
 80075d8:	4b3b      	ldr	r3, [pc, #236]	; (80076c8 <USB_EPStartXfer+0x494>)
 80075da:	400b      	ands	r3, r1
 80075dc:	69b9      	ldr	r1, [r7, #24]
 80075de:	0148      	lsls	r0, r1, #5
 80075e0:	69f9      	ldr	r1, [r7, #28]
 80075e2:	4401      	add	r1, r0
 80075e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075e8:	4313      	orrs	r3, r2
 80075ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	691a      	ldr	r2, [r3, #16]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	8af9      	ldrh	r1, [r7, #22]
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007608:	69b9      	ldr	r1, [r7, #24]
 800760a:	0148      	lsls	r0, r1, #5
 800760c:	69f9      	ldr	r1, [r7, #28]
 800760e:	4401      	add	r1, r0
 8007610:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007614:	4313      	orrs	r3, r2
 8007616:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007618:	79fb      	ldrb	r3, [r7, #7]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d10d      	bne.n	800763a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d009      	beq.n	800763a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	68d9      	ldr	r1, [r3, #12]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	460a      	mov	r2, r1
 8007638:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	78db      	ldrb	r3, [r3, #3]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d128      	bne.n	8007694 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764e:	2b00      	cmp	r3, #0
 8007650:	d110      	bne.n	8007674 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	0151      	lsls	r1, r2, #5
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	440a      	add	r2, r1
 8007668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	e00f      	b.n	8007694 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	0151      	lsls	r1, r2, #5
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	440a      	add	r2, r1
 800768a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007692:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	0151      	lsls	r1, r2, #5
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	440a      	add	r2, r1
 80076aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	fff80000 	.word	0xfff80000
 80076c4:	e007ffff 	.word	0xe007ffff
 80076c8:	1ff80000 	.word	0x1ff80000

080076cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	f040 80cd 	bne.w	8007888 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d132      	bne.n	800775c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	0159      	lsls	r1, r3, #5
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	440b      	add	r3, r1
 800770c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007710:	4619      	mov	r1, r3
 8007712:	4b98      	ldr	r3, [pc, #608]	; (8007974 <USB_EP0StartXfer+0x2a8>)
 8007714:	4013      	ands	r3, r2
 8007716:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	0151      	lsls	r1, r2, #5
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	440a      	add	r2, r1
 800772e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007732:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007736:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	0159      	lsls	r1, r3, #5
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	440b      	add	r3, r1
 800774e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007752:	4619      	mov	r1, r3
 8007754:	4b88      	ldr	r3, [pc, #544]	; (8007978 <USB_EP0StartXfer+0x2ac>)
 8007756:	4013      	ands	r3, r2
 8007758:	610b      	str	r3, [r1, #16]
 800775a:	e04e      	b.n	80077fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007768:	691a      	ldr	r2, [r3, #16]
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	0159      	lsls	r1, r3, #5
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	440b      	add	r3, r1
 8007772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007776:	4619      	mov	r1, r3
 8007778:	4b7f      	ldr	r3, [pc, #508]	; (8007978 <USB_EP0StartXfer+0x2ac>)
 800777a:	4013      	ands	r3, r2
 800777c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	0159      	lsls	r1, r3, #5
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	440b      	add	r3, r1
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	4619      	mov	r1, r3
 800779a:	4b76      	ldr	r3, [pc, #472]	; (8007974 <USB_EP0StartXfer+0x2a8>)
 800779c:	4013      	ands	r3, r2
 800779e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d903      	bls.n	80077b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	691a      	ldr	r2, [r3, #16]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077ea:	6939      	ldr	r1, [r7, #16]
 80077ec:	0148      	lsls	r0, r1, #5
 80077ee:	6979      	ldr	r1, [r7, #20]
 80077f0:	4401      	add	r1, r0
 80077f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80077f6:	4313      	orrs	r3, r2
 80077f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d11e      	bne.n	800783e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	461a      	mov	r2, r3
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	e092      	b.n	8007964 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007858:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800785c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d07e      	beq.n	8007964 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	2101      	movs	r1, #1
 8007878:	fa01 f303 	lsl.w	r3, r1, r3
 800787c:	6979      	ldr	r1, [r7, #20]
 800787e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007882:	4313      	orrs	r3, r2
 8007884:	634b      	str	r3, [r1, #52]	; 0x34
 8007886:	e06d      	b.n	8007964 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007894:	691a      	ldr	r2, [r3, #16]
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	0159      	lsls	r1, r3, #5
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	440b      	add	r3, r1
 800789e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a2:	4619      	mov	r1, r3
 80078a4:	4b34      	ldr	r3, [pc, #208]	; (8007978 <USB_EP0StartXfer+0x2ac>)
 80078a6:	4013      	ands	r3, r2
 80078a8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	0159      	lsls	r1, r3, #5
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	440b      	add	r3, r1
 80078c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c4:	4619      	mov	r1, r3
 80078c6:	4b2b      	ldr	r3, [pc, #172]	; (8007974 <USB_EP0StartXfer+0x2a8>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	0151      	lsls	r1, r2, #5
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	440a      	add	r2, r1
 80078f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	691a      	ldr	r2, [r3, #16]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007912:	6939      	ldr	r1, [r7, #16]
 8007914:	0148      	lsls	r0, r1, #5
 8007916:	6979      	ldr	r1, [r7, #20]
 8007918:	4401      	add	r1, r0
 800791a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800791e:	4313      	orrs	r3, r2
 8007920:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d10d      	bne.n	8007944 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	68d9      	ldr	r1, [r3, #12]
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007940:	460a      	mov	r2, r1
 8007942:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	0151      	lsls	r1, r2, #5
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	440a      	add	r2, r1
 800795a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800795e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007962:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	e007ffff 	.word	0xe007ffff
 8007978:	fff80000 	.word	0xfff80000

0800797c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800797c:	b480      	push	{r7}
 800797e:	b089      	sub	sp, #36	; 0x24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4611      	mov	r1, r2
 8007988:	461a      	mov	r2, r3
 800798a:	460b      	mov	r3, r1
 800798c:	71fb      	strb	r3, [r7, #7]
 800798e:	4613      	mov	r3, r2
 8007990:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800799a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d11a      	bne.n	80079d8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079a2:	88bb      	ldrh	r3, [r7, #4]
 80079a4:	3303      	adds	r3, #3
 80079a6:	089b      	lsrs	r3, r3, #2
 80079a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079aa:	2300      	movs	r3, #0
 80079ac:	61bb      	str	r3, [r7, #24]
 80079ae:	e00f      	b.n	80079d0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	031a      	lsls	r2, r3, #12
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079bc:	461a      	mov	r2, r3
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	3304      	adds	r3, #4
 80079c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	3301      	adds	r3, #1
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d3eb      	bcc.n	80079b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3724      	adds	r7, #36	; 0x24
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b089      	sub	sp, #36	; 0x24
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	4613      	mov	r3, r2
 80079f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80079fc:	88fb      	ldrh	r3, [r7, #6]
 80079fe:	3303      	adds	r3, #3
 8007a00:	089b      	lsrs	r3, r3, #2
 8007a02:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007a04:	2300      	movs	r3, #0
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	e00b      	b.n	8007a22 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	3304      	adds	r3, #4
 8007a1a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d3ef      	bcc.n	8007a0a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007a2a:	69fb      	ldr	r3, [r7, #28]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3724      	adds	r7, #36	; 0x24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d12c      	bne.n	8007aae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	db12      	blt.n	8007a8c <USB_EPSetStall+0x54>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00f      	beq.n	8007a8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	0151      	lsls	r1, r2, #5
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	440a      	add	r2, r1
 8007aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	e02b      	b.n	8007b06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	db12      	blt.n	8007ae6 <USB_EPSetStall+0xae>
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00f      	beq.n	8007ae6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ae4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d128      	bne.n	8007b82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	78db      	ldrb	r3, [r3, #3]
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d003      	beq.n	8007b60 <USB_EPClearStall+0x4c>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	78db      	ldrb	r3, [r3, #3]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d138      	bne.n	8007bd2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	0151      	lsls	r1, r2, #5
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	440a      	add	r2, r1
 8007b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	e027      	b.n	8007bd2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ba0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	78db      	ldrb	r3, [r3, #3]
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d003      	beq.n	8007bb2 <USB_EPClearStall+0x9e>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	78db      	ldrb	r3, [r3, #3]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d10f      	bne.n	8007bd2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	0151      	lsls	r1, r2, #5
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bd0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bfe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c14:	68f9      	ldr	r1, [r7, #12]
 8007c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c46:	f023 0302 	bic.w	r3, r3, #2
 8007c4a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007c4c:	2003      	movs	r0, #3
 8007c4e:	f7f8 ff5f 	bl	8000b10 <HAL_Delay>

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c76:	f043 0302 	orr.w	r3, r3, #2
 8007c7a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007c7c:	2003      	movs	r0, #3
 8007c7e:	f7f8 ff47 	bl	8000b10 <HAL_Delay>

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	0c1b      	lsrs	r3, r3, #16
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4013      	ands	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	b29b      	uxth	r3, r3
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	4013      	ands	r3, r2
 8007d46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d48:	68bb      	ldr	r3, [r7, #8]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	fa22 f303 	lsr.w	r3, r2, r3
 8007d86:	01db      	lsls	r3, r3, #7
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4013      	ands	r3, r2
 8007da2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007da4:	68bb      	ldr	r3, [r7, #8]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
	...

08007dd0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dea:	4619      	mov	r1, r3
 8007dec:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <USB_ActivateSetup+0x44>)
 8007dee:	4013      	ands	r3, r2
 8007df0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	fffff800 	.word	0xfffff800

08007e18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	460b      	mov	r3, r1
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	333c      	adds	r3, #60	; 0x3c
 8007e2e:	3304      	adds	r3, #4
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	4a26      	ldr	r2, [pc, #152]	; (8007ed0 <USB_EP0_OutStart+0xb8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d90a      	bls.n	8007e52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e4c:	d101      	bne.n	8007e52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e037      	b.n	8007ec2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e58:	461a      	mov	r2, r3
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e80:	f043 0318 	orr.w	r3, r3, #24
 8007e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e9a:	7afb      	ldrb	r3, [r7, #11]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d10f      	bne.n	8007ec0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ebe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	4f54300a 	.word	0x4f54300a

08007ed4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4a13      	ldr	r2, [pc, #76]	; (8007f38 <USB_CoreReset+0x64>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d901      	bls.n	8007ef2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e01b      	b.n	8007f2a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	daf2      	bge.n	8007ee0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f043 0201 	orr.w	r2, r3, #1
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4a09      	ldr	r2, [pc, #36]	; (8007f38 <USB_CoreReset+0x64>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d901      	bls.n	8007f1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e006      	b.n	8007f2a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d0f0      	beq.n	8007f0a <USB_CoreReset+0x36>

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	00030d40 	.word	0x00030d40

08007f3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	7c1b      	ldrb	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d115      	bne.n	8007f80 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f58:	2202      	movs	r2, #2
 8007f5a:	2181      	movs	r1, #129	; 0x81
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fee0 	bl	8009d22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	2101      	movs	r1, #1
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 fed6 	bl	8009d22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007f7e:	e012      	b.n	8007fa6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f80:	2340      	movs	r3, #64	; 0x40
 8007f82:	2202      	movs	r2, #2
 8007f84:	2181      	movs	r1, #129	; 0x81
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 fecb 	bl	8009d22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f92:	2340      	movs	r3, #64	; 0x40
 8007f94:	2202      	movs	r2, #2
 8007f96:	2101      	movs	r1, #1
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 fec2 	bl	8009d22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fa6:	2308      	movs	r3, #8
 8007fa8:	2203      	movs	r2, #3
 8007faa:	2182      	movs	r1, #130	; 0x82
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 feb8 	bl	8009d22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007fbc:	f002 f82e 	bl	800a01c <malloc>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	73fb      	strb	r3, [r7, #15]
 8007fd8:	e026      	b.n	8008028 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7c1b      	ldrb	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800800a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800800e:	2101      	movs	r1, #1
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 ff77 	bl	8009f04 <USBD_LL_PrepareReceive>
 8008016:	e007      	b.n	8008028 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800801e:	2340      	movs	r3, #64	; 0x40
 8008020:	2101      	movs	r1, #1
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 ff6e 	bl	8009f04 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008028:	7bfb      	ldrb	r3, [r7, #15]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008042:	2181      	movs	r1, #129	; 0x81
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 fe92 	bl	8009d6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008050:	2101      	movs	r1, #1
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fe8b 	bl	8009d6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008060:	2182      	movs	r1, #130	; 0x82
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fe83 	bl	8009d6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00e      	beq.n	8008096 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008088:	4618      	mov	r0, r3
 800808a:	f001 ffcf 	bl	800a02c <free>
    pdev->pClassData = NULL;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d039      	beq.n	800813e <USBD_CDC_Setup+0x9e>
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d17c      	bne.n	80081c8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	88db      	ldrh	r3, [r3, #6]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d029      	beq.n	800812a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b25b      	sxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	da11      	bge.n	8008104 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80080ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	88d2      	ldrh	r2, [r2, #6]
 80080f2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080f4:	6939      	ldr	r1, [r7, #16]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	88db      	ldrh	r3, [r3, #6]
 80080fa:	461a      	mov	r2, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 fa0f 	bl	8009520 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008102:	e068      	b.n	80081d6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	785a      	ldrb	r2, [r3, #1]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	88db      	ldrh	r3, [r3, #6]
 8008112:	b2da      	uxtb	r2, r3
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800811a:	6939      	ldr	r1, [r7, #16]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	88db      	ldrh	r3, [r3, #6]
 8008120:	461a      	mov	r2, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 fa2a 	bl	800957c <USBD_CtlPrepareRx>
      break;
 8008128:	e055      	b.n	80081d6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	7850      	ldrb	r0, [r2, #1]
 8008136:	2200      	movs	r2, #0
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	4798      	blx	r3
      break;
 800813c:	e04b      	b.n	80081d6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	785b      	ldrb	r3, [r3, #1]
 8008142:	2b0a      	cmp	r3, #10
 8008144:	d017      	beq.n	8008176 <USBD_CDC_Setup+0xd6>
 8008146:	2b0b      	cmp	r3, #11
 8008148:	d029      	beq.n	800819e <USBD_CDC_Setup+0xfe>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d133      	bne.n	80081b6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008154:	2b03      	cmp	r3, #3
 8008156:	d107      	bne.n	8008168 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008158:	f107 030c 	add.w	r3, r7, #12
 800815c:	2202      	movs	r2, #2
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 f9dd 	bl	8009520 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008166:	e02e      	b.n	80081c6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 f96d 	bl	800944a <USBD_CtlError>
            ret = USBD_FAIL;
 8008170:	2302      	movs	r3, #2
 8008172:	75fb      	strb	r3, [r7, #23]
          break;
 8008174:	e027      	b.n	80081c6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817c:	2b03      	cmp	r3, #3
 800817e:	d107      	bne.n	8008190 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008180:	f107 030f 	add.w	r3, r7, #15
 8008184:	2201      	movs	r2, #1
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 f9c9 	bl	8009520 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800818e:	e01a      	b.n	80081c6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f001 f959 	bl	800944a <USBD_CtlError>
            ret = USBD_FAIL;
 8008198:	2302      	movs	r3, #2
 800819a:	75fb      	strb	r3, [r7, #23]
          break;
 800819c:	e013      	b.n	80081c6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d00d      	beq.n	80081c4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 f94d 	bl	800944a <USBD_CtlError>
            ret = USBD_FAIL;
 80081b0:	2302      	movs	r3, #2
 80081b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081b4:	e006      	b.n	80081c4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 f946 	bl	800944a <USBD_CtlError>
          ret = USBD_FAIL;
 80081be:	2302      	movs	r3, #2
 80081c0:	75fb      	strb	r3, [r7, #23]
          break;
 80081c2:	e000      	b.n	80081c6 <USBD_CDC_Setup+0x126>
          break;
 80081c4:	bf00      	nop
      }
      break;
 80081c6:	e006      	b.n	80081d6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f93d 	bl	800944a <USBD_CtlError>
      ret = USBD_FAIL;
 80081d0:	2302      	movs	r3, #2
 80081d2:	75fb      	strb	r3, [r7, #23]
      break;
 80081d4:	bf00      	nop
  }

  return ret;
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081fa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008202:	2b00      	cmp	r3, #0
 8008204:	d03a      	beq.n	800827c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008206:	78fa      	ldrb	r2, [r7, #3]
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	331c      	adds	r3, #28
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d029      	beq.n	8008270 <USBD_CDC_DataIn+0x90>
 800821c:	78fa      	ldrb	r2, [r7, #3]
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	331c      	adds	r3, #28
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	78f9      	ldrb	r1, [r7, #3]
 8008230:	68b8      	ldr	r0, [r7, #8]
 8008232:	460b      	mov	r3, r1
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	1a5b      	subs	r3, r3, r1
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4403      	add	r3, r0
 800823c:	3344      	adds	r3, #68	; 0x44
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	fbb2 f1f3 	udiv	r1, r2, r3
 8008244:	fb03 f301 	mul.w	r3, r3, r1
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d110      	bne.n	8008270 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	440b      	add	r3, r1
 800825c:	331c      	adds	r3, #28
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008262:	78f9      	ldrb	r1, [r7, #3]
 8008264:	2300      	movs	r3, #0
 8008266:	2200      	movs	r2, #0
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f001 fe28 	bl	8009ebe <USBD_LL_Transmit>
 800826e:	e003      	b.n	8008278 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	e000      	b.n	800827e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800827c:	2302      	movs	r3, #2
  }
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008298:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f001 fe53 	bl	8009f4a <USBD_LL_GetRxDataSize>
 80082a4:	4602      	mov	r2, r0
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00d      	beq.n	80082d2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082ca:	4611      	mov	r1, r2
 80082cc:	4798      	blx	r3

    return USBD_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e000      	b.n	80082d4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80082d2:	2302      	movs	r3, #2
  }
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d015      	beq.n	8008322 <USBD_CDC_EP0_RxReady+0x46>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082fc:	2bff      	cmp	r3, #255	; 0xff
 80082fe:	d010      	beq.n	8008322 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800830e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008316:	b292      	uxth	r2, r2
 8008318:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	22ff      	movs	r2, #255	; 0xff
 800831e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2243      	movs	r2, #67	; 0x43
 8008338:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800833a:	4b03      	ldr	r3, [pc, #12]	; (8008348 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800833c:	4618      	mov	r0, r3
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	24000098 	.word	0x24000098

0800834c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2243      	movs	r2, #67	; 0x43
 8008358:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800835a:	4b03      	ldr	r3, [pc, #12]	; (8008368 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	24000054 	.word	0x24000054

0800836c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2243      	movs	r2, #67	; 0x43
 8008378:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800837a:	4b03      	ldr	r3, [pc, #12]	; (8008388 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	240000dc 	.word	0x240000dc

0800838c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	220a      	movs	r2, #10
 8008398:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800839a:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	24000010 	.word	0x24000010

080083ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80083b6:	2302      	movs	r3, #2
 80083b8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d005      	beq.n	80083cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80083da:	b480      	push	{r7}
 80083dc:	b087      	sub	sp, #28
 80083de:	af00      	add	r7, sp, #0
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	60b9      	str	r1, [r7, #8]
 80083e4:	4613      	mov	r3, r2
 80083e6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ee:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083f8:	88fa      	ldrh	r2, [r7, #6]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844c:	2b00      	cmp	r3, #0
 800844e:	d017      	beq.n	8008480 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	7c1b      	ldrb	r3, [r3, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d109      	bne.n	800846c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800845e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008462:	2101      	movs	r1, #1
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 fd4d 	bl	8009f04 <USBD_LL_PrepareReceive>
 800846a:	e007      	b.n	800847c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008472:	2340      	movs	r3, #64	; 0x40
 8008474:	2101      	movs	r1, #1
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 fd44 	bl	8009f04 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	e000      	b.n	8008482 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008480:	2302      	movs	r3, #2
  }
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	4613      	mov	r3, r2
 8008496:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800849e:	2302      	movs	r3, #2
 80084a0:	e01a      	b.n	80084d8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	79fa      	ldrb	r2, [r7, #7]
 80084ce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f001 fbbb 	bl	8009c4c <USBD_LL_Init>

  return USBD_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d006      	beq.n	8008502 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73fb      	strb	r3, [r7, #15]
 8008500:	e001      	b.n	8008506 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008502:	2302      	movs	r3, #2
 8008504:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 fbe5 	bl	8009cec <USBD_LL_Start>

  return USBD_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800854e:	2302      	movs	r3, #2
 8008550:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00c      	beq.n	8008576 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	78fa      	ldrb	r2, [r7, #3]
 8008566:	4611      	mov	r1, r2
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4798      	blx	r3
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	78fa      	ldrb	r2, [r7, #3]
 8008596:	4611      	mov	r1, r2
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	4798      	blx	r3

  return USBD_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 ff09 	bl	80093d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80085cc:	461a      	mov	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085da:	f003 031f 	and.w	r3, r3, #31
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d00c      	beq.n	80085fc <USBD_LL_SetupStage+0x56>
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d302      	bcc.n	80085ec <USBD_LL_SetupStage+0x46>
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d010      	beq.n	800860c <USBD_LL_SetupStage+0x66>
 80085ea:	e017      	b.n	800861c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fa09 	bl	8008a0c <USBD_StdDevReq>
      break;
 80085fa:	e01a      	b.n	8008632 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fa6b 	bl	8008ae0 <USBD_StdItfReq>
      break;
 800860a:	e012      	b.n	8008632 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 faa9 	bl	8008b6c <USBD_StdEPReq>
      break;
 800861a:	e00a      	b.n	8008632 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008622:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008626:	b2db      	uxtb	r3, r3
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fbbe 	bl	8009dac <USBD_LL_StallEP>
      break;
 8008630:	bf00      	nop
  }

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	460b      	mov	r3, r1
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800864a:	7afb      	ldrb	r3, [r7, #11]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d14b      	bne.n	80086e8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008656:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800865e:	2b03      	cmp	r3, #3
 8008660:	d134      	bne.n	80086cc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	429a      	cmp	r2, r3
 800866c:	d919      	bls.n	80086a2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	1ad2      	subs	r2, r2, r3
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	68da      	ldr	r2, [r3, #12]
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008684:	429a      	cmp	r2, r3
 8008686:	d203      	bcs.n	8008690 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800868c:	b29b      	uxth	r3, r3
 800868e:	e002      	b.n	8008696 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008694:	b29b      	uxth	r3, r3
 8008696:	461a      	mov	r2, r3
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 ff8c 	bl	80095b8 <USBD_CtlContinueRx>
 80086a0:	e038      	b.n	8008714 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d105      	bne.n	80086c4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 ff89 	bl	80095dc <USBD_CtlSendStatus>
 80086ca:	e023      	b.n	8008714 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	d11e      	bne.n	8008714 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80086de:	2100      	movs	r1, #0
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f001 fb63 	bl	8009dac <USBD_LL_StallEP>
 80086e6:	e015      	b.n	8008714 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00d      	beq.n	8008710 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d108      	bne.n	8008710 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	7afa      	ldrb	r2, [r7, #11]
 8008708:	4611      	mov	r1, r2
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	4798      	blx	r3
 800870e:	e001      	b.n	8008714 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008710:	2302      	movs	r3, #2
 8008712:	e000      	b.n	8008716 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b086      	sub	sp, #24
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	460b      	mov	r3, r1
 8008728:	607a      	str	r2, [r7, #4]
 800872a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d17f      	bne.n	8008832 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3314      	adds	r3, #20
 8008736:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800873e:	2b02      	cmp	r3, #2
 8008740:	d15c      	bne.n	80087fc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	429a      	cmp	r2, r3
 800874c:	d915      	bls.n	800877a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	1ad2      	subs	r2, r2, r3
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	b29b      	uxth	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fef6 	bl	8009558 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800876c:	2300      	movs	r3, #0
 800876e:	2200      	movs	r2, #0
 8008770:	2100      	movs	r1, #0
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f001 fbc6 	bl	8009f04 <USBD_LL_PrepareReceive>
 8008778:	e04e      	b.n	8008818 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	6912      	ldr	r2, [r2, #16]
 8008782:	fbb3 f1f2 	udiv	r1, r3, r2
 8008786:	fb02 f201 	mul.w	r2, r2, r1
 800878a:	1a9b      	subs	r3, r3, r2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d11c      	bne.n	80087ca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008798:	429a      	cmp	r2, r3
 800879a:	d316      	bcc.n	80087ca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d20f      	bcs.n	80087ca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087aa:	2200      	movs	r2, #0
 80087ac:	2100      	movs	r1, #0
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 fed2 	bl	8009558 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087bc:	2300      	movs	r3, #0
 80087be:	2200      	movs	r2, #0
 80087c0:	2100      	movs	r1, #0
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f001 fb9e 	bl	8009f04 <USBD_LL_PrepareReceive>
 80087c8:	e026      	b.n	8008818 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d105      	bne.n	80087ec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80087ec:	2180      	movs	r1, #128	; 0x80
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f001 fadc 	bl	8009dac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 ff04 	bl	8009602 <USBD_CtlReceiveStatus>
 80087fa:	e00d      	b.n	8008818 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008802:	2b04      	cmp	r3, #4
 8008804:	d004      	beq.n	8008810 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800880c:	2b00      	cmp	r3, #0
 800880e:	d103      	bne.n	8008818 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008810:	2180      	movs	r1, #128	; 0x80
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f001 faca 	bl	8009dac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800881e:	2b01      	cmp	r3, #1
 8008820:	d11d      	bne.n	800885e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7ff fe82 	bl	800852c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008830:	e015      	b.n	800885e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00d      	beq.n	800885a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008844:	2b03      	cmp	r3, #3
 8008846:	d108      	bne.n	800885a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	7afa      	ldrb	r2, [r7, #11]
 8008852:	4611      	mov	r1, r2
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	4798      	blx	r3
 8008858:	e001      	b.n	800885e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800885a:	2302      	movs	r3, #2
 800885c:	e000      	b.n	8008860 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008870:	2340      	movs	r3, #64	; 0x40
 8008872:	2200      	movs	r2, #0
 8008874:	2100      	movs	r1, #0
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f001 fa53 	bl	8009d22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2240      	movs	r2, #64	; 0x40
 8008888:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800888c:	2340      	movs	r3, #64	; 0x40
 800888e:	2200      	movs	r2, #0
 8008890:	2180      	movs	r1, #128	; 0x80
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 fa45 	bl	8009d22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2240      	movs	r2, #64	; 0x40
 80088a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d009      	beq.n	80088e0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6852      	ldr	r2, [r2, #4]
 80088d8:	b2d2      	uxtb	r2, r2
 80088da:	4611      	mov	r1, r2
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
  }

  return USBD_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	460b      	mov	r3, r1
 80088f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2204      	movs	r2, #4
 8008922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008942:	2b04      	cmp	r3, #4
 8008944:	d105      	bne.n	8008952 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896e:	2b03      	cmp	r3, #3
 8008970:	d10b      	bne.n	800898a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	460b      	mov	r3, r1
 80089b8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b082      	sub	sp, #8
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	6852      	ldr	r2, [r2, #4]
 80089fa:	b2d2      	uxtb	r2, r2
 80089fc:	4611      	mov	r1, r2
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3

  return USBD_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a22:	2b20      	cmp	r3, #32
 8008a24:	d004      	beq.n	8008a30 <USBD_StdDevReq+0x24>
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	d002      	beq.n	8008a30 <USBD_StdDevReq+0x24>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d008      	beq.n	8008a40 <USBD_StdDevReq+0x34>
 8008a2e:	e04c      	b.n	8008aca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
      break;
 8008a3e:	e049      	b.n	8008ad4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	785b      	ldrb	r3, [r3, #1]
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	d83a      	bhi.n	8008abe <USBD_StdDevReq+0xb2>
 8008a48:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <USBD_StdDevReq+0x44>)
 8008a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008aa1 	.word	0x08008aa1
 8008a54:	08008ab5 	.word	0x08008ab5
 8008a58:	08008abf 	.word	0x08008abf
 8008a5c:	08008aab 	.word	0x08008aab
 8008a60:	08008abf 	.word	0x08008abf
 8008a64:	08008a83 	.word	0x08008a83
 8008a68:	08008a79 	.word	0x08008a79
 8008a6c:	08008abf 	.word	0x08008abf
 8008a70:	08008a97 	.word	0x08008a97
 8008a74:	08008a8d 	.word	0x08008a8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f9d4 	bl	8008e28 <USBD_GetDescriptor>
          break;
 8008a80:	e022      	b.n	8008ac8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fb37 	bl	80090f8 <USBD_SetAddress>
          break;
 8008a8a:	e01d      	b.n	8008ac8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fb74 	bl	800917c <USBD_SetConfig>
          break;
 8008a94:	e018      	b.n	8008ac8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fbfd 	bl	8009298 <USBD_GetConfig>
          break;
 8008a9e:	e013      	b.n	8008ac8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fc2c 	bl	8009300 <USBD_GetStatus>
          break;
 8008aa8:	e00e      	b.n	8008ac8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fc5a 	bl	8009366 <USBD_SetFeature>
          break;
 8008ab2:	e009      	b.n	8008ac8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fc69 	bl	800938e <USBD_ClrFeature>
          break;
 8008abc:	e004      	b.n	8008ac8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fcc2 	bl	800944a <USBD_CtlError>
          break;
 8008ac6:	bf00      	nop
      }
      break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fcbc 	bl	800944a <USBD_CtlError>
      break;
 8008ad2:	bf00      	nop
  }

  return ret;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop

08008ae0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008af6:	2b20      	cmp	r3, #32
 8008af8:	d003      	beq.n	8008b02 <USBD_StdItfReq+0x22>
 8008afa:	2b40      	cmp	r3, #64	; 0x40
 8008afc:	d001      	beq.n	8008b02 <USBD_StdItfReq+0x22>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d12a      	bne.n	8008b58 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d81d      	bhi.n	8008b4a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	889b      	ldrh	r3, [r3, #4]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d813      	bhi.n	8008b40 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	4798      	blx	r3
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	88db      	ldrh	r3, [r3, #6]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d110      	bne.n	8008b54 <USBD_StdItfReq+0x74>
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10d      	bne.n	8008b54 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fd4f 	bl	80095dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b3e:	e009      	b.n	8008b54 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fc81 	bl	800944a <USBD_CtlError>
          break;
 8008b48:	e004      	b.n	8008b54 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fc7c 	bl	800944a <USBD_CtlError>
          break;
 8008b52:	e000      	b.n	8008b56 <USBD_StdItfReq+0x76>
          break;
 8008b54:	bf00      	nop
      }
      break;
 8008b56:	e004      	b.n	8008b62 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fc75 	bl	800944a <USBD_CtlError>
      break;
 8008b60:	bf00      	nop
  }

  return USBD_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	889b      	ldrh	r3, [r3, #4]
 8008b7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b88:	2b20      	cmp	r3, #32
 8008b8a:	d004      	beq.n	8008b96 <USBD_StdEPReq+0x2a>
 8008b8c:	2b40      	cmp	r3, #64	; 0x40
 8008b8e:	d002      	beq.n	8008b96 <USBD_StdEPReq+0x2a>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d008      	beq.n	8008ba6 <USBD_StdEPReq+0x3a>
 8008b94:	e13d      	b.n	8008e12 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	4798      	blx	r3
      break;
 8008ba4:	e13a      	b.n	8008e1c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	d10a      	bne.n	8008bc8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	4798      	blx	r3
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	e12a      	b.n	8008e1e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d03e      	beq.n	8008c4e <USBD_StdEPReq+0xe2>
 8008bd0:	2b03      	cmp	r3, #3
 8008bd2:	d002      	beq.n	8008bda <USBD_StdEPReq+0x6e>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d070      	beq.n	8008cba <USBD_StdEPReq+0x14e>
 8008bd8:	e115      	b.n	8008e06 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d002      	beq.n	8008bea <USBD_StdEPReq+0x7e>
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	d015      	beq.n	8008c14 <USBD_StdEPReq+0xa8>
 8008be8:	e02b      	b.n	8008c42 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00c      	beq.n	8008c0a <USBD_StdEPReq+0x9e>
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	2b80      	cmp	r3, #128	; 0x80
 8008bf4:	d009      	beq.n	8008c0a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f001 f8d6 	bl	8009dac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c00:	2180      	movs	r1, #128	; 0x80
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 f8d2 	bl	8009dac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c08:	e020      	b.n	8008c4c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fc1c 	bl	800944a <USBD_CtlError>
              break;
 8008c12:	e01b      	b.n	8008c4c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	885b      	ldrh	r3, [r3, #2]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10e      	bne.n	8008c3a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <USBD_StdEPReq+0xce>
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	2b80      	cmp	r3, #128	; 0x80
 8008c26:	d008      	beq.n	8008c3a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	88db      	ldrh	r3, [r3, #6]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d104      	bne.n	8008c3a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c30:	7bbb      	ldrb	r3, [r7, #14]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 f8b9 	bl	8009dac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fcce 	bl	80095dc <USBD_CtlSendStatus>

              break;
 8008c40:	e004      	b.n	8008c4c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fc00 	bl	800944a <USBD_CtlError>
              break;
 8008c4a:	bf00      	nop
          }
          break;
 8008c4c:	e0e0      	b.n	8008e10 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d002      	beq.n	8008c5e <USBD_StdEPReq+0xf2>
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d015      	beq.n	8008c88 <USBD_StdEPReq+0x11c>
 8008c5c:	e026      	b.n	8008cac <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00c      	beq.n	8008c7e <USBD_StdEPReq+0x112>
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	2b80      	cmp	r3, #128	; 0x80
 8008c68:	d009      	beq.n	8008c7e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 f89c 	bl	8009dac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c74:	2180      	movs	r1, #128	; 0x80
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 f898 	bl	8009dac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c7c:	e01c      	b.n	8008cb8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fbe2 	bl	800944a <USBD_CtlError>
              break;
 8008c86:	e017      	b.n	8008cb8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	885b      	ldrh	r3, [r3, #2]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d112      	bne.n	8008cb6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d004      	beq.n	8008ca4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 f8a3 	bl	8009dea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fc99 	bl	80095dc <USBD_CtlSendStatus>
              }
              break;
 8008caa:	e004      	b.n	8008cb6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fbcb 	bl	800944a <USBD_CtlError>
              break;
 8008cb4:	e000      	b.n	8008cb8 <USBD_StdEPReq+0x14c>
              break;
 8008cb6:	bf00      	nop
          }
          break;
 8008cb8:	e0aa      	b.n	8008e10 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d002      	beq.n	8008cca <USBD_StdEPReq+0x15e>
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d032      	beq.n	8008d2e <USBD_StdEPReq+0x1c2>
 8008cc8:	e097      	b.n	8008dfa <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d007      	beq.n	8008ce0 <USBD_StdEPReq+0x174>
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	2b80      	cmp	r3, #128	; 0x80
 8008cd4:	d004      	beq.n	8008ce0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fbb6 	bl	800944a <USBD_CtlError>
                break;
 8008cde:	e091      	b.n	8008e04 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	da0b      	bge.n	8008d00 <USBD_StdEPReq+0x194>
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cee:	4613      	mov	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	3310      	adds	r3, #16
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	e00b      	b.n	8008d18 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	4413      	add	r3, r2
 8008d16:	3304      	adds	r3, #4
 8008d18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2202      	movs	r2, #2
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fbfa 	bl	8009520 <USBD_CtlSendData>
              break;
 8008d2c:	e06a      	b.n	8008e04 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	da11      	bge.n	8008d5a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	f003 020f 	and.w	r2, r3, #15
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	3318      	adds	r3, #24
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d117      	bne.n	8008d80 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fb79 	bl	800944a <USBD_CtlError>
                  break;
 8008d58:	e054      	b.n	8008e04 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	f003 020f 	and.w	r2, r3, #15
 8008d60:	6879      	ldr	r1, [r7, #4]
 8008d62:	4613      	mov	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d104      	bne.n	8008d80 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fb66 	bl	800944a <USBD_CtlError>
                  break;
 8008d7e:	e041      	b.n	8008e04 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	da0b      	bge.n	8008da0 <USBD_StdEPReq+0x234>
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	3310      	adds	r3, #16
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	e00b      	b.n	8008db8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	4413      	add	r3, r2
 8008db6:	3304      	adds	r3, #4
 8008db8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <USBD_StdEPReq+0x25a>
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	2b80      	cmp	r3, #128	; 0x80
 8008dc4:	d103      	bne.n	8008dce <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	e00e      	b.n	8008dec <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 f828 	bl	8009e28 <USBD_LL_IsStallEP>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2201      	movs	r2, #1
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	e002      	b.n	8008dec <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2202      	movs	r2, #2
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fb94 	bl	8009520 <USBD_CtlSendData>
              break;
 8008df8:	e004      	b.n	8008e04 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fb24 	bl	800944a <USBD_CtlError>
              break;
 8008e02:	bf00      	nop
          }
          break;
 8008e04:	e004      	b.n	8008e10 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fb1e 	bl	800944a <USBD_CtlError>
          break;
 8008e0e:	bf00      	nop
      }
      break;
 8008e10:	e004      	b.n	8008e1c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fb18 	bl	800944a <USBD_CtlError>
      break;
 8008e1a:	bf00      	nop
  }

  return ret;
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	885b      	ldrh	r3, [r3, #2]
 8008e42:	0a1b      	lsrs	r3, r3, #8
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	2b06      	cmp	r3, #6
 8008e4a:	f200 8128 	bhi.w	800909e <USBD_GetDescriptor+0x276>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <USBD_GetDescriptor+0x2c>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008e71 	.word	0x08008e71
 8008e58:	08008e89 	.word	0x08008e89
 8008e5c:	08008ec9 	.word	0x08008ec9
 8008e60:	0800909f 	.word	0x0800909f
 8008e64:	0800909f 	.word	0x0800909f
 8008e68:	0800903f 	.word	0x0800903f
 8008e6c:	0800906b 	.word	0x0800906b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	7c12      	ldrb	r2, [r2, #16]
 8008e7c:	f107 0108 	add.w	r1, r7, #8
 8008e80:	4610      	mov	r0, r2
 8008e82:	4798      	blx	r3
 8008e84:	60f8      	str	r0, [r7, #12]
      break;
 8008e86:	e112      	b.n	80090ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7c1b      	ldrb	r3, [r3, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10d      	bne.n	8008eac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	f107 0208 	add.w	r2, r7, #8
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4798      	blx	r3
 8008ea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008eaa:	e100      	b.n	80090ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	f107 0208 	add.w	r2, r7, #8
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4798      	blx	r3
 8008ebc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	701a      	strb	r2, [r3, #0]
      break;
 8008ec6:	e0f2      	b.n	80090ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	885b      	ldrh	r3, [r3, #2]
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b05      	cmp	r3, #5
 8008ed0:	f200 80ac 	bhi.w	800902c <USBD_GetDescriptor+0x204>
 8008ed4:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <USBD_GetDescriptor+0xb4>)
 8008ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eda:	bf00      	nop
 8008edc:	08008ef5 	.word	0x08008ef5
 8008ee0:	08008f29 	.word	0x08008f29
 8008ee4:	08008f5d 	.word	0x08008f5d
 8008ee8:	08008f91 	.word	0x08008f91
 8008eec:	08008fc5 	.word	0x08008fc5
 8008ef0:	08008ff9 	.word	0x08008ff9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00b      	beq.n	8008f18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	7c12      	ldrb	r2, [r2, #16]
 8008f0c:	f107 0108 	add.w	r1, r7, #8
 8008f10:	4610      	mov	r0, r2
 8008f12:	4798      	blx	r3
 8008f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f16:	e091      	b.n	800903c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa95 	bl	800944a <USBD_CtlError>
            err++;
 8008f20:	7afb      	ldrb	r3, [r7, #11]
 8008f22:	3301      	adds	r3, #1
 8008f24:	72fb      	strb	r3, [r7, #11]
          break;
 8008f26:	e089      	b.n	800903c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	7c12      	ldrb	r2, [r2, #16]
 8008f40:	f107 0108 	add.w	r1, r7, #8
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f4a:	e077      	b.n	800903c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fa7b 	bl	800944a <USBD_CtlError>
            err++;
 8008f54:	7afb      	ldrb	r3, [r7, #11]
 8008f56:	3301      	adds	r3, #1
 8008f58:	72fb      	strb	r3, [r7, #11]
          break;
 8008f5a:	e06f      	b.n	800903c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	7c12      	ldrb	r2, [r2, #16]
 8008f74:	f107 0108 	add.w	r1, r7, #8
 8008f78:	4610      	mov	r0, r2
 8008f7a:	4798      	blx	r3
 8008f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f7e:	e05d      	b.n	800903c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa61 	bl	800944a <USBD_CtlError>
            err++;
 8008f88:	7afb      	ldrb	r3, [r7, #11]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f8e:	e055      	b.n	800903c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00b      	beq.n	8008fb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	7c12      	ldrb	r2, [r2, #16]
 8008fa8:	f107 0108 	add.w	r1, r7, #8
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
 8008fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fb2:	e043      	b.n	800903c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fa47 	bl	800944a <USBD_CtlError>
            err++;
 8008fbc:	7afb      	ldrb	r3, [r7, #11]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fc2:	e03b      	b.n	800903c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	7c12      	ldrb	r2, [r2, #16]
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe6:	e029      	b.n	800903c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fa2d 	bl	800944a <USBD_CtlError>
            err++;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff6:	e021      	b.n	800903c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901a:	e00f      	b.n	800903c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa13 	bl	800944a <USBD_CtlError>
            err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
          break;
 800902a:	e007      	b.n	800903c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fa0b 	bl	800944a <USBD_CtlError>
          err++;
 8009034:	7afb      	ldrb	r3, [r7, #11]
 8009036:	3301      	adds	r3, #1
 8009038:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800903a:	e038      	b.n	80090ae <USBD_GetDescriptor+0x286>
 800903c:	e037      	b.n	80090ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	7c1b      	ldrb	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d109      	bne.n	800905a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800904e:	f107 0208 	add.w	r2, r7, #8
 8009052:	4610      	mov	r0, r2
 8009054:	4798      	blx	r3
 8009056:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009058:	e029      	b.n	80090ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f9f4 	bl	800944a <USBD_CtlError>
        err++;
 8009062:	7afb      	ldrb	r3, [r7, #11]
 8009064:	3301      	adds	r3, #1
 8009066:	72fb      	strb	r3, [r7, #11]
      break;
 8009068:	e021      	b.n	80090ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	7c1b      	ldrb	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10d      	bne.n	800908e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	f107 0208 	add.w	r2, r7, #8
 800907e:	4610      	mov	r0, r2
 8009080:	4798      	blx	r3
 8009082:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3301      	adds	r3, #1
 8009088:	2207      	movs	r2, #7
 800908a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800908c:	e00f      	b.n	80090ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f9da 	bl	800944a <USBD_CtlError>
        err++;
 8009096:	7afb      	ldrb	r3, [r7, #11]
 8009098:	3301      	adds	r3, #1
 800909a:	72fb      	strb	r3, [r7, #11]
      break;
 800909c:	e007      	b.n	80090ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f9d2 	bl	800944a <USBD_CtlError>
      err++;
 80090a6:	7afb      	ldrb	r3, [r7, #11]
 80090a8:	3301      	adds	r3, #1
 80090aa:	72fb      	strb	r3, [r7, #11]
      break;
 80090ac:	bf00      	nop
  }

  if (err != 0U)
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d11c      	bne.n	80090ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80090b4:	893b      	ldrh	r3, [r7, #8]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d011      	beq.n	80090de <USBD_GetDescriptor+0x2b6>
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	88db      	ldrh	r3, [r3, #6]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00d      	beq.n	80090de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	88da      	ldrh	r2, [r3, #6]
 80090c6:	893b      	ldrh	r3, [r7, #8]
 80090c8:	4293      	cmp	r3, r2
 80090ca:	bf28      	it	cs
 80090cc:	4613      	movcs	r3, r2
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090d2:	893b      	ldrh	r3, [r7, #8]
 80090d4:	461a      	mov	r2, r3
 80090d6:	68f9      	ldr	r1, [r7, #12]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fa21 	bl	8009520 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	88db      	ldrh	r3, [r3, #6]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fa78 	bl	80095dc <USBD_CtlSendStatus>
 80090ec:	e000      	b.n	80090f0 <USBD_GetDescriptor+0x2c8>
    return;
 80090ee:	bf00      	nop
    }
  }
}
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop

080090f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	889b      	ldrh	r3, [r3, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d130      	bne.n	800916c <USBD_SetAddress+0x74>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	88db      	ldrh	r3, [r3, #6]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d12c      	bne.n	800916c <USBD_SetAddress+0x74>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	885b      	ldrh	r3, [r3, #2]
 8009116:	2b7f      	cmp	r3, #127	; 0x7f
 8009118:	d828      	bhi.n	800916c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	885b      	ldrh	r3, [r3, #2]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009124:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800912c:	2b03      	cmp	r3, #3
 800912e:	d104      	bne.n	800913a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f989 	bl	800944a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009138:	e01c      	b.n	8009174 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	7bfa      	ldrb	r2, [r7, #15]
 800913e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fe9a 	bl	8009e80 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fa45 	bl	80095dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d004      	beq.n	8009162 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009160:	e008      	b.n	8009174 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2201      	movs	r2, #1
 8009166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916a:	e003      	b.n	8009174 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f96b 	bl	800944a <USBD_CtlError>
  }
}
 8009174:	bf00      	nop
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	885b      	ldrh	r3, [r3, #2]
 800918a:	b2da      	uxtb	r2, r3
 800918c:	4b41      	ldr	r3, [pc, #260]	; (8009294 <USBD_SetConfig+0x118>)
 800918e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009190:	4b40      	ldr	r3, [pc, #256]	; (8009294 <USBD_SetConfig+0x118>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d904      	bls.n	80091a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f955 	bl	800944a <USBD_CtlError>
 80091a0:	e075      	b.n	800928e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d002      	beq.n	80091b2 <USBD_SetConfig+0x36>
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d023      	beq.n	80091f8 <USBD_SetConfig+0x7c>
 80091b0:	e062      	b.n	8009278 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80091b2:	4b38      	ldr	r3, [pc, #224]	; (8009294 <USBD_SetConfig+0x118>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d01a      	beq.n	80091f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80091ba:	4b36      	ldr	r3, [pc, #216]	; (8009294 <USBD_SetConfig+0x118>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2203      	movs	r2, #3
 80091c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091cc:	4b31      	ldr	r3, [pc, #196]	; (8009294 <USBD_SetConfig+0x118>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7ff f9b5 	bl	8008542 <USBD_SetClassConfig>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d104      	bne.n	80091e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f932 	bl	800944a <USBD_CtlError>
            return;
 80091e6:	e052      	b.n	800928e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f9f7 	bl	80095dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80091ee:	e04e      	b.n	800928e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f9f3 	bl	80095dc <USBD_CtlSendStatus>
        break;
 80091f6:	e04a      	b.n	800928e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80091f8:	4b26      	ldr	r3, [pc, #152]	; (8009294 <USBD_SetConfig+0x118>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d112      	bne.n	8009226 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2202      	movs	r2, #2
 8009204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009208:	4b22      	ldr	r3, [pc, #136]	; (8009294 <USBD_SetConfig+0x118>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009212:	4b20      	ldr	r3, [pc, #128]	; (8009294 <USBD_SetConfig+0x118>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7ff f9b1 	bl	8008580 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f9dc 	bl	80095dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009224:	e033      	b.n	800928e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009226:	4b1b      	ldr	r3, [pc, #108]	; (8009294 <USBD_SetConfig+0x118>)
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	429a      	cmp	r2, r3
 8009232:	d01d      	beq.n	8009270 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	b2db      	uxtb	r3, r3
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff f99f 	bl	8008580 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009242:	4b14      	ldr	r3, [pc, #80]	; (8009294 <USBD_SetConfig+0x118>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800924c:	4b11      	ldr	r3, [pc, #68]	; (8009294 <USBD_SetConfig+0x118>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff f975 	bl	8008542 <USBD_SetClassConfig>
 8009258:	4603      	mov	r3, r0
 800925a:	2b02      	cmp	r3, #2
 800925c:	d104      	bne.n	8009268 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f8f2 	bl	800944a <USBD_CtlError>
            return;
 8009266:	e012      	b.n	800928e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f9b7 	bl	80095dc <USBD_CtlSendStatus>
        break;
 800926e:	e00e      	b.n	800928e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f9b3 	bl	80095dc <USBD_CtlSendStatus>
        break;
 8009276:	e00a      	b.n	800928e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f8e5 	bl	800944a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009280:	4b04      	ldr	r3, [pc, #16]	; (8009294 <USBD_SetConfig+0x118>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff f97a 	bl	8008580 <USBD_ClrClassConfig>
        break;
 800928c:	bf00      	nop
    }
  }
}
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	24000204 	.word	0x24000204

08009298 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	88db      	ldrh	r3, [r3, #6]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d004      	beq.n	80092b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f8cc 	bl	800944a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092b2:	e021      	b.n	80092f8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	db17      	blt.n	80092ee <USBD_GetConfig+0x56>
 80092be:	2b02      	cmp	r3, #2
 80092c0:	dd02      	ble.n	80092c8 <USBD_GetConfig+0x30>
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d00b      	beq.n	80092de <USBD_GetConfig+0x46>
 80092c6:	e012      	b.n	80092ee <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3308      	adds	r3, #8
 80092d2:	2201      	movs	r2, #1
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f922 	bl	8009520 <USBD_CtlSendData>
        break;
 80092dc:	e00c      	b.n	80092f8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	3304      	adds	r3, #4
 80092e2:	2201      	movs	r2, #1
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f91a 	bl	8009520 <USBD_CtlSendData>
        break;
 80092ec:	e004      	b.n	80092f8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f8aa 	bl	800944a <USBD_CtlError>
        break;
 80092f6:	bf00      	nop
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009310:	3b01      	subs	r3, #1
 8009312:	2b02      	cmp	r3, #2
 8009314:	d81e      	bhi.n	8009354 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	88db      	ldrh	r3, [r3, #6]
 800931a:	2b02      	cmp	r3, #2
 800931c:	d004      	beq.n	8009328 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f892 	bl	800944a <USBD_CtlError>
        break;
 8009326:	e01a      	b.n	800935e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f043 0202 	orr.w	r2, r3, #2
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	330c      	adds	r3, #12
 8009348:	2202      	movs	r2, #2
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f8e7 	bl	8009520 <USBD_CtlSendData>
      break;
 8009352:	e004      	b.n	800935e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f877 	bl	800944a <USBD_CtlError>
      break;
 800935c:	bf00      	nop
  }
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	885b      	ldrh	r3, [r3, #2]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d106      	bne.n	8009386 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f92b 	bl	80095dc <USBD_CtlSendStatus>
  }
}
 8009386:	bf00      	nop
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b082      	sub	sp, #8
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800939e:	3b01      	subs	r3, #1
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d80b      	bhi.n	80093bc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	885b      	ldrh	r3, [r3, #2]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d10c      	bne.n	80093c6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f911 	bl	80095dc <USBD_CtlSendStatus>
      }
      break;
 80093ba:	e004      	b.n	80093c6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f843 	bl	800944a <USBD_CtlError>
      break;
 80093c4:	e000      	b.n	80093c8 <USBD_ClrFeature+0x3a>
      break;
 80093c6:	bf00      	nop
  }
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781a      	ldrb	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	785a      	ldrb	r2, [r3, #1]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	3302      	adds	r3, #2
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	3303      	adds	r3, #3
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	4413      	add	r3, r2
 8009400:	b29a      	uxth	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	3304      	adds	r3, #4
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	b29a      	uxth	r2, r3
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	3305      	adds	r3, #5
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	b29b      	uxth	r3, r3
 8009416:	021b      	lsls	r3, r3, #8
 8009418:	b29b      	uxth	r3, r3
 800941a:	4413      	add	r3, r2
 800941c:	b29a      	uxth	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	3306      	adds	r3, #6
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	b29a      	uxth	r2, r3
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	3307      	adds	r3, #7
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	b29b      	uxth	r3, r3
 8009432:	021b      	lsls	r3, r3, #8
 8009434:	b29b      	uxth	r3, r3
 8009436:	4413      	add	r3, r2
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	80da      	strh	r2, [r3, #6]

}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009454:	2180      	movs	r1, #128	; 0x80
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fca8 	bl	8009dac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800945c:	2100      	movs	r1, #0
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fca4 	bl	8009dac <USBD_LL_StallEP>
}
 8009464:	bf00      	nop
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009478:	2300      	movs	r3, #0
 800947a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d032      	beq.n	80094e8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 f834 	bl	80094f0 <USBD_GetLen>
 8009488:	4603      	mov	r3, r0
 800948a:	3301      	adds	r3, #1
 800948c:	b29b      	uxth	r3, r3
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	75fa      	strb	r2, [r7, #23]
 800949c:	461a      	mov	r2, r3
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	4413      	add	r3, r2
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	7812      	ldrb	r2, [r2, #0]
 80094a6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80094a8:	7dfb      	ldrb	r3, [r7, #23]
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	75fa      	strb	r2, [r7, #23]
 80094ae:	461a      	mov	r2, r3
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	4413      	add	r3, r2
 80094b4:	2203      	movs	r2, #3
 80094b6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80094b8:	e012      	b.n	80094e0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	60fa      	str	r2, [r7, #12]
 80094c0:	7dfa      	ldrb	r2, [r7, #23]
 80094c2:	1c51      	adds	r1, r2, #1
 80094c4:	75f9      	strb	r1, [r7, #23]
 80094c6:	4611      	mov	r1, r2
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	440a      	add	r2, r1
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	75fa      	strb	r2, [r7, #23]
 80094d6:	461a      	mov	r2, r3
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	4413      	add	r3, r2
 80094dc:	2200      	movs	r2, #0
 80094de:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e8      	bne.n	80094ba <USBD_GetString+0x4e>
    }
  }
}
 80094e8:	bf00      	nop
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80094fc:	e005      	b.n	800950a <USBD_GetLen+0x1a>
  {
    len++;
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	3301      	adds	r3, #1
 8009502:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3301      	adds	r3, #1
 8009508:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1f5      	bne.n	80094fe <USBD_GetLen+0xe>
  }

  return len;
 8009512:	7bfb      	ldrb	r3, [r7, #15]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2202      	movs	r2, #2
 8009532:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009536:	88fa      	ldrh	r2, [r7, #6]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800953c:	88fa      	ldrh	r2, [r7, #6]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009542:	88fb      	ldrh	r3, [r7, #6]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	2100      	movs	r1, #0
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 fcb8 	bl	8009ebe <USBD_LL_Transmit>

  return USBD_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009566:	88fb      	ldrh	r3, [r7, #6]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	2100      	movs	r1, #0
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 fca6 	bl	8009ebe <USBD_LL_Transmit>

  return USBD_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2203      	movs	r2, #3
 800958e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009592:	88fa      	ldrh	r2, [r7, #6]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800959a:	88fa      	ldrh	r2, [r7, #6]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095a2:	88fb      	ldrh	r3, [r7, #6]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	2100      	movs	r1, #0
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fcab 	bl	8009f04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	4613      	mov	r3, r2
 80095c4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	2100      	movs	r1, #0
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 fc99 	bl	8009f04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2204      	movs	r2, #4
 80095e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095ec:	2300      	movs	r3, #0
 80095ee:	2200      	movs	r2, #0
 80095f0:	2100      	movs	r1, #0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fc63 	bl	8009ebe <USBD_LL_Transmit>

  return USBD_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2205      	movs	r2, #5
 800960e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009612:	2300      	movs	r3, #0
 8009614:	2200      	movs	r2, #0
 8009616:	2100      	movs	r1, #0
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fc73 	bl	8009f04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800962c:	2200      	movs	r2, #0
 800962e:	4913      	ldr	r1, [pc, #76]	; (800967c <MX_USB_DEVICE_Init+0x54>)
 8009630:	4813      	ldr	r0, [pc, #76]	; (8009680 <MX_USB_DEVICE_Init+0x58>)
 8009632:	f7fe ff2a 	bl	800848a <USBD_Init>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800963c:	f7f7 f844 	bl	80006c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009640:	4910      	ldr	r1, [pc, #64]	; (8009684 <MX_USB_DEVICE_Init+0x5c>)
 8009642:	480f      	ldr	r0, [pc, #60]	; (8009680 <MX_USB_DEVICE_Init+0x58>)
 8009644:	f7fe ff4c 	bl	80084e0 <USBD_RegisterClass>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800964e:	f7f7 f83b 	bl	80006c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009652:	490d      	ldr	r1, [pc, #52]	; (8009688 <MX_USB_DEVICE_Init+0x60>)
 8009654:	480a      	ldr	r0, [pc, #40]	; (8009680 <MX_USB_DEVICE_Init+0x58>)
 8009656:	f7fe fea9 	bl	80083ac <USBD_CDC_RegisterInterface>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009660:	f7f7 f832 	bl	80006c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009664:	4806      	ldr	r0, [pc, #24]	; (8009680 <MX_USB_DEVICE_Init+0x58>)
 8009666:	f7fe ff55 	bl	8008514 <USBD_Start>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009670:	f7f7 f82a 	bl	80006c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009674:	f7fa fbaa 	bl	8003dcc <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009678:	bf00      	nop
 800967a:	bd80      	pop	{r7, pc}
 800967c:	24000130 	.word	0x24000130
 8009680:	24000278 	.word	0x24000278
 8009684:	2400001c 	.word	0x2400001c
 8009688:	24000120 	.word	0x24000120

0800968c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009690:	2200      	movs	r2, #0
 8009692:	4905      	ldr	r1, [pc, #20]	; (80096a8 <CDC_Init_FS+0x1c>)
 8009694:	4805      	ldr	r0, [pc, #20]	; (80096ac <CDC_Init_FS+0x20>)
 8009696:	f7fe fea0 	bl	80083da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800969a:	4905      	ldr	r1, [pc, #20]	; (80096b0 <CDC_Init_FS+0x24>)
 800969c:	4803      	ldr	r0, [pc, #12]	; (80096ac <CDC_Init_FS+0x20>)
 800969e:	f7fe feb6 	bl	800840e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	24000d3c 	.word	0x24000d3c
 80096ac:	24000278 	.word	0x24000278
 80096b0:	2400053c 	.word	0x2400053c

080096b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096b4:	b480      	push	{r7}
 80096b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	6039      	str	r1, [r7, #0]
 80096ce:	71fb      	strb	r3, [r7, #7]
 80096d0:	4613      	mov	r3, r2
 80096d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	2b23      	cmp	r3, #35	; 0x23
 80096d8:	d84a      	bhi.n	8009770 <CDC_Control_FS+0xac>
 80096da:	a201      	add	r2, pc, #4	; (adr r2, 80096e0 <CDC_Control_FS+0x1c>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	08009771 	.word	0x08009771
 80096e4:	08009771 	.word	0x08009771
 80096e8:	08009771 	.word	0x08009771
 80096ec:	08009771 	.word	0x08009771
 80096f0:	08009771 	.word	0x08009771
 80096f4:	08009771 	.word	0x08009771
 80096f8:	08009771 	.word	0x08009771
 80096fc:	08009771 	.word	0x08009771
 8009700:	08009771 	.word	0x08009771
 8009704:	08009771 	.word	0x08009771
 8009708:	08009771 	.word	0x08009771
 800970c:	08009771 	.word	0x08009771
 8009710:	08009771 	.word	0x08009771
 8009714:	08009771 	.word	0x08009771
 8009718:	08009771 	.word	0x08009771
 800971c:	08009771 	.word	0x08009771
 8009720:	08009771 	.word	0x08009771
 8009724:	08009771 	.word	0x08009771
 8009728:	08009771 	.word	0x08009771
 800972c:	08009771 	.word	0x08009771
 8009730:	08009771 	.word	0x08009771
 8009734:	08009771 	.word	0x08009771
 8009738:	08009771 	.word	0x08009771
 800973c:	08009771 	.word	0x08009771
 8009740:	08009771 	.word	0x08009771
 8009744:	08009771 	.word	0x08009771
 8009748:	08009771 	.word	0x08009771
 800974c:	08009771 	.word	0x08009771
 8009750:	08009771 	.word	0x08009771
 8009754:	08009771 	.word	0x08009771
 8009758:	08009771 	.word	0x08009771
 800975c:	08009771 	.word	0x08009771
 8009760:	08009771 	.word	0x08009771
 8009764:	08009771 	.word	0x08009771
 8009768:	08009771 	.word	0x08009771
 800976c:	08009771 	.word	0x08009771
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009770:	bf00      	nop
  }

  return (USBD_OK);
 8009772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	4805      	ldr	r0, [pc, #20]	; (80097a4 <CDC_Receive_FS+0x24>)
 800978e:	f7fe fe3e 	bl	800840e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009792:	4804      	ldr	r0, [pc, #16]	; (80097a4 <CDC_Receive_FS+0x24>)
 8009794:	f7fe fe4f 	bl	8008436 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009798:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	24000278 	.word	0x24000278

080097a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	6039      	str	r1, [r7, #0]
 80097b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	2212      	movs	r2, #18
 80097b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097ba:	4b03      	ldr	r3, [pc, #12]	; (80097c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	2400014c 	.word	0x2400014c

080097cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2204      	movs	r2, #4
 80097dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097de:	4b03      	ldr	r3, [pc, #12]	; (80097ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	24000160 	.word	0x24000160

080097f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	6039      	str	r1, [r7, #0]
 80097fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d105      	bne.n	800980e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	4907      	ldr	r1, [pc, #28]	; (8009824 <USBD_FS_ProductStrDescriptor+0x34>)
 8009806:	4808      	ldr	r0, [pc, #32]	; (8009828 <USBD_FS_ProductStrDescriptor+0x38>)
 8009808:	f7ff fe30 	bl	800946c <USBD_GetString>
 800980c:	e004      	b.n	8009818 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	4904      	ldr	r1, [pc, #16]	; (8009824 <USBD_FS_ProductStrDescriptor+0x34>)
 8009812:	4805      	ldr	r0, [pc, #20]	; (8009828 <USBD_FS_ProductStrDescriptor+0x38>)
 8009814:	f7ff fe2a 	bl	800946c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009818:	4b02      	ldr	r3, [pc, #8]	; (8009824 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	2400153c 	.word	0x2400153c
 8009828:	0800a1d8 	.word	0x0800a1d8

0800982c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	6039      	str	r1, [r7, #0]
 8009836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	4904      	ldr	r1, [pc, #16]	; (800984c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800983c:	4804      	ldr	r0, [pc, #16]	; (8009850 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800983e:	f7ff fe15 	bl	800946c <USBD_GetString>
  return USBD_StrDesc;
 8009842:	4b02      	ldr	r3, [pc, #8]	; (800984c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	2400153c 	.word	0x2400153c
 8009850:	0800a1f0 	.word	0x0800a1f0

08009854 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	6039      	str	r1, [r7, #0]
 800985e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	221a      	movs	r2, #26
 8009864:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009866:	f000 f843 	bl	80098f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800986a:	4b02      	ldr	r3, [pc, #8]	; (8009874 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800986c:	4618      	mov	r0, r3
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	24000164 	.word	0x24000164

08009878 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	6039      	str	r1, [r7, #0]
 8009882:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d105      	bne.n	8009896 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	4907      	ldr	r1, [pc, #28]	; (80098ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800988e:	4808      	ldr	r0, [pc, #32]	; (80098b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009890:	f7ff fdec 	bl	800946c <USBD_GetString>
 8009894:	e004      	b.n	80098a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	4904      	ldr	r1, [pc, #16]	; (80098ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800989a:	4805      	ldr	r0, [pc, #20]	; (80098b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800989c:	f7ff fde6 	bl	800946c <USBD_GetString>
  }
  return USBD_StrDesc;
 80098a0:	4b02      	ldr	r3, [pc, #8]	; (80098ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	2400153c 	.word	0x2400153c
 80098b0:	0800a204 	.word	0x0800a204

080098b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	6039      	str	r1, [r7, #0]
 80098be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098c0:	79fb      	ldrb	r3, [r7, #7]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d105      	bne.n	80098d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	4907      	ldr	r1, [pc, #28]	; (80098e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098ca:	4808      	ldr	r0, [pc, #32]	; (80098ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098cc:	f7ff fdce 	bl	800946c <USBD_GetString>
 80098d0:	e004      	b.n	80098dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	4904      	ldr	r1, [pc, #16]	; (80098e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098d6:	4805      	ldr	r0, [pc, #20]	; (80098ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098d8:	f7ff fdc8 	bl	800946c <USBD_GetString>
  }
  return USBD_StrDesc;
 80098dc:	4b02      	ldr	r3, [pc, #8]	; (80098e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	2400153c 	.word	0x2400153c
 80098ec:	0800a210 	.word	0x0800a210

080098f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098f6:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <Get_SerialNum+0x44>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098fc:	4b0e      	ldr	r3, [pc, #56]	; (8009938 <Get_SerialNum+0x48>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009902:	4b0e      	ldr	r3, [pc, #56]	; (800993c <Get_SerialNum+0x4c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4413      	add	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d009      	beq.n	800992a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009916:	2208      	movs	r2, #8
 8009918:	4909      	ldr	r1, [pc, #36]	; (8009940 <Get_SerialNum+0x50>)
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 f814 	bl	8009948 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009920:	2204      	movs	r2, #4
 8009922:	4908      	ldr	r1, [pc, #32]	; (8009944 <Get_SerialNum+0x54>)
 8009924:	68b8      	ldr	r0, [r7, #8]
 8009926:	f000 f80f 	bl	8009948 <IntToUnicode>
  }
}
 800992a:	bf00      	nop
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	1ff1e800 	.word	0x1ff1e800
 8009938:	1ff1e804 	.word	0x1ff1e804
 800993c:	1ff1e808 	.word	0x1ff1e808
 8009940:	24000166 	.word	0x24000166
 8009944:	24000176 	.word	0x24000176

08009948 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800995a:	2300      	movs	r3, #0
 800995c:	75fb      	strb	r3, [r7, #23]
 800995e:	e027      	b.n	80099b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	0f1b      	lsrs	r3, r3, #28
 8009964:	2b09      	cmp	r3, #9
 8009966:	d80b      	bhi.n	8009980 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	0f1b      	lsrs	r3, r3, #28
 800996c:	b2da      	uxtb	r2, r3
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	4619      	mov	r1, r3
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	440b      	add	r3, r1
 8009978:	3230      	adds	r2, #48	; 0x30
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	e00a      	b.n	8009996 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	0f1b      	lsrs	r3, r3, #28
 8009984:	b2da      	uxtb	r2, r3
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	4619      	mov	r1, r3
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	440b      	add	r3, r1
 8009990:	3237      	adds	r2, #55	; 0x37
 8009992:	b2d2      	uxtb	r2, r2
 8009994:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	011b      	lsls	r3, r3, #4
 800999a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	3301      	adds	r3, #1
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	4413      	add	r3, r2
 80099a6:	2200      	movs	r2, #0
 80099a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	3301      	adds	r3, #1
 80099ae:	75fb      	strb	r3, [r7, #23]
 80099b0:	7dfa      	ldrb	r2, [r7, #23]
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d3d3      	bcc.n	8009960 <IntToUnicode+0x18>
  }
}
 80099b8:	bf00      	nop
 80099ba:	371c      	adds	r7, #28
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	; 0x28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099cc:	f107 0314 	add.w	r3, r7, #20
 80099d0:	2200      	movs	r2, #0
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	605a      	str	r2, [r3, #4]
 80099d6:	609a      	str	r2, [r3, #8]
 80099d8:	60da      	str	r2, [r3, #12]
 80099da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a1e      	ldr	r2, [pc, #120]	; (8009a5c <HAL_PCD_MspInit+0x98>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d136      	bne.n	8009a54 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099e6:	4b1e      	ldr	r3, [pc, #120]	; (8009a60 <HAL_PCD_MspInit+0x9c>)
 80099e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099ec:	4a1c      	ldr	r2, [pc, #112]	; (8009a60 <HAL_PCD_MspInit+0x9c>)
 80099ee:	f043 0301 	orr.w	r3, r3, #1
 80099f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80099f6:	4b1a      	ldr	r3, [pc, #104]	; (8009a60 <HAL_PCD_MspInit+0x9c>)
 80099f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	613b      	str	r3, [r7, #16]
 8009a02:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a12:	2300      	movs	r3, #0
 8009a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009a16:	230a      	movs	r3, #10
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a1a:	f107 0314 	add.w	r3, r7, #20
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4810      	ldr	r0, [pc, #64]	; (8009a64 <HAL_PCD_MspInit+0xa0>)
 8009a22:	f7f8 fe0d 	bl	8002640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a26:	4b0e      	ldr	r3, [pc, #56]	; (8009a60 <HAL_PCD_MspInit+0x9c>)
 8009a28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a2c:	4a0c      	ldr	r2, [pc, #48]	; (8009a60 <HAL_PCD_MspInit+0x9c>)
 8009a2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009a36:	4b0a      	ldr	r3, [pc, #40]	; (8009a60 <HAL_PCD_MspInit+0x9c>)
 8009a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a40:	60fb      	str	r3, [r7, #12]
 8009a42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a44:	2200      	movs	r2, #0
 8009a46:	2100      	movs	r1, #0
 8009a48:	2065      	movs	r0, #101	; 0x65
 8009a4a:	f7f8 fdc4 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a4e:	2065      	movs	r0, #101	; 0x65
 8009a50:	f7f8 fddb 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a54:	bf00      	nop
 8009a56:	3728      	adds	r7, #40	; 0x28
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	40080000 	.word	0x40080000
 8009a60:	58024400 	.word	0x58024400
 8009a64:	58020000 	.word	0x58020000

08009a68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	f7fe fd91 	bl	80085a6 <USBD_LL_SetupStage>
}
 8009a84:	bf00      	nop
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	460b      	mov	r3, r1
 8009a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009a9e:	78fa      	ldrb	r2, [r7, #3]
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	1a9b      	subs	r3, r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	440b      	add	r3, r1
 8009aac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	78fb      	ldrb	r3, [r7, #3]
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	f7fe fdc1 	bl	800863c <USBD_LL_DataOutStage>
}
 8009aba:	bf00      	nop
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	1a9b      	subs	r3, r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	440b      	add	r3, r1
 8009ae2:	3348      	adds	r3, #72	; 0x48
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	78fb      	ldrb	r3, [r7, #3]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	f7fe fe18 	bl	800871e <USBD_LL_DataInStage>
}
 8009aee:	bf00      	nop
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b082      	sub	sp, #8
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fe ff2b 	bl	8008960 <USBD_LL_SOF>
}
 8009b0a:	bf00      	nop
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d102      	bne.n	8009b2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009b26:	2300      	movs	r3, #0
 8009b28:	73fb      	strb	r3, [r7, #15]
 8009b2a:	e008      	b.n	8009b3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d102      	bne.n	8009b3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009b34:	2301      	movs	r3, #1
 8009b36:	73fb      	strb	r3, [r7, #15]
 8009b38:	e001      	b.n	8009b3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009b3a:	f7f6 fdc5 	bl	80006c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b44:	7bfa      	ldrb	r2, [r7, #15]
 8009b46:	4611      	mov	r1, r2
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe fece 	bl	80088ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe fe87 	bl	8008868 <USBD_LL_Reset>
}
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe fec9 	bl	800890a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	6812      	ldr	r2, [r2, #0]
 8009b86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b8a:	f043 0301 	orr.w	r3, r3, #1
 8009b8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d005      	beq.n	8009ba4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b98:	4b04      	ldr	r3, [pc, #16]	; (8009bac <HAL_PCD_SuspendCallback+0x48>)
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	4a03      	ldr	r2, [pc, #12]	; (8009bac <HAL_PCD_SuspendCallback+0x48>)
 8009b9e:	f043 0306 	orr.w	r3, r3, #6
 8009ba2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	e000ed00 	.word	0xe000ed00

08009bb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe feb8 	bl	8008934 <USBD_LL_Resume>
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bde:	78fa      	ldrb	r2, [r7, #3]
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fee3 	bl	80089ae <USBD_LL_IsoOUTIncomplete>
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c02:	78fa      	ldrb	r2, [r7, #3]
 8009c04:	4611      	mov	r1, r2
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fe fec4 	bl	8008994 <USBD_LL_IsoINIncomplete>
}
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe fed0 	bl	80089c8 <USBD_LL_DevConnected>
}
 8009c28:	bf00      	nop
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe fecd 	bl	80089de <USBD_LL_DevDisconnected>
}
 8009c44:	bf00      	nop
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d13e      	bne.n	8009cda <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009c5c:	4a21      	ldr	r2, [pc, #132]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a1f      	ldr	r2, [pc, #124]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c6c:	4b1d      	ldr	r3, [pc, #116]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ce8 <USBD_LL_Init+0x9c>)
 8009c70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009c72:	4b1c      	ldr	r3, [pc, #112]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c74:	2209      	movs	r2, #9
 8009c76:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c78:	4b1a      	ldr	r3, [pc, #104]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c7e:	4b19      	ldr	r3, [pc, #100]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c84:	4b17      	ldr	r3, [pc, #92]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c86:	2202      	movs	r2, #2
 8009c88:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c8a:	4b16      	ldr	r3, [pc, #88]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c90:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c96:	4b13      	ldr	r3, [pc, #76]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009c9c:	4b11      	ldr	r3, [pc, #68]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ca2:	4b10      	ldr	r3, [pc, #64]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ca8:	4b0e      	ldr	r3, [pc, #56]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009cae:	480d      	ldr	r0, [pc, #52]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009cb0:	f7f8 fe76 	bl	80029a0 <HAL_PCD_Init>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009cba:	f7f6 fd05 	bl	80006c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009cbe:	2180      	movs	r1, #128	; 0x80
 8009cc0:	4808      	ldr	r0, [pc, #32]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009cc2:	f7fa f808 	bl	8003cd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009cc6:	2240      	movs	r2, #64	; 0x40
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4806      	ldr	r0, [pc, #24]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009ccc:	f7f9 ffbc 	bl	8003c48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009cd0:	2280      	movs	r2, #128	; 0x80
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	4803      	ldr	r0, [pc, #12]	; (8009ce4 <USBD_LL_Init+0x98>)
 8009cd6:	f7f9 ffb7 	bl	8003c48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	2400163c 	.word	0x2400163c
 8009ce8:	40080000 	.word	0x40080000

08009cec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7f8 ff70 	bl	8002be8 <HAL_PCD_Start>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f92e 	bl	8009f70 <USBD_Get_USB_Status>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	4608      	mov	r0, r1
 8009d2c:	4611      	mov	r1, r2
 8009d2e:	461a      	mov	r2, r3
 8009d30:	4603      	mov	r3, r0
 8009d32:	70fb      	strb	r3, [r7, #3]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70bb      	strb	r3, [r7, #2]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d4a:	78bb      	ldrb	r3, [r7, #2]
 8009d4c:	883a      	ldrh	r2, [r7, #0]
 8009d4e:	78f9      	ldrb	r1, [r7, #3]
 8009d50:	f7f9 fb81 	bl	8003456 <HAL_PCD_EP_Open>
 8009d54:	4603      	mov	r3, r0
 8009d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 f908 	bl	8009f70 <USBD_Get_USB_Status>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	460b      	mov	r3, r1
 8009d78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d88:	78fa      	ldrb	r2, [r7, #3]
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7f9 fbca 	bl	8003526 <HAL_PCD_EP_Close>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 f8e9 	bl	8009f70 <USBD_Get_USB_Status>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	460b      	mov	r3, r1
 8009db6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dc6:	78fa      	ldrb	r2, [r7, #3]
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7f9 fca2 	bl	8003714 <HAL_PCD_EP_SetStall>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 f8ca 	bl	8009f70 <USBD_Get_USB_Status>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	460b      	mov	r3, r1
 8009df4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e04:	78fa      	ldrb	r2, [r7, #3]
 8009e06:	4611      	mov	r1, r2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7f9 fce7 	bl	80037dc <HAL_PCD_EP_ClrStall>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 f8ab 	bl	8009f70 <USBD_Get_USB_Status>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e3a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	da0b      	bge.n	8009e5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e4a:	68f9      	ldr	r1, [r7, #12]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	1a9b      	subs	r3, r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	440b      	add	r3, r1
 8009e56:	333e      	adds	r3, #62	; 0x3e
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	e00b      	b.n	8009e74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e62:	68f9      	ldr	r1, [r7, #12]
 8009e64:	4613      	mov	r3, r2
 8009e66:	00db      	lsls	r3, r3, #3
 8009e68:	1a9b      	subs	r3, r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	440b      	add	r3, r1
 8009e6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e9a:	78fa      	ldrb	r2, [r7, #3]
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7f9 fab4 	bl	800340c <HAL_PCD_SetAddress>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 f860 	bl	8009f70 <USBD_Get_USB_Status>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b086      	sub	sp, #24
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	460b      	mov	r3, r1
 8009ecc:	72fb      	strb	r3, [r7, #11]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ee0:	893b      	ldrh	r3, [r7, #8]
 8009ee2:	7af9      	ldrb	r1, [r7, #11]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	f7f9 fbcb 	bl	8003680 <HAL_PCD_EP_Transmit>
 8009eea:	4603      	mov	r3, r0
 8009eec:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 f83d 	bl	8009f70 <USBD_Get_USB_Status>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009efa:	7dbb      	ldrb	r3, [r7, #22]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	607a      	str	r2, [r7, #4]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	460b      	mov	r3, r1
 8009f12:	72fb      	strb	r3, [r7, #11]
 8009f14:	4613      	mov	r3, r2
 8009f16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f26:	893b      	ldrh	r3, [r7, #8]
 8009f28:	7af9      	ldrb	r1, [r7, #11]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	f7f9 fb45 	bl	80035ba <HAL_PCD_EP_Receive>
 8009f30:	4603      	mov	r3, r0
 8009f32:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009f34:	7dfb      	ldrb	r3, [r7, #23]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 f81a 	bl	8009f70 <USBD_Get_USB_Status>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009f40:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	460b      	mov	r3, r1
 8009f54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f5c:	78fa      	ldrb	r2, [r7, #3]
 8009f5e:	4611      	mov	r1, r2
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7f9 fb75 	bl	8003650 <HAL_PCD_EP_GetRxCount>
 8009f66:	4603      	mov	r3, r0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	4603      	mov	r3, r0
 8009f78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	2b03      	cmp	r3, #3
 8009f82:	d817      	bhi.n	8009fb4 <USBD_Get_USB_Status+0x44>
 8009f84:	a201      	add	r2, pc, #4	; (adr r2, 8009f8c <USBD_Get_USB_Status+0x1c>)
 8009f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8a:	bf00      	nop
 8009f8c:	08009f9d 	.word	0x08009f9d
 8009f90:	08009fa3 	.word	0x08009fa3
 8009f94:	08009fa9 	.word	0x08009fa9
 8009f98:	08009faf 	.word	0x08009faf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa0:	e00b      	b.n	8009fba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa6:	e008      	b.n	8009fba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	73fb      	strb	r3, [r7, #15]
    break;
 8009fac:	e005      	b.n	8009fba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fae:	2302      	movs	r3, #2
 8009fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb2:	e002      	b.n	8009fba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb8:	bf00      	nop
  }
  return usb_status;
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <__errno>:
 8009fc8:	4b01      	ldr	r3, [pc, #4]	; (8009fd0 <__errno+0x8>)
 8009fca:	6818      	ldr	r0, [r3, #0]
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	24000180 	.word	0x24000180

08009fd4 <__libc_init_array>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	4e0d      	ldr	r6, [pc, #52]	; (800a00c <__libc_init_array+0x38>)
 8009fd8:	4c0d      	ldr	r4, [pc, #52]	; (800a010 <__libc_init_array+0x3c>)
 8009fda:	1ba4      	subs	r4, r4, r6
 8009fdc:	10a4      	asrs	r4, r4, #2
 8009fde:	2500      	movs	r5, #0
 8009fe0:	42a5      	cmp	r5, r4
 8009fe2:	d109      	bne.n	8009ff8 <__libc_init_array+0x24>
 8009fe4:	4e0b      	ldr	r6, [pc, #44]	; (800a014 <__libc_init_array+0x40>)
 8009fe6:	4c0c      	ldr	r4, [pc, #48]	; (800a018 <__libc_init_array+0x44>)
 8009fe8:	f000 f8ea 	bl	800a1c0 <_init>
 8009fec:	1ba4      	subs	r4, r4, r6
 8009fee:	10a4      	asrs	r4, r4, #2
 8009ff0:	2500      	movs	r5, #0
 8009ff2:	42a5      	cmp	r5, r4
 8009ff4:	d105      	bne.n	800a002 <__libc_init_array+0x2e>
 8009ff6:	bd70      	pop	{r4, r5, r6, pc}
 8009ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ffc:	4798      	blx	r3
 8009ffe:	3501      	adds	r5, #1
 800a000:	e7ee      	b.n	8009fe0 <__libc_init_array+0xc>
 800a002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a006:	4798      	blx	r3
 800a008:	3501      	adds	r5, #1
 800a00a:	e7f2      	b.n	8009ff2 <__libc_init_array+0x1e>
 800a00c:	0800a230 	.word	0x0800a230
 800a010:	0800a230 	.word	0x0800a230
 800a014:	0800a230 	.word	0x0800a230
 800a018:	0800a234 	.word	0x0800a234

0800a01c <malloc>:
 800a01c:	4b02      	ldr	r3, [pc, #8]	; (800a028 <malloc+0xc>)
 800a01e:	4601      	mov	r1, r0
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	f000 b861 	b.w	800a0e8 <_malloc_r>
 800a026:	bf00      	nop
 800a028:	24000180 	.word	0x24000180

0800a02c <free>:
 800a02c:	4b02      	ldr	r3, [pc, #8]	; (800a038 <free+0xc>)
 800a02e:	4601      	mov	r1, r0
 800a030:	6818      	ldr	r0, [r3, #0]
 800a032:	f000 b80b 	b.w	800a04c <_free_r>
 800a036:	bf00      	nop
 800a038:	24000180 	.word	0x24000180

0800a03c <memset>:
 800a03c:	4402      	add	r2, r0
 800a03e:	4603      	mov	r3, r0
 800a040:	4293      	cmp	r3, r2
 800a042:	d100      	bne.n	800a046 <memset+0xa>
 800a044:	4770      	bx	lr
 800a046:	f803 1b01 	strb.w	r1, [r3], #1
 800a04a:	e7f9      	b.n	800a040 <memset+0x4>

0800a04c <_free_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4605      	mov	r5, r0
 800a050:	2900      	cmp	r1, #0
 800a052:	d045      	beq.n	800a0e0 <_free_r+0x94>
 800a054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a058:	1f0c      	subs	r4, r1, #4
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	bfb8      	it	lt
 800a05e:	18e4      	addlt	r4, r4, r3
 800a060:	f000 f8ac 	bl	800a1bc <__malloc_lock>
 800a064:	4a1f      	ldr	r2, [pc, #124]	; (800a0e4 <_free_r+0x98>)
 800a066:	6813      	ldr	r3, [r2, #0]
 800a068:	4610      	mov	r0, r2
 800a06a:	b933      	cbnz	r3, 800a07a <_free_r+0x2e>
 800a06c:	6063      	str	r3, [r4, #4]
 800a06e:	6014      	str	r4, [r2, #0]
 800a070:	4628      	mov	r0, r5
 800a072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a076:	f000 b8a2 	b.w	800a1be <__malloc_unlock>
 800a07a:	42a3      	cmp	r3, r4
 800a07c:	d90c      	bls.n	800a098 <_free_r+0x4c>
 800a07e:	6821      	ldr	r1, [r4, #0]
 800a080:	1862      	adds	r2, r4, r1
 800a082:	4293      	cmp	r3, r2
 800a084:	bf04      	itt	eq
 800a086:	681a      	ldreq	r2, [r3, #0]
 800a088:	685b      	ldreq	r3, [r3, #4]
 800a08a:	6063      	str	r3, [r4, #4]
 800a08c:	bf04      	itt	eq
 800a08e:	1852      	addeq	r2, r2, r1
 800a090:	6022      	streq	r2, [r4, #0]
 800a092:	6004      	str	r4, [r0, #0]
 800a094:	e7ec      	b.n	800a070 <_free_r+0x24>
 800a096:	4613      	mov	r3, r2
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	b10a      	cbz	r2, 800a0a0 <_free_r+0x54>
 800a09c:	42a2      	cmp	r2, r4
 800a09e:	d9fa      	bls.n	800a096 <_free_r+0x4a>
 800a0a0:	6819      	ldr	r1, [r3, #0]
 800a0a2:	1858      	adds	r0, r3, r1
 800a0a4:	42a0      	cmp	r0, r4
 800a0a6:	d10b      	bne.n	800a0c0 <_free_r+0x74>
 800a0a8:	6820      	ldr	r0, [r4, #0]
 800a0aa:	4401      	add	r1, r0
 800a0ac:	1858      	adds	r0, r3, r1
 800a0ae:	4282      	cmp	r2, r0
 800a0b0:	6019      	str	r1, [r3, #0]
 800a0b2:	d1dd      	bne.n	800a070 <_free_r+0x24>
 800a0b4:	6810      	ldr	r0, [r2, #0]
 800a0b6:	6852      	ldr	r2, [r2, #4]
 800a0b8:	605a      	str	r2, [r3, #4]
 800a0ba:	4401      	add	r1, r0
 800a0bc:	6019      	str	r1, [r3, #0]
 800a0be:	e7d7      	b.n	800a070 <_free_r+0x24>
 800a0c0:	d902      	bls.n	800a0c8 <_free_r+0x7c>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	602b      	str	r3, [r5, #0]
 800a0c6:	e7d3      	b.n	800a070 <_free_r+0x24>
 800a0c8:	6820      	ldr	r0, [r4, #0]
 800a0ca:	1821      	adds	r1, r4, r0
 800a0cc:	428a      	cmp	r2, r1
 800a0ce:	bf04      	itt	eq
 800a0d0:	6811      	ldreq	r1, [r2, #0]
 800a0d2:	6852      	ldreq	r2, [r2, #4]
 800a0d4:	6062      	str	r2, [r4, #4]
 800a0d6:	bf04      	itt	eq
 800a0d8:	1809      	addeq	r1, r1, r0
 800a0da:	6021      	streq	r1, [r4, #0]
 800a0dc:	605c      	str	r4, [r3, #4]
 800a0de:	e7c7      	b.n	800a070 <_free_r+0x24>
 800a0e0:	bd38      	pop	{r3, r4, r5, pc}
 800a0e2:	bf00      	nop
 800a0e4:	24000208 	.word	0x24000208

0800a0e8 <_malloc_r>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	1ccd      	adds	r5, r1, #3
 800a0ec:	f025 0503 	bic.w	r5, r5, #3
 800a0f0:	3508      	adds	r5, #8
 800a0f2:	2d0c      	cmp	r5, #12
 800a0f4:	bf38      	it	cc
 800a0f6:	250c      	movcc	r5, #12
 800a0f8:	2d00      	cmp	r5, #0
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	db01      	blt.n	800a102 <_malloc_r+0x1a>
 800a0fe:	42a9      	cmp	r1, r5
 800a100:	d903      	bls.n	800a10a <_malloc_r+0x22>
 800a102:	230c      	movs	r3, #12
 800a104:	6033      	str	r3, [r6, #0]
 800a106:	2000      	movs	r0, #0
 800a108:	bd70      	pop	{r4, r5, r6, pc}
 800a10a:	f000 f857 	bl	800a1bc <__malloc_lock>
 800a10e:	4a21      	ldr	r2, [pc, #132]	; (800a194 <_malloc_r+0xac>)
 800a110:	6814      	ldr	r4, [r2, #0]
 800a112:	4621      	mov	r1, r4
 800a114:	b991      	cbnz	r1, 800a13c <_malloc_r+0x54>
 800a116:	4c20      	ldr	r4, [pc, #128]	; (800a198 <_malloc_r+0xb0>)
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	b91b      	cbnz	r3, 800a124 <_malloc_r+0x3c>
 800a11c:	4630      	mov	r0, r6
 800a11e:	f000 f83d 	bl	800a19c <_sbrk_r>
 800a122:	6020      	str	r0, [r4, #0]
 800a124:	4629      	mov	r1, r5
 800a126:	4630      	mov	r0, r6
 800a128:	f000 f838 	bl	800a19c <_sbrk_r>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d124      	bne.n	800a17a <_malloc_r+0x92>
 800a130:	230c      	movs	r3, #12
 800a132:	6033      	str	r3, [r6, #0]
 800a134:	4630      	mov	r0, r6
 800a136:	f000 f842 	bl	800a1be <__malloc_unlock>
 800a13a:	e7e4      	b.n	800a106 <_malloc_r+0x1e>
 800a13c:	680b      	ldr	r3, [r1, #0]
 800a13e:	1b5b      	subs	r3, r3, r5
 800a140:	d418      	bmi.n	800a174 <_malloc_r+0x8c>
 800a142:	2b0b      	cmp	r3, #11
 800a144:	d90f      	bls.n	800a166 <_malloc_r+0x7e>
 800a146:	600b      	str	r3, [r1, #0]
 800a148:	50cd      	str	r5, [r1, r3]
 800a14a:	18cc      	adds	r4, r1, r3
 800a14c:	4630      	mov	r0, r6
 800a14e:	f000 f836 	bl	800a1be <__malloc_unlock>
 800a152:	f104 000b 	add.w	r0, r4, #11
 800a156:	1d23      	adds	r3, r4, #4
 800a158:	f020 0007 	bic.w	r0, r0, #7
 800a15c:	1ac3      	subs	r3, r0, r3
 800a15e:	d0d3      	beq.n	800a108 <_malloc_r+0x20>
 800a160:	425a      	negs	r2, r3
 800a162:	50e2      	str	r2, [r4, r3]
 800a164:	e7d0      	b.n	800a108 <_malloc_r+0x20>
 800a166:	428c      	cmp	r4, r1
 800a168:	684b      	ldr	r3, [r1, #4]
 800a16a:	bf16      	itet	ne
 800a16c:	6063      	strne	r3, [r4, #4]
 800a16e:	6013      	streq	r3, [r2, #0]
 800a170:	460c      	movne	r4, r1
 800a172:	e7eb      	b.n	800a14c <_malloc_r+0x64>
 800a174:	460c      	mov	r4, r1
 800a176:	6849      	ldr	r1, [r1, #4]
 800a178:	e7cc      	b.n	800a114 <_malloc_r+0x2c>
 800a17a:	1cc4      	adds	r4, r0, #3
 800a17c:	f024 0403 	bic.w	r4, r4, #3
 800a180:	42a0      	cmp	r0, r4
 800a182:	d005      	beq.n	800a190 <_malloc_r+0xa8>
 800a184:	1a21      	subs	r1, r4, r0
 800a186:	4630      	mov	r0, r6
 800a188:	f000 f808 	bl	800a19c <_sbrk_r>
 800a18c:	3001      	adds	r0, #1
 800a18e:	d0cf      	beq.n	800a130 <_malloc_r+0x48>
 800a190:	6025      	str	r5, [r4, #0]
 800a192:	e7db      	b.n	800a14c <_malloc_r+0x64>
 800a194:	24000208 	.word	0x24000208
 800a198:	2400020c 	.word	0x2400020c

0800a19c <_sbrk_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4c06      	ldr	r4, [pc, #24]	; (800a1b8 <_sbrk_r+0x1c>)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	6023      	str	r3, [r4, #0]
 800a1a8:	f7f6 fb68 	bl	800087c <_sbrk>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d102      	bne.n	800a1b6 <_sbrk_r+0x1a>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	b103      	cbz	r3, 800a1b6 <_sbrk_r+0x1a>
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	24001a44 	.word	0x24001a44

0800a1bc <__malloc_lock>:
 800a1bc:	4770      	bx	lr

0800a1be <__malloc_unlock>:
 800a1be:	4770      	bx	lr

0800a1c0 <_init>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	bf00      	nop
 800a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c6:	bc08      	pop	{r3}
 800a1c8:	469e      	mov	lr, r3
 800a1ca:	4770      	bx	lr

0800a1cc <_fini>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	bf00      	nop
 800a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d2:	bc08      	pop	{r3}
 800a1d4:	469e      	mov	lr, r3
 800a1d6:	4770      	bx	lr
