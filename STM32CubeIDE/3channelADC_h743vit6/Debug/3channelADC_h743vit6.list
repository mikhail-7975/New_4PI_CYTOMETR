
3channelADC_h743vit6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a340  0800a340  0001a340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a398  0800a398  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a398  0800a398  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a398  0800a398  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a398  0800a398  0001a398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a39c  0800a39c  0001a39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800a3a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001864  240001e4  0800a584  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001a48  0800a584  00021a48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023bdc  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f0c  00000000  00000000  00043dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001260  00000000  00000000  00047d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d8  00000000  00000000  00048f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039e22  00000000  00000000  0004a038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001267e  00000000  00000000  00083e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00164f63  00000000  00000000  000964d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fb43b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d3c  00000000  00000000  001fb4b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e4 	.word	0x240001e4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a328 	.word	0x0800a328

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e8 	.word	0x240001e8
 80002d4:	0800a328 	.word	0x0800a328

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b087      	sub	sp, #28
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 fbe3 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f889 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 fa05 	bl	80006f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002ea:	f000 f96d 	bl	80005c8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80002ee:	f009 fa29 	bl	8009744 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t channelCount = 3;
 80002f2:	2303      	movs	r3, #3
 80002f4:	74fb      	strb	r3, [r7, #19]
  uint16_t traceLenth = 1000;
 80002f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fa:	823b      	strh	r3, [r7, #16]
  const arraySize = channelCount * traceLenth;
 80002fc:	7cfb      	ldrb	r3, [r7, #19]
 80002fe:	8a3a      	ldrh	r2, [r7, #16]
 8000300:	fb02 f303 	mul.w	r3, r2, r3
 8000304:	60fb      	str	r3, [r7, #12]
  uint8_t dataFromAdc7 = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	72fb      	strb	r3, [r7, #11]
  uint8_t dataFromAdc8 = 0;
 800030a:	2300      	movs	r3, #0
 800030c:	72bb      	strb	r3, [r7, #10]
  uint8_t dataFromAdc9 = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	727b      	strb	r3, [r7, #9]

  uint8_t dataArray[arraySize];
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	3b01      	subs	r3, #1
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	4619      	mov	r1, r3
 800031c:	f04f 0200 	mov.w	r2, #0
 8000320:	f04f 0300 	mov.w	r3, #0
 8000324:	f04f 0400 	mov.w	r4, #0
 8000328:	00d4      	lsls	r4, r2, #3
 800032a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	4619      	mov	r1, r3
 8000334:	f04f 0200 	mov.w	r2, #0
 8000338:	f04f 0300 	mov.w	r3, #0
 800033c:	f04f 0400 	mov.w	r4, #0
 8000340:	00d4      	lsls	r4, r2, #3
 8000342:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000346:	00cb      	lsls	r3, r1, #3
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	3307      	adds	r3, #7
 800034c:	08db      	lsrs	r3, r3, #3
 800034e:	00db      	lsls	r3, r3, #3
 8000350:	ebad 0d03 	sub.w	sp, sp, r3
 8000354:	466b      	mov	r3, sp
 8000356:	3300      	adds	r3, #0
 8000358:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < arraySize; i++) {
 800035a:	2300      	movs	r3, #0
 800035c:	82bb      	strh	r3, [r7, #20]
 800035e:	e006      	b.n	800036e <main+0x96>
	  dataArray[i] = 10;
 8000360:	8abb      	ldrh	r3, [r7, #20]
 8000362:	683a      	ldr	r2, [r7, #0]
 8000364:	210a      	movs	r1, #10
 8000366:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i = 0; i < arraySize; i++) {
 8000368:	8abb      	ldrh	r3, [r7, #20]
 800036a:	3301      	adds	r3, #1
 800036c:	82bb      	strh	r3, [r7, #20]
 800036e:	8abb      	ldrh	r3, [r7, #20]
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	429a      	cmp	r2, r3
 8000374:	dcf4      	bgt.n	8000360 <main+0x88>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(CDC_Transmit_FS(&dataArray, arraySize) == USBD_BUSY);
 8000376:	bf00      	nop
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	68f9      	ldr	r1, [r7, #12]
 800037c:	4618      	mov	r0, r3
 800037e:	f009 faa1 	bl	80098c4 <CDC_Transmit_FS>
 8000382:	4603      	mov	r3, r0
 8000384:	2b01      	cmp	r3, #1
 8000386:	d0f7      	beq.n	8000378 <main+0xa0>
	  for(uint16_t i = 0; i < traceLenth; i++) {
 8000388:	2300      	movs	r3, #0
 800038a:	82fb      	strh	r3, [r7, #22]
 800038c:	e029      	b.n	80003e2 <main+0x10a>
		  HAL_ADC_Start(&hadc1);
 800038e:	4819      	ldr	r0, [pc, #100]	; (80003f4 <main+0x11c>)
 8000390:	f001 f810 	bl	80013b4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,100);
 8000394:	2164      	movs	r1, #100	; 0x64
 8000396:	4817      	ldr	r0, [pc, #92]	; (80003f4 <main+0x11c>)
 8000398:	f001 f90a 	bl	80015b0 <HAL_ADC_PollForConversion>
		  dataArray[i] = (uint8_t) HAL_ADC_GetValue(&hadc1);//7 channel PA7
 800039c:	4815      	ldr	r0, [pc, #84]	; (80003f4 <main+0x11c>)
 800039e:	f001 f9f3 	bl	8001788 <HAL_ADC_GetValue>
 80003a2:	4602      	mov	r2, r0
 80003a4:	8afb      	ldrh	r3, [r7, #22]
 80003a6:	b2d1      	uxtb	r1, r2
 80003a8:	683a      	ldr	r2, [r7, #0]
 80003aa:	54d1      	strb	r1, [r2, r3]
		  dataArray[i + traceLenth] = (uint8_t) HAL_ADC_GetValue(&hadc1);//8 channel PC5
 80003ac:	4811      	ldr	r0, [pc, #68]	; (80003f4 <main+0x11c>)
 80003ae:	f001 f9eb 	bl	8001788 <HAL_ADC_GetValue>
 80003b2:	4601      	mov	r1, r0
 80003b4:	8afa      	ldrh	r2, [r7, #22]
 80003b6:	8a3b      	ldrh	r3, [r7, #16]
 80003b8:	4413      	add	r3, r2
 80003ba:	b2c9      	uxtb	r1, r1
 80003bc:	683a      	ldr	r2, [r7, #0]
 80003be:	54d1      	strb	r1, [r2, r3]
		  dataArray[i + 2 * traceLenth] = (uint8_t) HAL_ADC_GetValue(&hadc1);//9 channel PB0
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <main+0x11c>)
 80003c2:	f001 f9e1 	bl	8001788 <HAL_ADC_GetValue>
 80003c6:	4601      	mov	r1, r0
 80003c8:	8afa      	ldrh	r2, [r7, #22]
 80003ca:	8a3b      	ldrh	r3, [r7, #16]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	4413      	add	r3, r2
 80003d0:	b2c9      	uxtb	r1, r1
 80003d2:	683a      	ldr	r2, [r7, #0]
 80003d4:	54d1      	strb	r1, [r2, r3]
		  HAL_ADC_Stop(&hadc1);
 80003d6:	4807      	ldr	r0, [pc, #28]	; (80003f4 <main+0x11c>)
 80003d8:	f001 f8b6 	bl	8001548 <HAL_ADC_Stop>
	  for(uint16_t i = 0; i < traceLenth; i++) {
 80003dc:	8afb      	ldrh	r3, [r7, #22]
 80003de:	3301      	adds	r3, #1
 80003e0:	82fb      	strh	r3, [r7, #22]
 80003e2:	8afa      	ldrh	r2, [r7, #22]
 80003e4:	8a3b      	ldrh	r3, [r7, #16]
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d3d1      	bcc.n	800038e <main+0xb6>
	  }

	  HAL_Delay(1000);
 80003ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ee:	f000 fbed 	bl	8000bcc <HAL_Delay>
	  while(CDC_Transmit_FS(&dataArray, arraySize) == USBD_BUSY);
 80003f2:	e7c0      	b.n	8000376 <main+0x9e>
 80003f4:	24000210 	.word	0x24000210

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b0cc      	sub	sp, #304	; 0x130
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000402:	224c      	movs	r2, #76	; 0x4c
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f009 fecc 	bl	800a1a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000410:	2220      	movs	r2, #32
 8000412:	2100      	movs	r1, #0
 8000414:	4618      	mov	r0, r3
 8000416:	f009 fec5 	bl	800a1a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	4618      	mov	r0, r3
 8000420:	23bc      	movs	r3, #188	; 0xbc
 8000422:	461a      	mov	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f009 febd 	bl	800a1a4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800042a:	2002      	movs	r0, #2
 800042c:	f003 fcf2 	bl	8003e14 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	4b61      	ldr	r3, [pc, #388]	; (80005bc <SystemClock_Config+0x1c4>)
 8000438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043a:	4a60      	ldr	r2, [pc, #384]	; (80005bc <SystemClock_Config+0x1c4>)
 800043c:	f023 0301 	bic.w	r3, r3, #1
 8000440:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000442:	4b5e      	ldr	r3, [pc, #376]	; (80005bc <SystemClock_Config+0x1c4>)
 8000444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000446:	f003 0201 	and.w	r2, r3, #1
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	4b5c      	ldr	r3, [pc, #368]	; (80005c0 <SystemClock_Config+0x1c8>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000456:	4a5a      	ldr	r2, [pc, #360]	; (80005c0 <SystemClock_Config+0x1c8>)
 8000458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b58      	ldr	r3, [pc, #352]	; (80005c0 <SystemClock_Config+0x1c8>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800046e:	bf00      	nop
 8000470:	4b53      	ldr	r3, [pc, #332]	; (80005c0 <SystemClock_Config+0x1c8>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800047c:	d1f8      	bne.n	8000470 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800047e:	4b51      	ldr	r3, [pc, #324]	; (80005c4 <SystemClock_Config+0x1cc>)
 8000480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000482:	f023 0303 	bic.w	r3, r3, #3
 8000486:	4a4f      	ldr	r2, [pc, #316]	; (80005c4 <SystemClock_Config+0x1cc>)
 8000488:	f043 0302 	orr.w	r3, r3, #2
 800048c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800048e:	2321      	movs	r3, #33	; 0x21
 8000490:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000498:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800049c:	2301      	movs	r3, #1
 800049e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a2:	2302      	movs	r3, #2
 80004a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004a8:	2302      	movs	r3, #2
 80004aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80004ae:	2305      	movs	r3, #5
 80004b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 40;
 80004b4:	2328      	movs	r3, #40	; 0x28
 80004b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80004c0:	2305      	movs	r3, #5
 80004c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004cc:	2308      	movs	r3, #8
 80004ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 fce0 	bl	8003ea8 <HAL_RCC_OscConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80004ee:	f000 f949 	bl	8000784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f2:	233f      	movs	r3, #63	; 0x3f
 80004f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f8:	2303      	movs	r3, #3
 80004fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000522:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000526:	2101      	movs	r1, #1
 8000528:	4618      	mov	r0, r3
 800052a:	f004 f895 	bl	8004658 <HAL_RCC_ClockConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x140>
  {
    Error_Handler();
 8000534:	f000 f926 	bl	8000784 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000540:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	2202      	movs	r2, #2
 8000548:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	220c      	movs	r2, #12
 8000550:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	2201      	movs	r2, #1
 8000558:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	2202      	movs	r2, #2
 8000560:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	2202      	movs	r2, #2
 8000568:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800056a:	f107 0308 	add.w	r3, r7, #8
 800056e:	22c0      	movs	r2, #192	; 0xc0
 8000570:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	2220      	movs	r2, #32
 8000578:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2200      	movs	r2, #0
 8000580:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800058a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2200      	movs	r2, #0
 8000594:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	4618      	mov	r0, r3
 800059e:	f004 fbb3 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x1b4>
  {
    Error_Handler();
 80005a8:	f000 f8ec 	bl	8000784 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80005ac:	f003 fc6c 	bl	8003e88 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80005b0:	bf00      	nop
 80005b2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	58000400 	.word	0x58000400
 80005c0:	58024800 	.word	0x58024800
 80005c4:	58024400 	.word	0x58024400

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]
 80005ea:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <MX_ADC1_Init+0x118>)
 80005ee:	4a3d      	ldr	r2, [pc, #244]	; (80006e4 <MX_ADC1_Init+0x11c>)
 80005f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005f2:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <MX_ADC1_Init+0x118>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <MX_ADC1_Init+0x118>)
 80005fa:	2210      	movs	r2, #16
 80005fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <MX_ADC1_Init+0x118>)
 8000600:	2201      	movs	r2, #1
 8000602:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <MX_ADC1_Init+0x118>)
 8000606:	2208      	movs	r2, #8
 8000608:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800060a:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <MX_ADC1_Init+0x118>)
 800060c:	2200      	movs	r2, #0
 800060e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <MX_ADC1_Init+0x118>)
 8000612:	2200      	movs	r2, #0
 8000614:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 3;
 8000616:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <MX_ADC1_Init+0x118>)
 8000618:	2203      	movs	r2, #3
 800061a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <MX_ADC1_Init+0x118>)
 800061e:	2200      	movs	r2, #0
 8000620:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MX_ADC1_Init+0x118>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_ADC1_Init+0x118>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <MX_ADC1_Init+0x118>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <MX_ADC1_Init+0x118>)
 8000636:	2200      	movs	r2, #0
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <MX_ADC1_Init+0x118>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <MX_ADC1_Init+0x118>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	4825      	ldr	r0, [pc, #148]	; (80006e0 <MX_ADC1_Init+0x118>)
 800064a:	f000 fd13 	bl	8001074 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000654:	f000 f896 	bl	8000784 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	481f      	ldr	r0, [pc, #124]	; (80006e0 <MX_ADC1_Init+0x118>)
 8000664:	f001 fe60 	bl	8002328 <HAL_ADCEx_MultiModeConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800066e:	f000 f889 	bl	8000784 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_ADC1_Init+0x120>)
 8000674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000676:	2306      	movs	r3, #6
 8000678:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000682:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000684:	2304      	movs	r3, #4
 8000686:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <MX_ADC1_Init+0x118>)
 8000692:	f001 f887 	bl	80017a4 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800069c:	f000 f872 	bl	8000784 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_ADC1_Init+0x124>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006a4:	230c      	movs	r3, #12
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <MX_ADC1_Init+0x118>)
 80006ae:	f001 f879 	bl	80017a4 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80006b8:	f000 f864 	bl	8000784 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_ADC1_Init+0x128>)
 80006be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006c0:	2312      	movs	r3, #18
 80006c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_ADC1_Init+0x118>)
 80006ca:	f001 f86b 	bl	80017a4 <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80006d4:	f000 f856 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	24000210 	.word	0x24000210
 80006e4:	40022000 	.word	0x40022000
 80006e8:	1d500080 	.word	0x1d500080
 80006ec:	21800100 	.word	0x21800100
 80006f0:	25b00200 	.word	0x25b00200

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_GPIO_Init+0x8c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <MX_GPIO_Init+0x8c>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_GPIO_Init+0x8c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_GPIO_Init+0x8c>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a18      	ldr	r2, [pc, #96]	; (8000780 <MX_GPIO_Init+0x8c>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_GPIO_Init+0x8c>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_GPIO_Init+0x8c>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <MX_GPIO_Init+0x8c>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_GPIO_Init+0x8c>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_GPIO_Init+0x8c>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <MX_GPIO_Init+0x8c>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_GPIO_Init+0x8c>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	58024400 	.word	0x58024400

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_MspInit+0x30>)
 800079c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a0:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x30>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x30>)
 80007ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58024400 	.word	0x58024400

080007c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a33      	ldr	r2, [pc, #204]	; (80008b4 <HAL_ADC_MspInit+0xec>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d15f      	bne.n	80008aa <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007ea:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 80007ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f0:	4a31      	ldr	r2, [pc, #196]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 80007f2:	f043 0320 	orr.w	r3, r3, #32
 80007f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007fa:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 80007fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000800:	f003 0320 	and.w	r3, r3, #32
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080e:	4a2a      	ldr	r2, [pc, #168]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 8000846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084a:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_ADC_MspInit+0xf0>)
 8000856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_INP7
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000866:	2303      	movs	r3, #3
 8000868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <HAL_ADC_MspInit+0xf4>)
 8000876:	f001 ff41 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800087a:	2320      	movs	r3, #32
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <HAL_ADC_MspInit+0xf8>)
 800088e:	f001 ff35 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000896:	2303      	movs	r3, #3
 8000898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <HAL_ADC_MspInit+0xfc>)
 80008a6:	f001 ff29 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008aa:	bf00      	nop
 80008ac:	3730      	adds	r7, #48	; 0x30
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58020000 	.word	0x58020000
 80008c0:	58020800 	.word	0x58020800
 80008c4:	58020400 	.word	0x58020400

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 f936 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <OTG_FS_IRQHandler+0x10>)
 800092a:	f002 f9ee 	bl	8002d0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2400163c 	.word	0x2400163c

08000938 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <_sbrk+0x50>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x16>
		heap_end = &end;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <_sbrk+0x50>)
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <_sbrk+0x54>)
 800094c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <_sbrk+0x50>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <_sbrk+0x50>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	466a      	mov	r2, sp
 800095e:	4293      	cmp	r3, r2
 8000960:	d907      	bls.n	8000972 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000962:	f009 fbe5 	bl	800a130 <__errno>
 8000966:	4602      	mov	r2, r0
 8000968:	230c      	movs	r3, #12
 800096a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800096c:	f04f 33ff 	mov.w	r3, #4294967295
 8000970:	e006      	b.n	8000980 <_sbrk+0x48>
	}

	heap_end += incr;
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <_sbrk+0x50>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a03      	ldr	r2, [pc, #12]	; (8000988 <_sbrk+0x50>)
 800097c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	24000200 	.word	0x24000200
 800098c:	24001a48 	.word	0x24001a48

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000994:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <SystemInit+0xac>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099a:	4a28      	ldr	r2, [pc, #160]	; (8000a3c <SystemInit+0xac>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <SystemInit+0xb0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <SystemInit+0xb0>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <SystemInit+0xb0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009b6:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <SystemInit+0xb0>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4921      	ldr	r1, [pc, #132]	; (8000a40 <SystemInit+0xb0>)
 80009bc:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <SystemInit+0xb4>)
 80009be:	4013      	ands	r3, r2
 80009c0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <SystemInit+0xb0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <SystemInit+0xb0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <SystemInit+0xb0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <SystemInit+0xb0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <SystemInit+0xb0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <SystemInit+0xb0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <SystemInit+0xb0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <SystemInit+0xb0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <SystemInit+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <SystemInit+0xb0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <SystemInit+0xb0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <SystemInit+0xb0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <SystemInit+0xb0>)
 8000a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <SystemInit+0xb0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <SystemInit+0xb8>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <SystemInit+0xbc>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a22:	d202      	bcs.n	8000a2a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <SystemInit+0xc0>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <SystemInit+0xac>)
 8000a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a30:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00
 8000a40:	58024400 	.word	0x58024400
 8000a44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a48:	5c001000 	.word	0x5c001000
 8000a4c:	ffff0000 	.word	0xffff0000
 8000a50:	51008108 	.word	0x51008108

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a5a:	e003      	b.n	8000a64 <LoopCopyDataInit>

08000a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a62:	3104      	adds	r1, #4

08000a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a6c:	d3f6      	bcc.n	8000a5c <CopyDataInit>
  ldr  r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a70:	e002      	b.n	8000a78 <LoopFillZerobss>

08000a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a74:	f842 3b04 	str.w	r3, [r2], #4

08000a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a7c:	d3f9      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ff87 	bl	8000990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f009 fb5b 	bl	800a13c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fc27 	bl	80002d8 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a8c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000a90:	0800a3a0 	.word	0x0800a3a0
  ldr  r0, =_sdata
 8000a94:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000a98:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 8000a9c:	240001e4 	.word	0x240001e4
  ldr  r3, = _ebss
 8000aa0:	24001a48 	.word	0x24001a48

08000aa4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC3_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f001 fde4 	bl	800267c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ab4:	f003 ff86 	bl	80049c4 <HAL_RCC_GetSysClockFreq>
 8000ab8:	4601      	mov	r1, r0
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_Init+0x68>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	f003 030f 	and.w	r3, r3, #15
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <HAL_Init+0x6c>)
 8000ac6:	5cd3      	ldrb	r3, [r2, r3]
 8000ac8:	f003 031f 	and.w	r3, r3, #31
 8000acc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_Init+0x68>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_Init+0x6c>)
 8000adc:	5cd3      	ldrb	r3, [r2, r3]
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <HAL_Init+0x70>)
 8000aea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000aec:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <HAL_Init+0x74>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 f814 	bl	8000b20 <HAL_InitTick>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e002      	b.n	8000b08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b02:	f7ff fe47 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	58024400 	.word	0x58024400
 8000b14:	0800a388 	.word	0x0800a388
 8000b18:	24000004 	.word	0x24000004
 8000b1c:	24000000 	.word	0x24000000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_InitTick+0x60>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e021      	b.n	8000b78 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_InitTick+0x64>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_InitTick+0x60>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fdc9 	bl	80026e2 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f001 fd93 	bl	8002692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x68>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2400000c 	.word	0x2400000c
 8000b84:	24000000 	.word	0x24000000
 8000b88:	24000008 	.word	0x24000008

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2400000c 	.word	0x2400000c
 8000bb0:	24000274 	.word	0x24000274

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	24000274 	.word	0x24000274

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_Delay+0x40>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2400000c 	.word	0x2400000c

08000c10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetREVID+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	0c1b      	lsrs	r3, r3, #16
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	5c001000 	.word	0x5c001000

08000c28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	609a      	str	r2, [r3, #8]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	609a      	str	r2, [r3, #8]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c90:	b490      	push	{r4, r7}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3360      	adds	r3, #96	; 0x60
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc90      	pop	{r4, r7}
 8000cc8:	4770      	bx	lr

08000cca <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b085      	sub	sp, #20
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f003 031f 	and.w	r3, r3, #31
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	431a      	orrs	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	611a      	str	r2, [r3, #16]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000cfc:	b490      	push	{r4, r7}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3360      	adds	r3, #96	; 0x60
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	6023      	str	r3, [r4, #0]
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc90      	pop	{r4, r7}
 8000d2a:	4770      	bx	lr

08000d2c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d40:	2301      	movs	r3, #1
 8000d42:	e000      	b.n	8000d46 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d52:	b490      	push	{r4, r7}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3330      	adds	r3, #48	; 0x30
 8000d62:	461a      	mov	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	4413      	add	r3, r2
 8000d70:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000d72:	6822      	ldr	r2, [r4, #0]
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	f003 031f 	and.w	r3, r3, #31
 8000d7a:	211f      	movs	r1, #31
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	401a      	ands	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	0e9b      	lsrs	r3, r3, #26
 8000d88:	f003 011f 	and.w	r1, r3, #31
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	f003 031f 	and.w	r3, r3, #31
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc90      	pop	{r4, r7}
 8000da2:	4770      	bx	lr

08000da4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000da4:	b490      	push	{r4, r7}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3314      	adds	r3, #20
 8000db4:	461a      	mov	r2, r3
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	0e5b      	lsrs	r3, r3, #25
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	4413      	add	r3, r2
 8000dc2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000dc4:	6822      	ldr	r2, [r4, #0]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	0d1b      	lsrs	r3, r3, #20
 8000dca:	f003 031f 	and.w	r3, r3, #31
 8000dce:	2107      	movs	r1, #7
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	0d1b      	lsrs	r3, r3, #20
 8000ddc:	f003 031f 	and.w	r3, r3, #31
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc90      	pop	{r4, r7}
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	401a      	ands	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0318 	and.w	r3, r3, #24
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e18:	40d9      	lsrs	r1, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e22:	431a      	orrs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	000fffff 	.word	0x000fffff

08000e3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 031f 	and.w	r3, r3, #31
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6093      	str	r3, [r2, #8]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	5fffffc0 	.word	0x5fffffc0

08000e98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000eac:	d101      	bne.n	8000eb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	6fffffc0 	.word	0x6fffffc0

08000ee8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000efc:	d101      	bne.n	8000f02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <LL_ADC_Enable+0x24>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	f043 0201 	orr.w	r2, r3, #1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	7fffffc0 	.word	0x7fffffc0

08000f38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <LL_ADC_Disable+0x24>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	f043 0202 	orr.w	r2, r3, #2
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	7fffffc0 	.word	0x7fffffc0

08000f60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <LL_ADC_IsEnabled+0x18>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <LL_ADC_IsEnabled+0x1a>
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d101      	bne.n	8000f9e <LL_ADC_IsDisableOngoing+0x18>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <LL_ADC_IsDisableOngoing+0x1a>
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <LL_ADC_REG_StartConversion+0x24>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	f043 0204 	orr.w	r2, r3, #4
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	7fffffc0 	.word	0x7fffffc0

08000fd4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <LL_ADC_REG_StopConversion+0x24>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	f043 0210 	orr.w	r2, r3, #16
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	7fffffc0 	.word	0x7fffffc0

08000ffc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b04      	cmp	r3, #4
 800100e:	d101      	bne.n	8001014 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <LL_ADC_INJ_StopConversion+0x24>)
 8001032:	4013      	ands	r3, r2
 8001034:	f043 0220 	orr.w	r2, r3, #32
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	7fffffc0 	.word	0x7fffffc0

0800104c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b08      	cmp	r3, #8
 800105e:	d101      	bne.n	8001064 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e18e      	b.n	80013ac <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001098:	2b00      	cmp	r3, #0
 800109a:	d109      	bne.n	80010b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fb93 	bl	80007c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff feef 	bl	8000e98 <LL_ADC_IsDeepPowerDownEnabled>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fed5 	bl	8000e74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff0a 	bl	8000ee8 <LL_ADC_IsInternalRegulatorEnabled>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d113      	bne.n	8001102 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff feee 	bl	8000ec0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80010e4:	4b9a      	ldr	r3, [pc, #616]	; (8001350 <HAL_ADC_Init+0x2dc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	099b      	lsrs	r3, r3, #6
 80010ea:	4a9a      	ldr	r2, [pc, #616]	; (8001354 <HAL_ADC_Init+0x2e0>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	099b      	lsrs	r3, r3, #6
 80010f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010f4:	e002      	b.n	80010fc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f9      	bne.n	80010f6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff feee 	bl	8000ee8 <LL_ADC_IsInternalRegulatorEnabled>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10d      	bne.n	800112e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001116:	f043 0210 	orr.w	r2, r3, #16
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff62 	bl	8000ffc <LL_ADC_REG_IsConversionOngoing>
 8001138:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	f040 8129 	bne.w	800139a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 8125 	bne.w	800139a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001154:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001158:	f043 0202 	orr.w	r2, r3, #2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fefb 	bl	8000f60 <LL_ADC_IsEnabled>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d136      	bne.n	80011de <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a78      	ldr	r2, [pc, #480]	; (8001358 <HAL_ADC_Init+0x2e4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d004      	beq.n	8001184 <HAL_ADC_Init+0x110>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a77      	ldr	r2, [pc, #476]	; (800135c <HAL_ADC_Init+0x2e8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d10e      	bne.n	80011a2 <HAL_ADC_Init+0x12e>
 8001184:	4874      	ldr	r0, [pc, #464]	; (8001358 <HAL_ADC_Init+0x2e4>)
 8001186:	f7ff feeb 	bl	8000f60 <LL_ADC_IsEnabled>
 800118a:	4604      	mov	r4, r0
 800118c:	4873      	ldr	r0, [pc, #460]	; (800135c <HAL_ADC_Init+0x2e8>)
 800118e:	f7ff fee7 	bl	8000f60 <LL_ADC_IsEnabled>
 8001192:	4603      	mov	r3, r0
 8001194:	4323      	orrs	r3, r4
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf0c      	ite	eq
 800119a:	2301      	moveq	r3, #1
 800119c:	2300      	movne	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	e008      	b.n	80011b4 <HAL_ADC_Init+0x140>
 80011a2:	486f      	ldr	r0, [pc, #444]	; (8001360 <HAL_ADC_Init+0x2ec>)
 80011a4:	f7ff fedc 	bl	8000f60 <LL_ADC_IsEnabled>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d012      	beq.n	80011de <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a66      	ldr	r2, [pc, #408]	; (8001358 <HAL_ADC_Init+0x2e4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d004      	beq.n	80011cc <HAL_ADC_Init+0x158>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a65      	ldr	r2, [pc, #404]	; (800135c <HAL_ADC_Init+0x2e8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d101      	bne.n	80011d0 <HAL_ADC_Init+0x15c>
 80011cc:	4a65      	ldr	r2, [pc, #404]	; (8001364 <HAL_ADC_Init+0x2f0>)
 80011ce:	e000      	b.n	80011d2 <HAL_ADC_Init+0x15e>
 80011d0:	4a65      	ldr	r2, [pc, #404]	; (8001368 <HAL_ADC_Init+0x2f4>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4610      	mov	r0, r2
 80011da:	f7ff fd25 	bl	8000c28 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80011de:	f7ff fd17 	bl	8000c10 <HAL_GetREVID>
 80011e2:	4602      	mov	r2, r0
 80011e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d914      	bls.n	8001216 <HAL_ADC_Init+0x1a2>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d110      	bne.n	8001216 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7d5b      	ldrb	r3, [r3, #21]
 80011f8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80011fe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001204:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7f1b      	ldrb	r3, [r3, #28]
 800120a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800120c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800120e:	f043 030c 	orr.w	r3, r3, #12
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	e00d      	b.n	8001232 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7d5b      	ldrb	r3, [r3, #21]
 800121a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001220:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001226:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7f1b      	ldrb	r3, [r3, #28]
 800122c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7f1b      	ldrb	r3, [r3, #28]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d106      	bne.n	8001248 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	3b01      	subs	r3, #1
 8001240:	045b      	lsls	r3, r3, #17
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	2b00      	cmp	r3, #0
 800124e:	d009      	beq.n	8001264 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	4b40      	ldr	r3, [pc, #256]	; (800136c <HAL_ADC_Init+0x2f8>)
 800126c:	4013      	ands	r3, r2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	69b9      	ldr	r1, [r7, #24]
 8001274:	430b      	orrs	r3, r1
 8001276:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff febd 	bl	8000ffc <LL_ADC_REG_IsConversionOngoing>
 8001282:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fedf 	bl	800104c <LL_ADC_INJ_IsConversionOngoing>
 800128e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d14a      	bne.n	800132c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d147      	bne.n	800132c <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7d1b      	ldrb	r3, [r3, #20]
 80012a0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_ADC_Init+0x2fc>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	69b9      	ldr	r1, [r7, #24]
 80012ba:	430b      	orrs	r3, r1
 80012bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d11b      	bne.n	8001300 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_ADC_Init+0x300>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012dc:	3a01      	subs	r2, #1
 80012de:	0411      	lsls	r1, r2, #16
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012e4:	4311      	orrs	r1, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012ea:	4311      	orrs	r1, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012f0:	430a      	orrs	r2, r1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0201 	orr.w	r2, r2, #1
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	e007      	b.n	8001310 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fee0 	bl	80020ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d121      	bne.n	8001378 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f023 010f 	bic.w	r1, r3, #15
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	1e5a      	subs	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	631a      	str	r2, [r3, #48]	; 0x30
 800134c:	e01c      	b.n	8001388 <HAL_ADC_Init+0x314>
 800134e:	bf00      	nop
 8001350:	24000000 	.word	0x24000000
 8001354:	053e2d63 	.word	0x053e2d63
 8001358:	40022000 	.word	0x40022000
 800135c:	40022100 	.word	0x40022100
 8001360:	58026000 	.word	0x58026000
 8001364:	40022300 	.word	0x40022300
 8001368:	58026300 	.word	0x58026300
 800136c:	fff0c003 	.word	0xfff0c003
 8001370:	ffffbffc 	.word	0xffffbffc
 8001374:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 020f 	bic.w	r2, r2, #15
 8001386:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	f023 0303 	bic.w	r3, r3, #3
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	655a      	str	r2, [r3, #84]	; 0x54
 8001398:	e007      	b.n	80013aa <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139e:	f043 0210 	orr.w	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3724      	adds	r7, #36	; 0x24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}

080013b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a5c      	ldr	r2, [pc, #368]	; (8001534 <HAL_ADC_Start+0x180>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d004      	beq.n	80013d0 <HAL_ADC_Start+0x1c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a5b      	ldr	r2, [pc, #364]	; (8001538 <HAL_ADC_Start+0x184>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d101      	bne.n	80013d4 <HAL_ADC_Start+0x20>
 80013d0:	4b5a      	ldr	r3, [pc, #360]	; (800153c <HAL_ADC_Start+0x188>)
 80013d2:	e000      	b.n	80013d6 <HAL_ADC_Start+0x22>
 80013d4:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <HAL_ADC_Start+0x18c>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fd30 	bl	8000e3c <LL_ADC_GetMultimode>
 80013dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fe0a 	bl	8000ffc <LL_ADC_REG_IsConversionOngoing>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 809a 	bne.w	8001524 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_Start+0x4a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e095      	b.n	800152a <HAL_ADC_Start+0x176>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fd94 	bl	8001f34 <ADC_Enable>
 800140c:	4603      	mov	r3, r0
 800140e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 8081 	bne.w	800151a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800141c:	4b49      	ldr	r3, [pc, #292]	; (8001544 <HAL_ADC_Start+0x190>)
 800141e:	4013      	ands	r3, r2
 8001420:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a42      	ldr	r2, [pc, #264]	; (8001538 <HAL_ADC_Start+0x184>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d002      	beq.n	8001438 <HAL_ADC_Start+0x84>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	e000      	b.n	800143a <HAL_ADC_Start+0x86>
 8001438:	4b3e      	ldr	r3, [pc, #248]	; (8001534 <HAL_ADC_Start+0x180>)
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	4293      	cmp	r3, r2
 8001440:	d002      	beq.n	8001448 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d105      	bne.n	8001454 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001460:	d106      	bne.n	8001470 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	f023 0206 	bic.w	r2, r3, #6
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	659a      	str	r2, [r3, #88]	; 0x58
 800146e:	e002      	b.n	8001476 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	221c      	movs	r2, #28
 800147c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <HAL_ADC_Start+0x184>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d002      	beq.n	8001496 <HAL_ADC_Start+0xe2>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	e000      	b.n	8001498 <HAL_ADC_Start+0xe4>
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_ADC_Start+0x180>)
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	4293      	cmp	r3, r2
 800149e:	d008      	beq.n	80014b2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d002      	beq.n	80014b2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	2b09      	cmp	r3, #9
 80014b0:	d114      	bne.n	80014dc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fd69 	bl	8000fac <LL_ADC_REG_StartConversion>
 80014da:	e025      	b.n	8001528 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a12      	ldr	r2, [pc, #72]	; (8001538 <HAL_ADC_Start+0x184>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d002      	beq.n	80014f8 <HAL_ADC_Start+0x144>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	e000      	b.n	80014fa <HAL_ADC_Start+0x146>
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_ADC_Start+0x180>)
 80014fa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00f      	beq.n	8001528 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001510:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
 8001518:	e006      	b.n	8001528 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001522:	e001      	b.n	8001528 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001524:	2302      	movs	r3, #2
 8001526:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001528:	7dfb      	ldrb	r3, [r7, #23]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000
 8001538:	40022100 	.word	0x40022100
 800153c:	40022300 	.word	0x40022300
 8001540:	58026300 	.word	0x58026300
 8001544:	fffff0fe 	.word	0xfffff0fe

08001548 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_ADC_Stop+0x16>
 800155a:	2302      	movs	r3, #2
 800155c:	e021      	b.n	80015a2 <HAL_ADC_Stop+0x5a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001566:	2103      	movs	r1, #3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fc2f 	bl	8001dcc <ADC_ConversionStop>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10f      	bne.n	8001598 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 fd5f 	bl	800203c <ADC_Disable>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d107      	bne.n	8001598 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_ADC_Stop+0x64>)
 800158e:	4013      	ands	r3, r2
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	ffffeefe 	.word	0xffffeefe

080015b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a6e      	ldr	r2, [pc, #440]	; (8001778 <HAL_ADC_PollForConversion+0x1c8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d004      	beq.n	80015ce <HAL_ADC_PollForConversion+0x1e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6c      	ldr	r2, [pc, #432]	; (800177c <HAL_ADC_PollForConversion+0x1cc>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_PollForConversion+0x22>
 80015ce:	4b6c      	ldr	r3, [pc, #432]	; (8001780 <HAL_ADC_PollForConversion+0x1d0>)
 80015d0:	e000      	b.n	80015d4 <HAL_ADC_PollForConversion+0x24>
 80015d2:	4b6c      	ldr	r3, [pc, #432]	; (8001784 <HAL_ADC_PollForConversion+0x1d4>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fc31 	bl	8000e3c <LL_ADC_GetMultimode>
 80015da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d102      	bne.n	80015ea <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015e4:	2308      	movs	r3, #8
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	e037      	b.n	800165a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d002      	beq.n	80015fc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b09      	cmp	r3, #9
 80015fa:	d111      	bne.n	8001620 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f043 0220 	orr.w	r2, r3, #32
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0aa      	b.n	8001770 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800161a:	2304      	movs	r3, #4
 800161c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800161e:	e01c      	b.n	800165a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a54      	ldr	r2, [pc, #336]	; (8001778 <HAL_ADC_PollForConversion+0x1c8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d004      	beq.n	8001634 <HAL_ADC_PollForConversion+0x84>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a53      	ldr	r2, [pc, #332]	; (800177c <HAL_ADC_PollForConversion+0x1cc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_ADC_PollForConversion+0x88>
 8001634:	4b52      	ldr	r3, [pc, #328]	; (8001780 <HAL_ADC_PollForConversion+0x1d0>)
 8001636:	e000      	b.n	800163a <HAL_ADC_PollForConversion+0x8a>
 8001638:	4b52      	ldr	r3, [pc, #328]	; (8001784 <HAL_ADC_PollForConversion+0x1d4>)
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fc0c 	bl	8000e58 <LL_ADC_GetMultiDMATransfer>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	f043 0220 	orr.w	r2, r3, #32
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e08c      	b.n	8001770 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001656:	2304      	movs	r3, #4
 8001658:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800165a:	f7ff faab 	bl	8000bb4 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001660:	e01a      	b.n	8001698 <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d016      	beq.n	8001698 <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800166a:	f7ff faa3 	bl	8000bb4 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d302      	bcc.n	8001680 <HAL_ADC_PollForConversion+0xd0>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10b      	bne.n	8001698 <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	f043 0204 	orr.w	r2, r3, #4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e06b      	b.n	8001770 <HAL_ADC_PollForConversion+0x1c0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0dd      	beq.n	8001662 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fb38 	bl	8000d2c <LL_ADC_REG_IsTriggerSourceSWStart>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d01c      	beq.n	80016fc <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7d5b      	ldrb	r3, [r3, #21]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d111      	bne.n	80016fc <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1e      	ldr	r2, [pc, #120]	; (800177c <HAL_ADC_PollForConversion+0x1cc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d002      	beq.n	800170c <HAL_ADC_PollForConversion+0x15c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	e000      	b.n	800170e <HAL_ADC_PollForConversion+0x15e>
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_ADC_PollForConversion+0x1c8>)
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	4293      	cmp	r3, r2
 8001714:	d008      	beq.n	8001728 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d002      	beq.n	8001728 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b09      	cmp	r3, #9
 8001726:	d104      	bne.n	8001732 <HAL_ADC_PollForConversion+0x182>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	e00c      	b.n	800174c <HAL_ADC_PollForConversion+0x19c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a11      	ldr	r2, [pc, #68]	; (800177c <HAL_ADC_PollForConversion+0x1cc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d002      	beq.n	8001742 <HAL_ADC_PollForConversion+0x192>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	e000      	b.n	8001744 <HAL_ADC_PollForConversion+0x194>
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_ADC_PollForConversion+0x1c8>)
 8001744:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b08      	cmp	r3, #8
 8001750:	d104      	bne.n	800175c <HAL_ADC_PollForConversion+0x1ac>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2208      	movs	r2, #8
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e008      	b.n	800176e <HAL_ADC_PollForConversion+0x1be>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <HAL_ADC_PollForConversion+0x1be>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40022000 	.word	0x40022000
 800177c:	40022100 	.word	0x40022100
 8001780:	40022300 	.word	0x40022300
 8001784:	58026300 	.word	0x58026300

08001788 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b099      	sub	sp, #100	; 0x64
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a99      	ldr	r2, [pc, #612]	; (8001a24 <HAL_ADC_ConfigChannel+0x280>)
 80017be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x2a>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e2e6      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x5f8>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fc0e 	bl	8000ffc <LL_ADC_REG_IsConversionOngoing>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 82cb 	bne.w	8001d7e <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d108      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x62>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0e9b      	lsrs	r3, r3, #26
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	2201      	movs	r2, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	e00f      	b.n	8001826 <HAL_ADC_ConfigChannel+0x82>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f003 031f 	and.w	r3, r3, #31
 8001820:	2201      	movs	r2, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	69d1      	ldr	r1, [r2, #28]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	430b      	orrs	r3, r1
 8001832:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	f7ff fa86 	bl	8000d52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fbd6 	bl	8000ffc <LL_ADC_REG_IsConversionOngoing>
 8001850:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fbf8 	bl	800104c <LL_ADC_INJ_IsConversionOngoing>
 800185c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800185e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001860:	2b00      	cmp	r3, #0
 8001862:	f040 80b3 	bne.w	80019cc <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001868:	2b00      	cmp	r3, #0
 800186a:	f040 80af 	bne.w	80019cc <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	461a      	mov	r2, r3
 800187c:	f7ff fa92 	bl	8000da4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001880:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <HAL_ADC_ConfigChannel+0x284>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800188c:	d10b      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x102>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	e01d      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x13e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10b      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x128>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	e00a      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x13e>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d027      	beq.n	800193c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	6919      	ldr	r1, [r3, #16]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018fa:	f7ff f9c9 	bl	8000c90 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	6919      	ldr	r1, [r3, #16]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	7e5b      	ldrb	r3, [r3, #25]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x170>
 800190e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001912:	e000      	b.n	8001916 <HAL_ADC_ConfigChannel+0x172>
 8001914:	2300      	movs	r3, #0
 8001916:	461a      	mov	r2, r3
 8001918:	f7ff f9f0 	bl	8000cfc <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6919      	ldr	r1, [r3, #16]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	7e1b      	ldrb	r3, [r3, #24]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d102      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x18e>
 800192c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001930:	e000      	b.n	8001934 <HAL_ADC_ConfigChannel+0x190>
 8001932:	2300      	movs	r3, #0
 8001934:	461a      	mov	r2, r3
 8001936:	f7ff f9c8 	bl	8000cca <LL_ADC_SetDataRightShift>
 800193a:	e047      	b.n	80019cc <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	069b      	lsls	r3, r3, #26
 800194c:	429a      	cmp	r2, r3
 800194e:	d107      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800195e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	069b      	lsls	r3, r3, #26
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001982:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800198a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	069b      	lsls	r3, r3, #26
 8001994:	429a      	cmp	r2, r3
 8001996:	d107      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019a6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	069b      	lsls	r3, r3, #26
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d107      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fac5 	bl	8000f60 <LL_ADC_IsEnabled>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 81d9 	bne.w	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6819      	ldr	r1, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	461a      	mov	r2, r3
 80019ec:	f7ff fa02 	bl	8000df4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <HAL_ADC_ConfigChannel+0x280>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	f040 8101 	bne.w	8001bfe <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10f      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x288>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0e9b      	lsrs	r3, r3, #26
 8001a12:	3301      	adds	r3, #1
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	bf94      	ite	ls
 8001a1c:	2301      	movls	r3, #1
 8001a1e:	2300      	movhi	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	e016      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x2ae>
 8001a24:	47ff0000 	.word	0x47ff0000
 8001a28:	5c001000 	.word	0x5c001000
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2b09      	cmp	r3, #9
 8001a4a:	bf94      	ite	ls
 8001a4c:	2301      	movls	r3, #1
 8001a4e:	2300      	movhi	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d064      	beq.n	8001b20 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x2ce>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	3301      	adds	r3, #1
 8001a6a:	069b      	lsls	r3, r3, #26
 8001a6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a70:	e00e      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x2ec>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	069b      	lsls	r3, r3, #26
 8001a8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x30c>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0e9b      	lsrs	r3, r3, #26
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	e010      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x32e>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2101      	movs	r1, #1
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	ea42 0103 	orr.w	r1, r2, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x354>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0e9b      	lsrs	r3, r3, #26
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f003 021f 	and.w	r2, r3, #31
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	051b      	lsls	r3, r3, #20
 8001af6:	e011      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x378>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	e069      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x398>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0e9b      	lsrs	r3, r3, #26
 8001b32:	3301      	adds	r3, #1
 8001b34:	069b      	lsls	r3, r3, #26
 8001b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3a:	e00e      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x3b6>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	61fb      	str	r3, [r7, #28]
  return result;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	069b      	lsls	r3, r3, #26
 8001b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x3d6>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	0e9b      	lsrs	r3, r3, #26
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	2101      	movs	r1, #1
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	e010      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x3f8>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	617b      	str	r3, [r7, #20]
  return result;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x424>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0e9b      	lsrs	r3, r3, #26
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b1e      	subs	r3, #30
 8001bc0:	051b      	lsls	r3, r3, #20
 8001bc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	e014      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x44e>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	60fb      	str	r3, [r7, #12]
  return result;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	3301      	adds	r3, #1
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	3b1e      	subs	r3, #30
 8001bec:	051b      	lsls	r3, r3, #20
 8001bee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	6892      	ldr	r2, [r2, #8]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f7ff f8d3 	bl	8000da4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f280 80c4 	bge.w	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a65      	ldr	r2, [pc, #404]	; (8001da4 <HAL_ADC_ConfigChannel+0x600>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x478>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a64      	ldr	r2, [pc, #400]	; (8001da8 <HAL_ADC_ConfigChannel+0x604>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x47c>
 8001c1c:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_ADC_ConfigChannel+0x608>)
 8001c1e:	e000      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x47e>
 8001c20:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_ADC_ConfigChannel+0x60c>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f826 	bl	8000c74 <LL_ADC_GetCommonPathInternalCh>
 8001c28:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <HAL_ADC_ConfigChannel+0x600>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d004      	beq.n	8001c3e <HAL_ADC_ConfigChannel+0x49a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a5b      	ldr	r2, [pc, #364]	; (8001da8 <HAL_ADC_ConfigChannel+0x604>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10e      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x4b8>
 8001c3e:	4859      	ldr	r0, [pc, #356]	; (8001da4 <HAL_ADC_ConfigChannel+0x600>)
 8001c40:	f7ff f98e 	bl	8000f60 <LL_ADC_IsEnabled>
 8001c44:	4604      	mov	r4, r0
 8001c46:	4858      	ldr	r0, [pc, #352]	; (8001da8 <HAL_ADC_ConfigChannel+0x604>)
 8001c48:	f7ff f98a 	bl	8000f60 <LL_ADC_IsEnabled>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4323      	orrs	r3, r4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	e008      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x4ca>
 8001c5c:	4855      	ldr	r0, [pc, #340]	; (8001db4 <HAL_ADC_ConfigChannel+0x610>)
 8001c5e:	f7ff f97f 	bl	8000f60 <LL_ADC_IsEnabled>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d07b      	beq.n	8001d6a <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a50      	ldr	r2, [pc, #320]	; (8001db8 <HAL_ADC_ConfigChannel+0x614>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d12e      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x536>
 8001c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d129      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a4a      	ldr	r2, [pc, #296]	; (8001db4 <HAL_ADC_ConfigChannel+0x610>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d17f      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a43      	ldr	r2, [pc, #268]	; (8001da4 <HAL_ADC_ConfigChannel+0x600>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d004      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x500>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <HAL_ADC_ConfigChannel+0x604>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x504>
 8001ca4:	4a41      	ldr	r2, [pc, #260]	; (8001dac <HAL_ADC_ConfigChannel+0x608>)
 8001ca6:	e000      	b.n	8001caa <HAL_ADC_ConfigChannel+0x506>
 8001ca8:	4a41      	ldr	r2, [pc, #260]	; (8001db0 <HAL_ADC_ConfigChannel+0x60c>)
 8001caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f7fe ffcb 	bl	8000c4e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001cb8:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <HAL_ADC_ConfigChannel+0x618>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	099b      	lsrs	r3, r3, #6
 8001cbe:	4a40      	ldr	r2, [pc, #256]	; (8001dc0 <HAL_ADC_ConfigChannel+0x61c>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001cca:	e002      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f9      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cd8:	e05a      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a39      	ldr	r2, [pc, #228]	; (8001dc4 <HAL_ADC_ConfigChannel+0x620>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d11e      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x57e>
 8001ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d119      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a30      	ldr	r2, [pc, #192]	; (8001db4 <HAL_ADC_ConfigChannel+0x610>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d14b      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a29      	ldr	r2, [pc, #164]	; (8001da4 <HAL_ADC_ConfigChannel+0x600>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_ADC_ConfigChannel+0x568>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <HAL_ADC_ConfigChannel+0x604>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x56c>
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <HAL_ADC_ConfigChannel+0x608>)
 8001d0e:	e000      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x56e>
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <HAL_ADC_ConfigChannel+0x60c>)
 8001d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f7fe ff97 	bl	8000c4e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d20:	e036      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a28      	ldr	r2, [pc, #160]	; (8001dc8 <HAL_ADC_ConfigChannel+0x624>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d131      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
 8001d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d12c      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <HAL_ADC_ConfigChannel+0x610>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d127      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_ADC_ConfigChannel+0x600>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_ADC_ConfigChannel+0x5b0>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <HAL_ADC_ConfigChannel+0x604>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x5b4>
 8001d54:	4a15      	ldr	r2, [pc, #84]	; (8001dac <HAL_ADC_ConfigChannel+0x608>)
 8001d56:	e000      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x5b6>
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <HAL_ADC_ConfigChannel+0x60c>)
 8001d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d60:	4619      	mov	r1, r3
 8001d62:	4610      	mov	r0, r2
 8001d64:	f7fe ff73 	bl	8000c4e <LL_ADC_SetCommonPathInternalCh>
 8001d68:	e012      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f043 0220 	orr.w	r2, r3, #32
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d7c:	e008      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f043 0220 	orr.w	r2, r3, #32
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3764      	adds	r7, #100	; 0x64
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40022100 	.word	0x40022100
 8001dac:	40022300 	.word	0x40022300
 8001db0:	58026300 	.word	0x58026300
 8001db4:	58026000 	.word	0x58026000
 8001db8:	cb840000 	.word	0xcb840000
 8001dbc:	24000000 	.word	0x24000000
 8001dc0:	053e2d63 	.word	0x053e2d63
 8001dc4:	c7520000 	.word	0xc7520000
 8001dc8:	cfb80000 	.word	0xcfb80000

08001dcc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f90a 	bl	8000ffc <LL_ADC_REG_IsConversionOngoing>
 8001de8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f92c 	bl	800104c <LL_ADC_INJ_IsConversionOngoing>
 8001df4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d103      	bne.n	8001e04 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8090 	beq.w	8001f24 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d02a      	beq.n	8001e68 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7d5b      	ldrb	r3, [r3, #21]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d126      	bne.n	8001e68 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7d1b      	ldrb	r3, [r3, #20]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d122      	bne.n	8001e68 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e26:	e014      	b.n	8001e52 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4a41      	ldr	r2, [pc, #260]	; (8001f30 <ADC_ConversionStop+0x164>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d90d      	bls.n	8001e4c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	f043 0210 	orr.w	r2, r3, #16
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e06c      	b.n	8001f26 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d1e3      	bne.n	8001e28 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2240      	movs	r2, #64	; 0x40
 8001e66:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d014      	beq.n	8001e98 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f8c2 	bl	8000ffc <LL_ADC_REG_IsConversionOngoing>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00c      	beq.n	8001e98 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff f87f 	bl	8000f86 <LL_ADC_IsDisableOngoing>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d104      	bne.n	8001e98 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f89e 	bl	8000fd4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d014      	beq.n	8001ec8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f8d2 	bl	800104c <LL_ADC_INJ_IsConversionOngoing>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00c      	beq.n	8001ec8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f867 	bl	8000f86 <LL_ADC_IsDisableOngoing>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f8ae 	bl	8001024 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d004      	beq.n	8001ed8 <ADC_ConversionStop+0x10c>
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d105      	bne.n	8001ede <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	617b      	str	r3, [r7, #20]
        break;
 8001ed6:	e005      	b.n	8001ee4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	617b      	str	r3, [r7, #20]
        break;
 8001edc:	e002      	b.n	8001ee4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	617b      	str	r3, [r7, #20]
        break;
 8001ee2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001ee4:	f7fe fe66 	bl	8000bb4 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001eea:	e014      	b.n	8001f16 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001eec:	f7fe fe62 	bl	8000bb4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d90d      	bls.n	8001f16 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	f043 0210 	orr.w	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e007      	b.n	8001f26 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e3      	bne.n	8001eec <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	000cdbff 	.word	0x000cdbff

08001f34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f80d 	bl	8000f60 <LL_ADC_IsEnabled>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d167      	bne.n	800201c <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <ADC_Enable+0xf4>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00d      	beq.n	8001f76 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	f043 0210 	orr.w	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e053      	b.n	800201e <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe ffc8 	bl	8000f10 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f80:	f7fe fe18 	bl	8000bb4 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a28      	ldr	r2, [pc, #160]	; (800202c <ADC_Enable+0xf8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d004      	beq.n	8001f9a <ADC_Enable+0x66>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <ADC_Enable+0xfc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <ADC_Enable+0x6a>
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <ADC_Enable+0x100>)
 8001f9c:	e000      	b.n	8001fa0 <ADC_Enable+0x6c>
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <ADC_Enable+0x104>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe ff4b 	bl	8000e3c <LL_ADC_GetMultimode>
 8001fa6:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a20      	ldr	r2, [pc, #128]	; (8002030 <ADC_Enable+0xfc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d002      	beq.n	8001fb8 <ADC_Enable+0x84>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e000      	b.n	8001fba <ADC_Enable+0x86>
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <ADC_Enable+0xf8>)
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d025      	beq.n	800200e <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d129      	bne.n	800201c <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fc8:	e021      	b.n	800200e <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe ffc6 	bl	8000f60 <LL_ADC_IsEnabled>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d104      	bne.n	8001fe4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ff96 	bl	8000f10 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fe4:	f7fe fde6 	bl	8000bb4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d90d      	bls.n	800200e <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f043 0210 	orr.w	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e007      	b.n	800201e <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d1d6      	bne.n	8001fca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	8000003f 	.word	0x8000003f
 800202c:	40022000 	.word	0x40022000
 8002030:	40022100 	.word	0x40022100
 8002034:	40022300 	.word	0x40022300
 8002038:	58026300 	.word	0x58026300

0800203c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe ff9c 	bl	8000f86 <LL_ADC_IsDisableOngoing>
 800204e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe ff83 	bl	8000f60 <LL_ADC_IsEnabled>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d040      	beq.n	80020e2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d13d      	bne.n	80020e2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030d 	and.w	r3, r3, #13
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10c      	bne.n	800208e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe ff5d 	bl	8000f38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2203      	movs	r2, #3
 8002084:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002086:	f7fe fd95 	bl	8000bb4 <HAL_GetTick>
 800208a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800208c:	e022      	b.n	80020d4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e01c      	b.n	80020e4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020aa:	f7fe fd83 	bl	8000bb4 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d90d      	bls.n	80020d4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f043 0210 	orr.w	r2, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e007      	b.n	80020e4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1e3      	bne.n	80020aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a70      	ldr	r2, [pc, #448]	; (80022bc <ADC_ConfigureBoostMode+0x1d0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d004      	beq.n	8002108 <ADC_ConfigureBoostMode+0x1c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6f      	ldr	r2, [pc, #444]	; (80022c0 <ADC_ConfigureBoostMode+0x1d4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d109      	bne.n	800211c <ADC_ConfigureBoostMode+0x30>
 8002108:	4b6e      	ldr	r3, [pc, #440]	; (80022c4 <ADC_ConfigureBoostMode+0x1d8>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf14      	ite	ne
 8002114:	2301      	movne	r3, #1
 8002116:	2300      	moveq	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	e008      	b.n	800212e <ADC_ConfigureBoostMode+0x42>
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <ADC_ConfigureBoostMode+0x1dc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf14      	ite	ne
 8002128:	2301      	movne	r3, #1
 800212a:	2300      	moveq	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01a      	beq.n	8002168 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002132:	f002 fdb9 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8002136:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002140:	d006      	beq.n	8002150 <ADC_ConfigureBoostMode+0x64>
 8002142:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002146:	d00b      	beq.n	8002160 <ADC_ConfigureBoostMode+0x74>
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d000      	beq.n	8002150 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800214e:	e05d      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	60fb      	str	r3, [r7, #12]
        break;
 800215e:	e055      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	60fb      	str	r3, [r7, #12]
        break;
 8002166:	e051      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002168:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800216c:	f003 fcaa 	bl	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002170:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800217a:	d02a      	beq.n	80021d2 <ADC_ConfigureBoostMode+0xe6>
 800217c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002180:	d813      	bhi.n	80021aa <ADC_ConfigureBoostMode+0xbe>
 8002182:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002186:	d024      	beq.n	80021d2 <ADC_ConfigureBoostMode+0xe6>
 8002188:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800218c:	d806      	bhi.n	800219c <ADC_ConfigureBoostMode+0xb0>
 800218e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002192:	d01e      	beq.n	80021d2 <ADC_ConfigureBoostMode+0xe6>
 8002194:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002198:	d01b      	beq.n	80021d2 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800219a:	e037      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800219c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021a0:	d017      	beq.n	80021d2 <ADC_ConfigureBoostMode+0xe6>
 80021a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021a6:	d014      	beq.n	80021d2 <ADC_ConfigureBoostMode+0xe6>
        break;
 80021a8:	e030      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80021aa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021ae:	d021      	beq.n	80021f4 <ADC_ConfigureBoostMode+0x108>
 80021b0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021b4:	d806      	bhi.n	80021c4 <ADC_ConfigureBoostMode+0xd8>
 80021b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021ba:	d013      	beq.n	80021e4 <ADC_ConfigureBoostMode+0xf8>
 80021bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021c0:	d014      	beq.n	80021ec <ADC_ConfigureBoostMode+0x100>
        break;
 80021c2:	e023      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80021c4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021c8:	d018      	beq.n	80021fc <ADC_ConfigureBoostMode+0x110>
 80021ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021ce:	d019      	beq.n	8002204 <ADC_ConfigureBoostMode+0x118>
        break;
 80021d0:	e01c      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	0c9b      	lsrs	r3, r3, #18
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	60fb      	str	r3, [r7, #12]
        break;
 80021e2:	e013      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	60fb      	str	r3, [r7, #12]
      break;
 80021ea:	e00f      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	60fb      	str	r3, [r7, #12]
        break;
 80021f2:	e00b      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	099b      	lsrs	r3, r3, #6
 80021f8:	60fb      	str	r3, [r7, #12]
        break;
 80021fa:	e007      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	09db      	lsrs	r3, r3, #7
 8002200:	60fb      	str	r3, [r7, #12]
        break;
 8002202:	e003      	b.n	800220c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	60fb      	str	r3, [r7, #12]
        break;
 800220a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800220c:	f7fe fd00 	bl	8000c10 <HAL_GetREVID>
 8002210:	4602      	mov	r2, r0
 8002212:	f241 0303 	movw	r3, #4099	; 0x1003
 8002216:	429a      	cmp	r2, r3
 8002218:	d815      	bhi.n	8002246 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <ADC_ConfigureBoostMode+0x1e0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d908      	bls.n	8002234 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002230:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002232:	e03e      	b.n	80022b2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002242:	609a      	str	r2, [r3, #8]
}
 8002244:	e035      	b.n	80022b2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <ADC_ConfigureBoostMode+0x1e4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d808      	bhi.n	8002266 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002262:	609a      	str	r2, [r3, #8]
}
 8002264:	e025      	b.n	80022b2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <ADC_ConfigureBoostMode+0x1e8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d80a      	bhi.n	8002284 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002280:	609a      	str	r2, [r3, #8]
}
 8002282:	e016      	b.n	80022b2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <ADC_ConfigureBoostMode+0x1ec>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d80a      	bhi.n	80022a2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229e:	609a      	str	r2, [r3, #8]
}
 80022a0:	e007      	b.n	80022b2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80022b0:	609a      	str	r2, [r3, #8]
}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40022000 	.word	0x40022000
 80022c0:	40022100 	.word	0x40022100
 80022c4:	40022300 	.word	0x40022300
 80022c8:	58026300 	.word	0x58026300
 80022cc:	01312d00 	.word	0x01312d00
 80022d0:	005f5e10 	.word	0x005f5e10
 80022d4:	00bebc20 	.word	0x00bebc20
 80022d8:	017d7840 	.word	0x017d7840

080022dc <LL_ADC_IsEnabled>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <LL_ADC_IsEnabled+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_ADC_IsEnabled+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_REG_IsConversionOngoing>:
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b04      	cmp	r3, #4
 8002314:	d101      	bne.n	800231a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b09f      	sub	sp, #124	; 0x7c
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002342:	2302      	movs	r3, #2
 8002344:	e0ba      	b.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a5c      	ldr	r2, [pc, #368]	; (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d102      	bne.n	800235e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002358:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	e001      	b.n	8002362 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e09d      	b.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffbd 	bl	8002302 <LL_ADC_REG_IsConversionOngoing>
 8002388:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ffb7 	bl	8002302 <LL_ADC_REG_IsConversionOngoing>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d17f      	bne.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800239a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800239c:	2b00      	cmp	r3, #0
 800239e:	d17c      	bne.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a47      	ldr	r2, [pc, #284]	; (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d004      	beq.n	80023b4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a46      	ldr	r2, [pc, #280]	; (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80023b4:	4b45      	ldr	r3, [pc, #276]	; (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023b6:	e000      	b.n	80023ba <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80023b8:	4b45      	ldr	r3, [pc, #276]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d039      	beq.n	8002438 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80023c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d004      	beq.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a38      	ldr	r2, [pc, #224]	; (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10e      	bne.n	8002408 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80023ea:	4836      	ldr	r0, [pc, #216]	; (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80023ec:	f7ff ff76 	bl	80022dc <LL_ADC_IsEnabled>
 80023f0:	4604      	mov	r4, r0
 80023f2:	4835      	ldr	r0, [pc, #212]	; (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80023f4:	f7ff ff72 	bl	80022dc <LL_ADC_IsEnabled>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4323      	orrs	r3, r4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e008      	b.n	800241a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002408:	4832      	ldr	r0, [pc, #200]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800240a:	f7ff ff67 	bl	80022dc <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d047      	beq.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002424:	4013      	ands	r3, r2
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	6811      	ldr	r1, [r2, #0]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	6892      	ldr	r2, [r2, #8]
 800242e:	430a      	orrs	r2, r1
 8002430:	431a      	orrs	r2, r3
 8002432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002434:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002436:	e03a      	b.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d004      	beq.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d10e      	bne.n	8002476 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002458:	481a      	ldr	r0, [pc, #104]	; (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800245a:	f7ff ff3f 	bl	80022dc <LL_ADC_IsEnabled>
 800245e:	4604      	mov	r4, r0
 8002460:	4819      	ldr	r0, [pc, #100]	; (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002462:	f7ff ff3b 	bl	80022dc <LL_ADC_IsEnabled>
 8002466:	4603      	mov	r3, r0
 8002468:	4323      	orrs	r3, r4
 800246a:	2b00      	cmp	r3, #0
 800246c:	bf0c      	ite	eq
 800246e:	2301      	moveq	r3, #1
 8002470:	2300      	movne	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	e008      	b.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002476:	4817      	ldr	r0, [pc, #92]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002478:	f7ff ff30 	bl	80022dc <LL_ADC_IsEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d010      	beq.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800248c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002492:	4013      	ands	r3, r2
 8002494:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002496:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002498:	e009      	b.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	f043 0220 	orr.w	r2, r3, #32
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80024ac:	e000      	b.n	80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024ae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024bc:	4618      	mov	r0, r3
 80024be:	377c      	adds	r7, #124	; 0x7c
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40022100 	.word	0x40022100
 80024cc:	40022300 	.word	0x40022300
 80024d0:	58026300 	.word	0x58026300
 80024d4:	58026000 	.word	0x58026000
 80024d8:	fffff0e0 	.word	0xfffff0e0

080024dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <__NVIC_SetPriorityGrouping+0x40>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 8002506:	4313      	orrs	r3, r2
 8002508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250a:	4a04      	ldr	r2, [pc, #16]	; (800251c <__NVIC_SetPriorityGrouping+0x40>)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00
 8002520:	05fa0000 	.word	0x05fa0000

08002524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <__NVIC_GetPriorityGrouping+0x18>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 0307 	and.w	r3, r3, #7
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800254a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db0b      	blt.n	800256a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4907      	ldr	r1, [pc, #28]	; (8002578 <__NVIC_EnableIRQ+0x38>)
 800255a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100

0800257c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	; (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	; (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf28      	it	cs
 80025ee:	2304      	movcs	r3, #4
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b03      	subs	r3, #3
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43d9      	mvns	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	4313      	orrs	r3, r2
         );
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	; 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002648:	d301      	bcc.n	800264e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <SysTick_Config+0x40>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002656:	210f      	movs	r1, #15
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f7ff ff8e 	bl	800257c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <SysTick_Config+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <SysTick_Config+0x40>)
 8002668:	2207      	movs	r2, #7
 800266a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff29 	bl	80024dc <__NVIC_SetPriorityGrouping>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026a0:	f7ff ff40 	bl	8002524 <__NVIC_GetPriorityGrouping>
 80026a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff90 	bl	80025d0 <NVIC_EncodePriority>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff5f 	bl	800257c <__NVIC_SetPriority>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff33 	bl	8002540 <__NVIC_EnableIRQ>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffa4 	bl	8002638 <SysTick_Config>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800270a:	4b89      	ldr	r3, [pc, #548]	; (8002930 <HAL_GPIO_Init+0x234>)
 800270c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800270e:	e194      	b.n	8002a3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	2101      	movs	r1, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8186 	beq.w	8002a34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d00b      	beq.n	8002748 <HAL_GPIO_Init+0x4c>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d007      	beq.n	8002748 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800273c:	2b11      	cmp	r3, #17
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b12      	cmp	r3, #18
 8002746:	d130      	bne.n	80027aa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800277e:	2201      	movs	r2, #1
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 0201 	and.w	r2, r3, #1
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0xee>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b12      	cmp	r3, #18
 80027e8:	d123      	bne.n	8002832 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	220f      	movs	r2, #15
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	08da      	lsrs	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3208      	adds	r2, #8
 800282c:	69b9      	ldr	r1, [r7, #24]
 800282e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	2203      	movs	r2, #3
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0203 	and.w	r2, r3, #3
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80e0 	beq.w	8002a34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002874:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_GPIO_Init+0x238>)
 8002876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800287a:	4a2e      	ldr	r2, [pc, #184]	; (8002934 <HAL_GPIO_Init+0x238>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002884:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_GPIO_Init+0x238>)
 8002886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002892:	4a29      	ldr	r2, [pc, #164]	; (8002938 <HAL_GPIO_Init+0x23c>)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	220f      	movs	r2, #15
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a20      	ldr	r2, [pc, #128]	; (800293c <HAL_GPIO_Init+0x240>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d052      	beq.n	8002964 <HAL_GPIO_Init+0x268>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a1f      	ldr	r2, [pc, #124]	; (8002940 <HAL_GPIO_Init+0x244>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d031      	beq.n	800292a <HAL_GPIO_Init+0x22e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_GPIO_Init+0x248>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02b      	beq.n	8002926 <HAL_GPIO_Init+0x22a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <HAL_GPIO_Init+0x24c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d025      	beq.n	8002922 <HAL_GPIO_Init+0x226>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1c      	ldr	r2, [pc, #112]	; (800294c <HAL_GPIO_Init+0x250>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01f      	beq.n	800291e <HAL_GPIO_Init+0x222>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_GPIO_Init+0x254>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0x21e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <HAL_GPIO_Init+0x258>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x21a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a19      	ldr	r2, [pc, #100]	; (8002958 <HAL_GPIO_Init+0x25c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00d      	beq.n	8002912 <HAL_GPIO_Init+0x216>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_GPIO_Init+0x260>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <HAL_GPIO_Init+0x212>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_GPIO_Init+0x264>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_GPIO_Init+0x20e>
 8002906:	2309      	movs	r3, #9
 8002908:	e02d      	b.n	8002966 <HAL_GPIO_Init+0x26a>
 800290a:	230a      	movs	r3, #10
 800290c:	e02b      	b.n	8002966 <HAL_GPIO_Init+0x26a>
 800290e:	2308      	movs	r3, #8
 8002910:	e029      	b.n	8002966 <HAL_GPIO_Init+0x26a>
 8002912:	2307      	movs	r3, #7
 8002914:	e027      	b.n	8002966 <HAL_GPIO_Init+0x26a>
 8002916:	2306      	movs	r3, #6
 8002918:	e025      	b.n	8002966 <HAL_GPIO_Init+0x26a>
 800291a:	2305      	movs	r3, #5
 800291c:	e023      	b.n	8002966 <HAL_GPIO_Init+0x26a>
 800291e:	2304      	movs	r3, #4
 8002920:	e021      	b.n	8002966 <HAL_GPIO_Init+0x26a>
 8002922:	2303      	movs	r3, #3
 8002924:	e01f      	b.n	8002966 <HAL_GPIO_Init+0x26a>
 8002926:	2302      	movs	r3, #2
 8002928:	e01d      	b.n	8002966 <HAL_GPIO_Init+0x26a>
 800292a:	2301      	movs	r3, #1
 800292c:	e01b      	b.n	8002966 <HAL_GPIO_Init+0x26a>
 800292e:	bf00      	nop
 8002930:	58000080 	.word	0x58000080
 8002934:	58024400 	.word	0x58024400
 8002938:	58000400 	.word	0x58000400
 800293c:	58020000 	.word	0x58020000
 8002940:	58020400 	.word	0x58020400
 8002944:	58020800 	.word	0x58020800
 8002948:	58020c00 	.word	0x58020c00
 800294c:	58021000 	.word	0x58021000
 8002950:	58021400 	.word	0x58021400
 8002954:	58021800 	.word	0x58021800
 8002958:	58021c00 	.word	0x58021c00
 800295c:	58022000 	.word	0x58022000
 8002960:	58022400 	.word	0x58022400
 8002964:	2300      	movs	r3, #0
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	f002 0203 	and.w	r2, r2, #3
 800296c:	0092      	lsls	r2, r2, #2
 800296e:	4093      	lsls	r3, r2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002976:	4938      	ldr	r1, [pc, #224]	; (8002a58 <HAL_GPIO_Init+0x35c>)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3302      	adds	r3, #2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	3301      	adds	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f47f ae63 	bne.w	8002710 <HAL_GPIO_Init+0x14>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	58000400 	.word	0x58000400

08002a5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	b08f      	sub	sp, #60	; 0x3c
 8002a60:	af0a      	add	r7, sp, #40	; 0x28
 8002a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e116      	b.n	8002c9c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f007 f84f 	bl	8009b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 f8f4 	bl	8006c9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	687e      	ldr	r6, [r7, #4]
 8002aba:	466d      	mov	r5, sp
 8002abc:	f106 0410 	add.w	r4, r6, #16
 8002ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002acc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ad0:	1d33      	adds	r3, r6, #4
 8002ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad4:	6838      	ldr	r0, [r7, #0]
 8002ad6:	f003 ffcb 	bl	8006a70 <USB_CoreInit>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d7      	b.n	8002c9c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 f8e2 	bl	8006cbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	e04a      	b.n	8002b94 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	333d      	adds	r3, #61	; 0x3d
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	333c      	adds	r3, #60	; 0x3c
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	b298      	uxth	r0, r3
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3342      	adds	r3, #66	; 0x42
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	333f      	adds	r3, #63	; 0x3f
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3344      	adds	r3, #68	; 0x44
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	3348      	adds	r3, #72	; 0x48
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3350      	adds	r3, #80	; 0x50
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	3301      	adds	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d3af      	bcc.n	8002afe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	e044      	b.n	8002c2e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3b5      	bcc.n	8002ba4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	687e      	ldr	r6, [r7, #4]
 8002c40:	466d      	mov	r5, sp
 8002c42:	f106 0410 	add.w	r4, r6, #16
 8002c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c52:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c56:	1d33      	adds	r3, r6, #4
 8002c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c5a:	6838      	ldr	r0, [r7, #0]
 8002c5c:	f004 f858 	bl	8006d10 <USB_DevInit>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e014      	b.n	8002c9c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f001 f892 	bl	8003db4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 f83f 	bl	8007d18 <USB_DevDisconnect>

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ca4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_PCD_Start+0x1c>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e020      	b.n	8002d02 <HAL_PCD_Start+0x5e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d109      	bne.n	8002ce4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d005      	beq.n	8002ce4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 fffd 	bl	8007ce8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 ffc0 	bl	8006c78 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d0a:	b590      	push	{r4, r7, lr}
 8002d0c:	b08d      	sub	sp, #52	; 0x34
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f005 f8a4 	bl	8007e6e <USB_GetMode>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 83ca 	bne.w	80034c2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f005 f808 	bl	8007d48 <USB_ReadInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 83c0 	beq.w	80034c0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f004 ffff 	bl	8007d48 <USB_ReadInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d107      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f002 0202 	and.w	r2, r2, #2
 8002d62:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f004 ffed 	bl	8007d48 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d161      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0210 	bic.w	r2, r2, #16
 8002d86:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 020f 	and.w	r2, r3, #15
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	0c5b      	lsrs	r3, r3, #17
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d124      	bne.n	8002dfe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d035      	beq.n	8002e2c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6a38      	ldr	r0, [r7, #32]
 8002dd4:	f004 fe65 	bl	8007aa2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de4:	441a      	add	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df6:	441a      	add	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	619a      	str	r2, [r3, #24]
 8002dfc:	e016      	b.n	8002e2c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	0c5b      	lsrs	r3, r3, #17
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d110      	bne.n	8002e2c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e10:	2208      	movs	r2, #8
 8002e12:	4619      	mov	r1, r3
 8002e14:	6a38      	ldr	r0, [r7, #32]
 8002e16:	f004 fe44 	bl	8007aa2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e26:	441a      	add	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0210 	orr.w	r2, r2, #16
 8002e3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f004 ff81 	bl	8007d48 <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e50:	d16e      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f004 ff87 	bl	8007d6e <USB_ReadDevAllOutEpInterrupt>
 8002e60:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e62:	e062      	b.n	8002f2a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d057      	beq.n	8002f1e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f004 ffac 	bl	8007dd6 <USB_ReadDevOutEPInterrupt>
 8002e7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e96:	461a      	mov	r2, r3
 8002e98:	2301      	movs	r3, #1
 8002e9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fdde 	bl	8003a60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00c      	beq.n	8002ec8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fed8 	bl	8003c78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	2320      	movs	r3, #32
 8002efe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f16:	461a      	mov	r2, r3
 8002f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f1c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	3301      	adds	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d199      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f004 ff07 	bl	8007d48 <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f44:	f040 80c0 	bne.w	80030c8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f004 ff28 	bl	8007da2 <USB_ReadDevAllInEpInterrupt>
 8002f52:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f58:	e0b2      	b.n	80030c0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a7 	beq.w	80030b4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f004 ff4e 	bl	8007e12 <USB_ReadDevInEPInterrupt>
 8002f76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d057      	beq.n	8003032 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	2201      	movs	r2, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	69f9      	ldr	r1, [r7, #28]
 8002f9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d132      	bne.n	8003026 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	3348      	adds	r3, #72	; 0x48
 8002fd0:	6819      	ldr	r1, [r3, #0]
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4403      	add	r3, r0
 8002fe0:	3344      	adds	r3, #68	; 0x44
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4419      	add	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4403      	add	r3, r0
 8002ff4:	3348      	adds	r3, #72	; 0x48
 8002ff6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d113      	bne.n	8003026 <HAL_PCD_IRQHandler+0x31c>
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3350      	adds	r3, #80	; 0x50
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d108      	bne.n	8003026 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800301e:	461a      	mov	r2, r3
 8003020:	2101      	movs	r1, #1
 8003022:	f004 ff57 	bl	8007ed4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f006 fdfc 	bl	8009c2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003048:	461a      	mov	r2, r3
 800304a:	2308      	movs	r3, #8
 800304c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003064:	461a      	mov	r2, r3
 8003066:	2310      	movs	r3, #16
 8003068:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003080:	461a      	mov	r2, r3
 8003082:	2340      	movs	r3, #64	; 0x40
 8003084:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309c:	461a      	mov	r2, r3
 800309e:	2302      	movs	r3, #2
 80030a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fc48 	bl	8003944 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	3301      	adds	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f47f af49 	bne.w	8002f5a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 fe3b 	bl	8007d48 <USB_ReadInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030dc:	d122      	bne.n	8003124 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d108      	bne.n	800310e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003104:	2100      	movs	r1, #0
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fe78 	bl	8003dfc <HAL_PCDEx_LPM_Callback>
 800310c:	e002      	b.n	8003114 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f006 fe02 	bl	8009d18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f004 fe0d 	bl	8007d48 <USB_ReadInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003138:	d112      	bne.n	8003160 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f006 fdbe 	bl	8009ccc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800315e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f004 fdef 	bl	8007d48 <USB_ReadInterrupts>
 800316a:	4603      	mov	r3, r0
 800316c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003174:	d121      	bne.n	80031ba <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003184:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d111      	bne.n	80031b4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	f003 020f 	and.w	r2, r3, #15
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80031aa:	2101      	movs	r1, #1
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fe25 	bl	8003dfc <HAL_PCDEx_LPM_Callback>
 80031b2:	e002      	b.n	80031ba <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f006 fd89 	bl	8009ccc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f004 fdc2 	bl	8007d48 <USB_ReadInterrupts>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ce:	f040 80c7 	bne.w	8003360 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2110      	movs	r1, #16
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 feed 	bl	8006fcc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f6:	e056      	b.n	80032a6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003204:	461a      	mov	r2, r3
 8003206:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800320a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321c:	0151      	lsls	r1, r2, #5
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	440a      	add	r2, r1
 8003222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800322a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800323c:	0151      	lsls	r1, r2, #5
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	440a      	add	r2, r1
 8003242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003246:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800324a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003258:	461a      	mov	r2, r3
 800325a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800325e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003270:	0151      	lsls	r1, r2, #5
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	440a      	add	r2, r1
 8003276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800327a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800327e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003290:	0151      	lsls	r1, r2, #5
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	440a      	add	r2, r1
 8003296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800329a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800329e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a2:	3301      	adds	r3, #1
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3a3      	bcc.n	80031f8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d016      	beq.n	80032fa <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032dc:	f043 030b 	orr.w	r3, r3, #11
 80032e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f2:	f043 030b 	orr.w	r3, r3, #11
 80032f6:	6453      	str	r3, [r2, #68]	; 0x44
 80032f8:	e015      	b.n	8003326 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	4619      	mov	r1, r3
 800330a:	f242 032b 	movw	r3, #8235	; 0x202b
 800330e:	4313      	orrs	r3, r2
 8003310:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003320:	f043 030b 	orr.w	r3, r3, #11
 8003324:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003334:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003338:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800334a:	461a      	mov	r2, r3
 800334c:	f004 fdc2 	bl	8007ed4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800335e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f004 fcef 	bl	8007d48 <USB_ReadInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003374:	d124      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f004 fd86 	bl	8007e8c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f003 fe82 	bl	800708e <USB_GetDevSpeed>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681c      	ldr	r4, [r3, #0]
 8003396:	f001 fc87 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 800339a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	4620      	mov	r0, r4
 80033a6:	f003 fbc5 	bl	8006b34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f006 fc65 	bl	8009c7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f004 fcbf 	bl	8007d48 <USB_ReadInterrupts>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d10a      	bne.n	80033ea <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f006 fc42 	bl	8009c5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f002 0208 	and.w	r2, r2, #8
 80033e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f004 fcaa 	bl	8007d48 <USB_ReadInterrupts>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fe:	d10f      	bne.n	8003420 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	b2db      	uxtb	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f006 fca4 	bl	8009d58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800341e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 fc8f 	bl	8007d48 <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003430:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003434:	d10f      	bne.n	8003456 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	b2db      	uxtb	r3, r3
 800343e:	4619      	mov	r1, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f006 fc77 	bl	8009d34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003454:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f004 fc74 	bl	8007d48 <USB_ReadInterrupts>
 8003460:	4603      	mov	r3, r0
 8003462:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346a:	d10a      	bne.n	8003482 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f006 fc85 	bl	8009d7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003480:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f004 fc5e 	bl	8007d48 <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d115      	bne.n	80034c2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f006 fc75 	bl	8009d98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	e000      	b.n	80034c2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80034c0:	bf00      	nop
    }
  }
}
 80034c2:	3734      	adds	r7, #52	; 0x34
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd90      	pop	{r4, r7, pc}

080034c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_PCD_SetAddress+0x1a>
 80034de:	2302      	movs	r3, #2
 80034e0:	e013      	b.n	800350a <HAL_PCD_SetAddress+0x42>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f004 fbce 	bl	8007c9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	4608      	mov	r0, r1
 800351c:	4611      	mov	r1, r2
 800351e:	461a      	mov	r2, r3
 8003520:	4603      	mov	r3, r0
 8003522:	70fb      	strb	r3, [r7, #3]
 8003524:	460b      	mov	r3, r1
 8003526:	803b      	strh	r3, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003534:	2b00      	cmp	r3, #0
 8003536:	da0f      	bge.n	8003558 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 020f 	and.w	r2, r3, #15
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	3338      	adds	r3, #56	; 0x38
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	705a      	strb	r2, [r3, #1]
 8003556:	e00f      	b.n	8003578 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 020f 	and.w	r2, r3, #15
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	3304      	adds	r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	b2da      	uxtb	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003584:	883a      	ldrh	r2, [r7, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	78ba      	ldrb	r2, [r7, #2]
 800358e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	785b      	ldrb	r3, [r3, #1]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035a2:	78bb      	ldrb	r3, [r7, #2]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d102      	bne.n	80035ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_PCD_EP_Open+0xaa>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e00e      	b.n	80035da <HAL_PCD_EP_Open+0xc8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68f9      	ldr	r1, [r7, #12]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 fd84 	bl	80070d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80035d8:	7afb      	ldrb	r3, [r7, #11]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	460b      	mov	r3, r1
 80035ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da0f      	bge.n	8003616 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	f003 020f 	and.w	r2, r3, #15
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	3338      	adds	r3, #56	; 0x38
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	3304      	adds	r3, #4
 800360c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	705a      	strb	r2, [r3, #1]
 8003614:	e00f      	b.n	8003636 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	f003 020f 	and.w	r2, r3, #15
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	3304      	adds	r3, #4
 800362e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_PCD_EP_Close+0x6e>
 800364c:	2302      	movs	r3, #2
 800364e:	e00e      	b.n	800366e <HAL_PCD_EP_Close+0x8c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68f9      	ldr	r1, [r7, #12]
 800365e:	4618      	mov	r0, r3
 8003660:	f003 fdc2 	bl	80071e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	460b      	mov	r3, r1
 8003684:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003686:	7afb      	ldrb	r3, [r7, #11]
 8003688:	f003 020f 	and.w	r2, r3, #15
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	3304      	adds	r3, #4
 800369e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2200      	movs	r2, #0
 80036b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d102      	bne.n	80036d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036d2:	7afb      	ldrb	r3, [r7, #11]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	6979      	ldr	r1, [r7, #20]
 80036ea:	f004 f84d 	bl	8007788 <USB_EP0StartXfer>
 80036ee:	e008      	b.n	8003702 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	6979      	ldr	r1, [r7, #20]
 80036fe:	f003 fdf7 	bl	80072f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 020f 	and.w	r2, r3, #15
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	460b      	mov	r3, r1
 800374a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374c:	7afb      	ldrb	r3, [r7, #11]
 800374e:	f003 020f 	and.w	r2, r3, #15
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	3338      	adds	r3, #56	; 0x38
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2200      	movs	r2, #0
 8003774:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2201      	movs	r2, #1
 800377a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800377c:	7afb      	ldrb	r3, [r7, #11]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	b2da      	uxtb	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d102      	bne.n	8003796 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003796:	7afb      	ldrb	r3, [r7, #11]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	6979      	ldr	r1, [r7, #20]
 80037ae:	f003 ffeb 	bl	8007788 <USB_EP0StartXfer>
 80037b2:	e008      	b.n	80037c6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	f003 fd95 	bl	80072f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	f003 020f 	and.w	r2, r3, #15
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d901      	bls.n	80037ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e050      	b.n	8003890 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	da0f      	bge.n	8003816 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	3338      	adds	r3, #56	; 0x38
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	3304      	adds	r3, #4
 800380c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	705a      	strb	r2, [r3, #1]
 8003814:	e00d      	b.n	8003832 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	3304      	adds	r3, #4
 800382a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_PCD_EP_SetStall+0x82>
 800384e:	2302      	movs	r3, #2
 8003850:	e01e      	b.n	8003890 <HAL_PCD_EP_SetStall+0xc0>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	f004 f947 	bl	8007af4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	b2d9      	uxtb	r1, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003880:	461a      	mov	r2, r3
 8003882:	f004 fb27 	bl	8007ed4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	f003 020f 	and.w	r2, r3, #15
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d901      	bls.n	80038b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e042      	b.n	800393c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da0f      	bge.n	80038de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	f003 020f 	and.w	r2, r3, #15
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	3338      	adds	r3, #56	; 0x38
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	3304      	adds	r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	705a      	strb	r2, [r3, #1]
 80038dc:	e00f      	b.n	80038fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	f003 020f 	and.w	r2, r3, #15
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	3304      	adds	r3, #4
 80038f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	b2da      	uxtb	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_PCD_EP_ClrStall+0x86>
 800391a:	2302      	movs	r3, #2
 800391c:	e00e      	b.n	800393c <HAL_PCD_EP_ClrStall+0xa4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68f9      	ldr	r1, [r7, #12]
 800392c:	4618      	mov	r0, r3
 800392e:	f004 f94f 	bl	8007bd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	af02      	add	r7, sp, #8
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	3338      	adds	r3, #56	; 0x38
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	3304      	adds	r3, #4
 800396a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	d901      	bls.n	800397c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e06c      	b.n	8003a56 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	429a      	cmp	r2, r3
 8003990:	d902      	bls.n	8003998 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	3303      	adds	r3, #3
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039a0:	e02b      	b.n	80039fa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d902      	bls.n	80039be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3303      	adds	r3, #3
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68d9      	ldr	r1, [r3, #12]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	4603      	mov	r3, r0
 80039dc:	6978      	ldr	r0, [r7, #20]
 80039de:	f004 f82b 	bl	8007a38 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	441a      	add	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	441a      	add	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d809      	bhi.n	8003a24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d203      	bcs.n	8003a24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1be      	bne.n	80039a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d811      	bhi.n	8003a54 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	2201      	movs	r2, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	6939      	ldr	r1, [r7, #16]
 8003a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a50:	4013      	ands	r3, r2
 8003a52:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	333c      	adds	r3, #60	; 0x3c
 8003a78:	3304      	adds	r3, #4
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	f040 80a0 	bne.w	8003bd8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d015      	beq.n	8003ace <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a72      	ldr	r2, [pc, #456]	; (8003c70 <PCD_EP_OutXfrComplete_int+0x210>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	f240 80dd 	bls.w	8003c66 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80d7 	beq.w	8003c66 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aca:	6093      	str	r3, [r2, #8]
 8003acc:	e0cb      	b.n	8003c66 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	6093      	str	r3, [r2, #8]
 8003aea:	e0bc      	b.n	8003c66 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 80b7 	bne.w	8003c66 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a5d      	ldr	r2, [pc, #372]	; (8003c70 <PCD_EP_OutXfrComplete_int+0x210>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d90f      	bls.n	8003b20 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b16:	461a      	mov	r2, r3
 8003b18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b1c:	6093      	str	r3, [r2, #8]
 8003b1e:	e0a2      	b.n	8003c66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b32:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	0159      	lsls	r1, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	440b      	add	r3, r1
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003b46:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4403      	add	r3, r0
 8003b56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b5a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4403      	add	r3, r0
 8003b7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4419      	add	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4403      	add	r3, r0
 8003b94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b98:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d114      	bne.n	8003bca <PCD_EP_OutXfrComplete_int+0x16a>
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d108      	bne.n	8003bca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	f004 f985 	bl	8007ed4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f006 f80f 	bl	8009bf4 <HAL_PCD_DataOutStageCallback>
 8003bd6:	e046      	b.n	8003c66 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <PCD_EP_OutXfrComplete_int+0x214>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d124      	bne.n	8003c2a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfc:	6093      	str	r3, [r2, #8]
 8003bfe:	e032      	b.n	8003c66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	461a      	mov	r2, r3
 8003c18:	2320      	movs	r3, #32
 8003c1a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f005 ffe6 	bl	8009bf4 <HAL_PCD_DataOutStageCallback>
 8003c28:	e01d      	b.n	8003c66 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d114      	bne.n	8003c5a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d108      	bne.n	8003c5a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c52:	461a      	mov	r2, r3
 8003c54:	2100      	movs	r1, #0
 8003c56:	f004 f93d 	bl	8007ed4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f005 ffc7 	bl	8009bf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	4f54300a 	.word	0x4f54300a
 8003c74:	4f54310a 	.word	0x4f54310a

08003c78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	333c      	adds	r3, #60	; 0x3c
 8003c90:	3304      	adds	r3, #4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <PCD_EP_OutSetupPacket_int+0x88>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d90e      	bls.n	8003ccc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d009      	beq.n	8003ccc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f005 ff7f 	bl	8009bd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d90c      	bls.n	8003cf4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d108      	bne.n	8003cf4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cec:	461a      	mov	r2, r3
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f004 f8f0 	bl	8007ed4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	4f54300a 	.word	0x4f54300a

08003d04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	70fb      	strb	r3, [r7, #3]
 8003d10:	4613      	mov	r3, r2
 8003d12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d107      	bne.n	8003d32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d22:	883b      	ldrh	r3, [r7, #0]
 8003d24:	0419      	lsls	r1, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d30:	e028      	b.n	8003d84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
 8003d44:	e00d      	b.n	8003d62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	3340      	adds	r3, #64	; 0x40
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4413      	add	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d3ec      	bcc.n	8003d46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d6c:	883b      	ldrh	r3, [r7, #0]
 8003d6e:	0418      	lsls	r0, r3, #16
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6819      	ldr	r1, [r3, #0]
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	4302      	orrs	r2, r0
 8003d7c:	3340      	adds	r3, #64	; 0x40
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	10000003 	.word	0x10000003

08003dfc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e1c:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_PWREx_ConfigSupply+0x70>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d00a      	beq.n	8003e3e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e28:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <HAL_PWREx_ConfigSupply+0x70>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d001      	beq.n	8003e3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e01f      	b.n	8003e7a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e01d      	b.n	8003e7a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <HAL_PWREx_ConfigSupply+0x70>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 0207 	bic.w	r2, r3, #7
 8003e46:	490f      	ldr	r1, [pc, #60]	; (8003e84 <HAL_PWREx_ConfigSupply+0x70>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e4e:	f7fc feb1 	bl	8000bb4 <HAL_GetTick>
 8003e52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e54:	e009      	b.n	8003e6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e56:	f7fc fead 	bl	8000bb4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e64:	d901      	bls.n	8003e6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e007      	b.n	8003e7a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_PWREx_ConfigSupply+0x70>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e76:	d1ee      	bne.n	8003e56 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	58024800 	.word	0x58024800

08003e88 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e96:	60d3      	str	r3, [r2, #12]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	58024800 	.word	0x58024800

08003ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e3c4      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8087 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec8:	4ba2      	ldr	r3, [pc, #648]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ed2:	4ba0      	ldr	r3, [pc, #640]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d007      	beq.n	8003eee <HAL_RCC_OscConfig+0x46>
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	2b18      	cmp	r3, #24
 8003ee2:	d110      	bne.n	8003f06 <HAL_RCC_OscConfig+0x5e>
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d10b      	bne.n	8003f06 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eee:	4b99      	ldr	r3, [pc, #612]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d06c      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x12c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d168      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e39e      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0e:	d106      	bne.n	8003f1e <HAL_RCC_OscConfig+0x76>
 8003f10:	4b90      	ldr	r3, [pc, #576]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a8f      	ldr	r2, [pc, #572]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	e02e      	b.n	8003f7c <HAL_RCC_OscConfig+0xd4>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCC_OscConfig+0x98>
 8003f26:	4b8b      	ldr	r3, [pc, #556]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a8a      	ldr	r2, [pc, #552]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4b88      	ldr	r3, [pc, #544]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a87      	ldr	r2, [pc, #540]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e01d      	b.n	8003f7c <HAL_RCC_OscConfig+0xd4>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0xbc>
 8003f4a:	4b82      	ldr	r3, [pc, #520]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a81      	ldr	r2, [pc, #516]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b7f      	ldr	r3, [pc, #508]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7e      	ldr	r2, [pc, #504]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e00b      	b.n	8003f7c <HAL_RCC_OscConfig+0xd4>
 8003f64:	4b7b      	ldr	r3, [pc, #492]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a7a      	ldr	r2, [pc, #488]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4b78      	ldr	r3, [pc, #480]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a77      	ldr	r2, [pc, #476]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d013      	beq.n	8003fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fc fe16 	bl	8000bb4 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fc fe12 	bl	8000bb4 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e352      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f9e:	4b6d      	ldr	r3, [pc, #436]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0xe4>
 8003faa:	e014      	b.n	8003fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fc fe02 	bl	8000bb4 <HAL_GetTick>
 8003fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fc fdfe 	bl	8000bb4 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e33e      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fc6:	4b63      	ldr	r3, [pc, #396]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x10c>
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8092 	beq.w	8004108 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe4:	4b5b      	ldr	r3, [pc, #364]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fee:	4b59      	ldr	r3, [pc, #356]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <HAL_RCC_OscConfig+0x162>
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	2b18      	cmp	r3, #24
 8003ffe:	d12d      	bne.n	800405c <HAL_RCC_OscConfig+0x1b4>
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d128      	bne.n	800405c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800400a:	4b52      	ldr	r3, [pc, #328]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x17a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e310      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	f7fc fdf5 	bl	8000c10 <HAL_GetREVID>
 8004026:	4602      	mov	r2, r0
 8004028:	f241 0303 	movw	r3, #4099	; 0x1003
 800402c:	429a      	cmp	r2, r3
 800402e:	d80a      	bhi.n	8004046 <HAL_RCC_OscConfig+0x19e>
 8004030:	4b48      	ldr	r3, [pc, #288]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	4945      	ldr	r1, [pc, #276]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004044:	e060      	b.n	8004108 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b43      	ldr	r3, [pc, #268]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	493f      	ldr	r1, [pc, #252]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800405a:	e055      	b.n	8004108 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d038      	beq.n	80040d6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004064:	4b3b      	ldr	r3, [pc, #236]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 0219 	bic.w	r2, r3, #25
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4938      	ldr	r1, [pc, #224]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fc fd9d 	bl	8000bb4 <HAL_GetTick>
 800407a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407e:	f7fc fd99 	bl	8000bb4 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e2d9      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004090:	4b30      	ldr	r3, [pc, #192]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409c:	f7fc fdb8 	bl	8000c10 <HAL_GetREVID>
 80040a0:	4602      	mov	r2, r0
 80040a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d80a      	bhi.n	80040c0 <HAL_RCC_OscConfig+0x218>
 80040aa:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	031b      	lsls	r3, r3, #12
 80040b8:	4926      	ldr	r1, [pc, #152]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]
 80040be:	e023      	b.n	8004108 <HAL_RCC_OscConfig+0x260>
 80040c0:	4b24      	ldr	r3, [pc, #144]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	4921      	ldr	r1, [pc, #132]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]
 80040d4:	e018      	b.n	8004108 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d6:	4b1f      	ldr	r3, [pc, #124]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7fc fd67 	bl	8000bb4 <HAL_GetTick>
 80040e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ea:	f7fc fd63 	bl	8000bb4 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e2a3      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040fc:	4b15      	ldr	r3, [pc, #84]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8091 	beq.w	8004238 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800411e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d007      	beq.n	800413c <HAL_RCC_OscConfig+0x294>
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b18      	cmp	r3, #24
 8004130:	d12f      	bne.n	8004192 <HAL_RCC_OscConfig+0x2ea>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d12a      	bne.n	8004192 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_OscConfig+0x2ac>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <HAL_RCC_OscConfig+0x2b0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	2b80      	cmp	r3, #128	; 0x80
 800414e:	d003      	beq.n	8004158 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e277      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
 8004154:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004158:	f7fc fd5a 	bl	8000c10 <HAL_GetREVID>
 800415c:	4602      	mov	r2, r0
 800415e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004162:	429a      	cmp	r2, r3
 8004164:	d80a      	bhi.n	800417c <HAL_RCC_OscConfig+0x2d4>
 8004166:	4ba2      	ldr	r3, [pc, #648]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	069b      	lsls	r3, r3, #26
 8004174:	499e      	ldr	r1, [pc, #632]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800417a:	e05d      	b.n	8004238 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800417c:	4b9c      	ldr	r3, [pc, #624]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	4999      	ldr	r1, [pc, #612]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 800418c:	4313      	orrs	r3, r2
 800418e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004190:	e052      	b.n	8004238 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d035      	beq.n	8004206 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800419a:	4b95      	ldr	r3, [pc, #596]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a94      	ldr	r2, [pc, #592]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80041a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7fc fd05 	bl	8000bb4 <HAL_GetTick>
 80041aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041ae:	f7fc fd01 	bl	8000bb4 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e241      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041c0:	4b8b      	ldr	r3, [pc, #556]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041cc:	f7fc fd20 	bl	8000c10 <HAL_GetREVID>
 80041d0:	4602      	mov	r2, r0
 80041d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d80a      	bhi.n	80041f0 <HAL_RCC_OscConfig+0x348>
 80041da:	4b85      	ldr	r3, [pc, #532]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	069b      	lsls	r3, r3, #26
 80041e8:	4981      	ldr	r1, [pc, #516]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
 80041ee:	e023      	b.n	8004238 <HAL_RCC_OscConfig+0x390>
 80041f0:	4b7f      	ldr	r3, [pc, #508]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	497c      	ldr	r1, [pc, #496]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004200:	4313      	orrs	r3, r2
 8004202:	60cb      	str	r3, [r1, #12]
 8004204:	e018      	b.n	8004238 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004206:	4b7a      	ldr	r3, [pc, #488]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a79      	ldr	r2, [pc, #484]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 800420c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fc fccf 	bl	8000bb4 <HAL_GetTick>
 8004216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800421a:	f7fc fccb 	bl	8000bb4 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e20b      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800422c:	4b70      	ldr	r3, [pc, #448]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d036      	beq.n	80042b2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d019      	beq.n	8004280 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424c:	4b68      	ldr	r3, [pc, #416]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 800424e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004250:	4a67      	ldr	r2, [pc, #412]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fc fcac 	bl	8000bb4 <HAL_GetTick>
 800425c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004260:	f7fc fca8 	bl	8000bb4 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e1e8      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004272:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x3b8>
 800427e:	e018      	b.n	80042b2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004280:	4b5b      	ldr	r3, [pc, #364]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004284:	4a5a      	ldr	r2, [pc, #360]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fc fc92 	bl	8000bb4 <HAL_GetTick>
 8004290:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004294:	f7fc fc8e 	bl	8000bb4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1ce      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042a6:	4b52      	ldr	r3, [pc, #328]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80042a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d036      	beq.n	800432c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d019      	beq.n	80042fa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042c6:	4b4a      	ldr	r3, [pc, #296]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a49      	ldr	r2, [pc, #292]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80042cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042d2:	f7fc fc6f 	bl	8000bb4 <HAL_GetTick>
 80042d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042da:	f7fc fc6b 	bl	8000bb4 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1ab      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042ec:	4b40      	ldr	r3, [pc, #256]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x432>
 80042f8:	e018      	b.n	800432c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042fa:	4b3d      	ldr	r3, [pc, #244]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a3c      	ldr	r2, [pc, #240]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004304:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004306:	f7fc fc55 	bl	8000bb4 <HAL_GetTick>
 800430a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800430e:	f7fc fc51 	bl	8000bb4 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e191      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004320:	4b33      	ldr	r3, [pc, #204]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f0      	bne.n	800430e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8086 	beq.w	8004446 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800433a:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_RCC_OscConfig+0x54c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2d      	ldr	r2, [pc, #180]	; (80043f4 <HAL_RCC_OscConfig+0x54c>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004346:	f7fc fc35 	bl	8000bb4 <HAL_GetTick>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800434e:	f7fc fc31 	bl	8000bb4 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b64      	cmp	r3, #100	; 0x64
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e171      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004360:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <HAL_RCC_OscConfig+0x54c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d106      	bne.n	8004382 <HAL_RCC_OscConfig+0x4da>
 8004374:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	e02d      	b.n	80043de <HAL_RCC_OscConfig+0x536>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4fc>
 800438a:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
 8004396:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 800439c:	f023 0304 	bic.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	e01c      	b.n	80043de <HAL_RCC_OscConfig+0x536>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCC_OscConfig+0x51e>
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a0f      	ldr	r2, [pc, #60]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a0c      	ldr	r2, [pc, #48]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
 80043c4:	e00b      	b.n	80043de <HAL_RCC_OscConfig+0x536>
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
 80043d2:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <HAL_RCC_OscConfig+0x548>)
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01a      	beq.n	800441c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7fc fbe5 	bl	8000bb4 <HAL_GetTick>
 80043ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ec:	e00f      	b.n	800440e <HAL_RCC_OscConfig+0x566>
 80043ee:	bf00      	nop
 80043f0:	58024400 	.word	0x58024400
 80043f4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f8:	f7fc fbdc 	bl	8000bb4 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	; 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e11a      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800440e:	4b8f      	ldr	r3, [pc, #572]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0ee      	beq.n	80043f8 <HAL_RCC_OscConfig+0x550>
 800441a:	e014      	b.n	8004446 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fc fbca 	bl	8000bb4 <HAL_GetTick>
 8004420:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004422:	e00a      	b.n	800443a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fc fbc6 	bl	8000bb4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e104      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800443a:	4b84      	ldr	r3, [pc, #528]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1ee      	bne.n	8004424 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80f9 	beq.w	8004642 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004450:	4b7e      	ldr	r3, [pc, #504]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004458:	2b18      	cmp	r3, #24
 800445a:	f000 80b4 	beq.w	80045c6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	2b02      	cmp	r3, #2
 8004464:	f040 8095 	bne.w	8004592 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b78      	ldr	r3, [pc, #480]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a77      	ldr	r2, [pc, #476]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 800446e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fc fb9e 	bl	8000bb4 <HAL_GetTick>
 8004478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447c:	f7fc fb9a 	bl	8000bb4 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e0da      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800448e:	4b6f      	ldr	r3, [pc, #444]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449a:	4b6c      	ldr	r3, [pc, #432]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 800449c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800449e:	4b6c      	ldr	r3, [pc, #432]	; (8004650 <HAL_RCC_OscConfig+0x7a8>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044aa:	0112      	lsls	r2, r2, #4
 80044ac:	430a      	orrs	r2, r1
 80044ae:	4967      	ldr	r1, [pc, #412]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	628b      	str	r3, [r1, #40]	; 0x28
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	3b01      	subs	r3, #1
 80044ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	3b01      	subs	r3, #1
 80044c4:	025b      	lsls	r3, r3, #9
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	3b01      	subs	r3, #1
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	3b01      	subs	r3, #1
 80044de:	061b      	lsls	r3, r3, #24
 80044e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044e4:	4959      	ldr	r1, [pc, #356]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044ea:	4b58      	ldr	r3, [pc, #352]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	4a57      	ldr	r2, [pc, #348]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044f6:	4b55      	ldr	r3, [pc, #340]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 80044f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044fa:	4b56      	ldr	r3, [pc, #344]	; (8004654 <HAL_RCC_OscConfig+0x7ac>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004502:	00d2      	lsls	r2, r2, #3
 8004504:	4951      	ldr	r1, [pc, #324]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004506:	4313      	orrs	r3, r2
 8004508:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800450a:	4b50      	ldr	r3, [pc, #320]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	f023 020c 	bic.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	494d      	ldr	r1, [pc, #308]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004518:	4313      	orrs	r3, r2
 800451a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800451c:	4b4b      	ldr	r3, [pc, #300]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f023 0202 	bic.w	r2, r3, #2
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	4948      	ldr	r1, [pc, #288]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800452e:	4b47      	ldr	r3, [pc, #284]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	4a46      	ldr	r2, [pc, #280]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800453a:	4b44      	ldr	r3, [pc, #272]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	4a43      	ldr	r2, [pc, #268]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004544:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004546:	4b41      	ldr	r3, [pc, #260]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	4a40      	ldr	r2, [pc, #256]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 800454c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004550:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004552:	4b3e      	ldr	r3, [pc, #248]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	4a3d      	ldr	r2, [pc, #244]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800455e:	4b3b      	ldr	r3, [pc, #236]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a3a      	ldr	r2, [pc, #232]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fc fb23 	bl	8000bb4 <HAL_GetTick>
 800456e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004572:	f7fc fb1f 	bl	8000bb4 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e05f      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004584:	4b31      	ldr	r3, [pc, #196]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x6ca>
 8004590:	e057      	b.n	8004642 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004592:	4b2e      	ldr	r3, [pc, #184]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2d      	ldr	r2, [pc, #180]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 8004598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800459c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fc fb09 	bl	8000bb4 <HAL_GetTick>
 80045a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fc fb05 	bl	8000bb4 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e045      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x6fe>
 80045c4:	e03d      	b.n	8004642 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045c6:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_RCC_OscConfig+0x7a4>)
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d031      	beq.n	800463e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0203 	and.w	r2, r3, #3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d12a      	bne.n	800463e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d122      	bne.n	800463e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d11a      	bne.n	800463e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	0a5b      	lsrs	r3, r3, #9
 800460c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d111      	bne.n	800463e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d108      	bne.n	800463e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	0e1b      	lsrs	r3, r3, #24
 8004630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3730      	adds	r7, #48	; 0x30
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	58024400 	.word	0x58024400
 8004650:	fffffc0c 	.word	0xfffffc0c
 8004654:	ffff0007 	.word	0xffff0007

08004658 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e19c      	b.n	80049a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800466c:	4b8a      	ldr	r3, [pc, #552]	; (8004898 <HAL_RCC_ClockConfig+0x240>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d910      	bls.n	800469c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b87      	ldr	r3, [pc, #540]	; (8004898 <HAL_RCC_ClockConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 020f 	bic.w	r2, r3, #15
 8004682:	4985      	ldr	r1, [pc, #532]	; (8004898 <HAL_RCC_ClockConfig+0x240>)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	4313      	orrs	r3, r2
 8004688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468a:	4b83      	ldr	r3, [pc, #524]	; (8004898 <HAL_RCC_ClockConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e184      	b.n	80049a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d010      	beq.n	80046ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	4b7b      	ldr	r3, [pc, #492]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d908      	bls.n	80046ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046b8:	4b78      	ldr	r3, [pc, #480]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	4975      	ldr	r1, [pc, #468]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d010      	beq.n	80046f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	4b70      	ldr	r3, [pc, #448]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d908      	bls.n	80046f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046e6:	4b6d      	ldr	r3, [pc, #436]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	496a      	ldr	r1, [pc, #424]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b00      	cmp	r3, #0
 8004702:	d010      	beq.n	8004726 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	4b64      	ldr	r3, [pc, #400]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004710:	429a      	cmp	r2, r3
 8004712:	d908      	bls.n	8004726 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004714:	4b61      	ldr	r3, [pc, #388]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	495e      	ldr	r1, [pc, #376]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004722:	4313      	orrs	r3, r2
 8004724:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	4b59      	ldr	r3, [pc, #356]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800473e:	429a      	cmp	r2, r3
 8004740:	d908      	bls.n	8004754 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004742:	4b56      	ldr	r3, [pc, #344]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	4953      	ldr	r1, [pc, #332]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004750:	4313      	orrs	r3, r2
 8004752:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d010      	beq.n	8004782 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	4b4d      	ldr	r3, [pc, #308]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	429a      	cmp	r2, r3
 800476e:	d908      	bls.n	8004782 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	4b4a      	ldr	r3, [pc, #296]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f023 020f 	bic.w	r2, r3, #15
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4947      	ldr	r1, [pc, #284]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 800477e:	4313      	orrs	r3, r2
 8004780:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d055      	beq.n	800483a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800478e:	4b43      	ldr	r3, [pc, #268]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	4940      	ldr	r1, [pc, #256]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 800479c:	4313      	orrs	r3, r2
 800479e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047a8:	4b3c      	ldr	r3, [pc, #240]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d121      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0f6      	b.n	80049a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047c0:	4b36      	ldr	r3, [pc, #216]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d115      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0ea      	b.n	80049a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047d8:	4b30      	ldr	r3, [pc, #192]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0de      	b.n	80049a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047e8:	4b2c      	ldr	r3, [pc, #176]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0d6      	b.n	80049a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047f8:	4b28      	ldr	r3, [pc, #160]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f023 0207 	bic.w	r2, r3, #7
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4925      	ldr	r1, [pc, #148]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004806:	4313      	orrs	r3, r2
 8004808:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480a:	f7fc f9d3 	bl	8000bb4 <HAL_GetTick>
 800480e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004810:	e00a      	b.n	8004828 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004812:	f7fc f9cf 	bl	8000bb4 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e0be      	b.n	80049a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004828:	4b1c      	ldr	r3, [pc, #112]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	429a      	cmp	r2, r3
 8004838:	d1eb      	bne.n	8004812 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d010      	beq.n	8004868 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	4b14      	ldr	r3, [pc, #80]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	429a      	cmp	r2, r3
 8004854:	d208      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004856:	4b11      	ldr	r3, [pc, #68]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f023 020f 	bic.w	r2, r3, #15
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	490e      	ldr	r1, [pc, #56]	; (800489c <HAL_RCC_ClockConfig+0x244>)
 8004864:	4313      	orrs	r3, r2
 8004866:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_ClockConfig+0x240>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d214      	bcs.n	80048a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <HAL_RCC_ClockConfig+0x240>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 020f 	bic.w	r2, r3, #15
 800487e:	4906      	ldr	r1, [pc, #24]	; (8004898 <HAL_RCC_ClockConfig+0x240>)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	4313      	orrs	r3, r2
 8004884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b04      	ldr	r3, [pc, #16]	; (8004898 <HAL_RCC_ClockConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e086      	b.n	80049a6 <HAL_RCC_ClockConfig+0x34e>
 8004898:	52002000 	.word	0x52002000
 800489c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d010      	beq.n	80048ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	4b3f      	ldr	r3, [pc, #252]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d208      	bcs.n	80048ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048bc:	4b3c      	ldr	r3, [pc, #240]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	4939      	ldr	r1, [pc, #228]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d010      	beq.n	80048fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	4b34      	ldr	r3, [pc, #208]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d208      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048ea:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	492e      	ldr	r1, [pc, #184]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	d010      	beq.n	800492a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	4b28      	ldr	r3, [pc, #160]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004914:	429a      	cmp	r2, r3
 8004916:	d208      	bcs.n	800492a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004918:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	4922      	ldr	r1, [pc, #136]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 8004926:	4313      	orrs	r3, r2
 8004928:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d010      	beq.n	8004958 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004942:	429a      	cmp	r2, r3
 8004944:	d208      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	4917      	ldr	r1, [pc, #92]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 8004954:	4313      	orrs	r3, r2
 8004956:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004958:	f000 f834 	bl	80049c4 <HAL_RCC_GetSysClockFreq>
 800495c:	4601      	mov	r1, r0
 800495e:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <HAL_RCC_ClockConfig+0x35c>)
 800496a:	5cd3      	ldrb	r3, [r2, r3]
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	fa21 f303 	lsr.w	r3, r1, r3
 8004974:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_RCC_ClockConfig+0x358>)
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	4a0d      	ldr	r2, [pc, #52]	; (80049b4 <HAL_RCC_ClockConfig+0x35c>)
 8004980:	5cd3      	ldrb	r3, [r2, r3]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
 800498c:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <HAL_RCC_ClockConfig+0x360>)
 800498e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004990:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <HAL_RCC_ClockConfig+0x364>)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004996:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <HAL_RCC_ClockConfig+0x368>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fc f8c0 	bl	8000b20 <HAL_InitTick>
 80049a0:	4603      	mov	r3, r0
 80049a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	58024400 	.word	0x58024400
 80049b4:	0800a388 	.word	0x0800a388
 80049b8:	24000004 	.word	0x24000004
 80049bc:	24000000 	.word	0x24000000
 80049c0:	24000008 	.word	0x24000008

080049c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ca:	4baf      	ldr	r3, [pc, #700]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d2:	2b18      	cmp	r3, #24
 80049d4:	f200 814e 	bhi.w	8004c74 <HAL_RCC_GetSysClockFreq+0x2b0>
 80049d8:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	08004a45 	.word	0x08004a45
 80049e4:	08004c75 	.word	0x08004c75
 80049e8:	08004c75 	.word	0x08004c75
 80049ec:	08004c75 	.word	0x08004c75
 80049f0:	08004c75 	.word	0x08004c75
 80049f4:	08004c75 	.word	0x08004c75
 80049f8:	08004c75 	.word	0x08004c75
 80049fc:	08004c75 	.word	0x08004c75
 8004a00:	08004a6b 	.word	0x08004a6b
 8004a04:	08004c75 	.word	0x08004c75
 8004a08:	08004c75 	.word	0x08004c75
 8004a0c:	08004c75 	.word	0x08004c75
 8004a10:	08004c75 	.word	0x08004c75
 8004a14:	08004c75 	.word	0x08004c75
 8004a18:	08004c75 	.word	0x08004c75
 8004a1c:	08004c75 	.word	0x08004c75
 8004a20:	08004a71 	.word	0x08004a71
 8004a24:	08004c75 	.word	0x08004c75
 8004a28:	08004c75 	.word	0x08004c75
 8004a2c:	08004c75 	.word	0x08004c75
 8004a30:	08004c75 	.word	0x08004c75
 8004a34:	08004c75 	.word	0x08004c75
 8004a38:	08004c75 	.word	0x08004c75
 8004a3c:	08004c75 	.word	0x08004c75
 8004a40:	08004a77 	.word	0x08004a77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a44:	4b90      	ldr	r3, [pc, #576]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a50:	4b8d      	ldr	r3, [pc, #564]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	08db      	lsrs	r3, r3, #3
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	4a8c      	ldr	r2, [pc, #560]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a62:	e10a      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a64:	4b89      	ldr	r3, [pc, #548]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004a66:	61bb      	str	r3, [r7, #24]
    break;
 8004a68:	e107      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a6a:	4b89      	ldr	r3, [pc, #548]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004a6c:	61bb      	str	r3, [r7, #24]
    break;
 8004a6e:	e104      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a70:	4b88      	ldr	r3, [pc, #544]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004a72:	61bb      	str	r3, [r7, #24]
    break;
 8004a74:	e101      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a76:	4b84      	ldr	r3, [pc, #528]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a80:	4b81      	ldr	r3, [pc, #516]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a8c:	4b7e      	ldr	r3, [pc, #504]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a96:	4b7c      	ldr	r3, [pc, #496]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	08db      	lsrs	r3, r3, #3
 8004a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80da 	beq.w	8004c6e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d05a      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d302      	bcc.n	8004aca <HAL_RCC_GetSysClockFreq+0x106>
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d078      	beq.n	8004bba <HAL_RCC_GetSysClockFreq+0x1f6>
 8004ac8:	e099      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aca:	4b6f      	ldr	r3, [pc, #444]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d02d      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ad6:	4b6c      	ldr	r3, [pc, #432]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	08db      	lsrs	r3, r3, #3
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	4a6a      	ldr	r2, [pc, #424]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b00:	4b61      	ldr	r3, [pc, #388]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b08:	ee07 3a90 	vmov	s15, r3
 8004b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b10:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b14:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b30:	e087      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	ee07 3a90 	vmov	s15, r3
 8004b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004c9c <HAL_RCC_GetSysClockFreq+0x2d8>
 8004b40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b44:	4b50      	ldr	r3, [pc, #320]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4c:	ee07 3a90 	vmov	s15, r3
 8004b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b54:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b58:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b74:	e065      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	ee07 3a90 	vmov	s15, r3
 8004b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b80:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004ca0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b88:	4b3f      	ldr	r3, [pc, #252]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b90:	ee07 3a90 	vmov	s15, r3
 8004b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b98:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b9c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb8:	e043      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004ca4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bcc:	4b2e      	ldr	r3, [pc, #184]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd4:	ee07 3a90 	vmov	s15, r3
 8004bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004be0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bfc:	e021      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c08:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004ca0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c10:	4b1d      	ldr	r3, [pc, #116]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c20:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c24:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c40:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004c42:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	0a5b      	lsrs	r3, r3, #9
 8004c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c66:	ee17 3a90 	vmov	r3, s15
 8004c6a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c6c:	e005      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
    break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004c76:	61bb      	str	r3, [r7, #24]
    break;
 8004c78:	bf00      	nop
  }

  return sysclockfreq;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3724      	adds	r7, #36	; 0x24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	03d09000 	.word	0x03d09000
 8004c90:	003d0900 	.word	0x003d0900
 8004c94:	017d7840 	.word	0x017d7840
 8004c98:	46000000 	.word	0x46000000
 8004c9c:	4c742400 	.word	0x4c742400
 8004ca0:	4a742400 	.word	0x4a742400
 8004ca4:	4bbebc20 	.word	0x4bbebc20

08004ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cae:	f7ff fe89 	bl	80049c4 <HAL_RCC_GetSysClockFreq>
 8004cb2:	4601      	mov	r1, r0
 8004cb4:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	4a0f      	ldr	r2, [pc, #60]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x54>)
 8004cc0:	5cd3      	ldrb	r3, [r2, r3]
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	fa21 f303 	lsr.w	r3, r1, r3
 8004cca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x54>)
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce2:	4a07      	ldr	r2, [pc, #28]	; (8004d00 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ce4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ce6:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	58024400 	.word	0x58024400
 8004cfc:	0800a388 	.word	0x0800a388
 8004d00:	24000004 	.word	0x24000004
 8004d04:	24000000 	.word	0x24000000

08004d08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d10:	2300      	movs	r3, #0
 8004d12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d14:	2300      	movs	r3, #0
 8004d16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d03d      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2c:	d013      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d32:	d802      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004d38:	e01f      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004d40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d44:	d01c      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004d46:	e018      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d48:	4baf      	ldr	r3, [pc, #700]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	4aae      	ldr	r2, [pc, #696]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d54:	e015      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fd23 	bl	80067a8 <RCCEx_PLL2_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d66:	e00c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3324      	adds	r3, #36	; 0x24
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f001 fdcc 	bl	800690c <RCCEx_PLL3_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d88:	4b9f      	ldr	r3, [pc, #636]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d94:	499c      	ldr	r1, [pc, #624]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	650b      	str	r3, [r1, #80]	; 0x50
 8004d9a:	e001      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d03d      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d826      	bhi.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004dd1 	.word	0x08004dd1
 8004dc0:	08004ddf 	.word	0x08004ddf
 8004dc4:	08004df1 	.word	0x08004df1
 8004dc8:	08004e09 	.word	0x08004e09
 8004dcc:	08004e09 	.word	0x08004e09
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd0:	4b8d      	ldr	r3, [pc, #564]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4a8c      	ldr	r2, [pc, #560]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ddc:	e015      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 fcdf 	bl	80067a8 <RCCEx_PLL2_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dee:	e00c      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3324      	adds	r3, #36	; 0x24
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 fd88 	bl	800690c <RCCEx_PLL3_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e00:	e003      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
      break;
 8004e06:	e000      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e10:	4b7d      	ldr	r3, [pc, #500]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e14:	f023 0207 	bic.w	r2, r3, #7
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	497a      	ldr	r1, [pc, #488]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	650b      	str	r3, [r1, #80]	; 0x50
 8004e22:	e001      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d03e      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	2b80      	cmp	r3, #128	; 0x80
 8004e3a:	d01c      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004e3c:	2b80      	cmp	r3, #128	; 0x80
 8004e3e:	d804      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d00d      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004e48:	e01e      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e4c:	d01f      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e52:	d01e      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e54:	e018      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e56:	4b6c      	ldr	r3, [pc, #432]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	4a6b      	ldr	r2, [pc, #428]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e62:	e017      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3304      	adds	r3, #4
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 fc9c 	bl	80067a8 <RCCEx_PLL2_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e74:	e00e      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3324      	adds	r3, #36	; 0x24
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f001 fd45 	bl	800690c <RCCEx_PLL3_Config>
 8004e82:	4603      	mov	r3, r0
 8004e84:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e86:	e005      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8c:	e002      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e000      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d109      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004e9a:	4b5b      	ldr	r3, [pc, #364]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	4958      	ldr	r1, [pc, #352]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	650b      	str	r3, [r1, #80]	; 0x50
 8004eac:	e001      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
 8004eb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d044      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec8:	d01f      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ece:	d805      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ed8:	d00e      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004eda:	e01f      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004edc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ee0:	d01f      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004ee2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ee6:	d01e      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ee8:	e018      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eea:	4b47      	ldr	r3, [pc, #284]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	4a46      	ldr	r2, [pc, #280]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ef6:	e017      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 fc52 	bl	80067a8 <RCCEx_PLL2_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004f08:	e00e      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3324      	adds	r3, #36	; 0x24
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 fcfb 	bl	800690c <RCCEx_PLL3_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f1a:	e005      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f20:	e002      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004f2e:	4b36      	ldr	r3, [pc, #216]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f32:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f3c:	4932      	ldr	r1, [pc, #200]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	658b      	str	r3, [r1, #88]	; 0x58
 8004f42:	e001      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d044      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f5e:	d01f      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004f60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f64:	d805      	bhi.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004f6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f6e:	d00e      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004f70:	e01f      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004f72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f76:	d01f      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004f78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f7c:	d01e      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004f7e:	e018      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f80:	4b21      	ldr	r3, [pc, #132]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	4a20      	ldr	r2, [pc, #128]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f8c:	e017      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f001 fc07 	bl	80067a8 <RCCEx_PLL2_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004f9e:	e00e      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3324      	adds	r3, #36	; 0x24
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f001 fcb0 	bl	800690c <RCCEx_PLL3_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fb0:	e005      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb6:	e002      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004fb8:	bf00      	nop
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004fc4:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fd2:	490d      	ldr	r1, [pc, #52]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	658b      	str	r3, [r1, #88]	; 0x58
 8004fd8:	e001      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
 8004fdc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d035      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d00c      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004ff2:	2b10      	cmp	r3, #16
 8004ff4:	d802      	bhi.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01b      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004ffa:	e017      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d00c      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005000:	2b30      	cmp	r3, #48	; 0x30
 8005002:	d018      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005004:	e012      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005006:	bf00      	nop
 8005008:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800500c:	4baf      	ldr	r3, [pc, #700]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4aae      	ldr	r2, [pc, #696]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005018:	e00e      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3304      	adds	r3, #4
 800501e:	2102      	movs	r1, #2
 8005020:	4618      	mov	r0, r3
 8005022:	f001 fbc1 	bl	80067a8 <RCCEx_PLL2_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800502a:	e005      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	75fb      	strb	r3, [r7, #23]
      break;
 8005030:	e002      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005038:	7dfb      	ldrb	r3, [r7, #23]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800503e:	4ba3      	ldr	r3, [pc, #652]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504a:	49a0      	ldr	r1, [pc, #640]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800504c:	4313      	orrs	r3, r2
 800504e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005050:	e001      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	7dfb      	ldrb	r3, [r7, #23]
 8005054:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d042      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506a:	d01f      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800506c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005070:	d805      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507a:	d00e      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800507c:	e01f      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800507e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005082:	d01f      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005088:	d01e      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800508a:	e018      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800508c:	4b8f      	ldr	r3, [pc, #572]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	4a8e      	ldr	r2, [pc, #568]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005098:	e017      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	2100      	movs	r1, #0
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 fb81 	bl	80067a8 <RCCEx_PLL2_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80050aa:	e00e      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3324      	adds	r3, #36	; 0x24
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 fc2a 	bl	800690c <RCCEx_PLL3_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80050bc:	e005      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
      break;
 80050c2:	e002      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80050c4:	bf00      	nop
 80050c6:	e000      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80050c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050d0:	4b7e      	ldr	r3, [pc, #504]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050dc:	497b      	ldr	r1, [pc, #492]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	650b      	str	r3, [r1, #80]	; 0x50
 80050e2:	e001      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d042      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050fc:	d01b      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80050fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005102:	d805      	bhi.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d022      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800510e:	e01b      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005110:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005114:	d01d      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800511a:	d01c      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800511c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005120:	d01b      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005122:	e011      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	2101      	movs	r1, #1
 800512a:	4618      	mov	r0, r3
 800512c:	f001 fb3c 	bl	80067a8 <RCCEx_PLL2_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005134:	e012      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3324      	adds	r3, #36	; 0x24
 800513a:	2101      	movs	r1, #1
 800513c:	4618      	mov	r0, r3
 800513e:	f001 fbe5 	bl	800690c <RCCEx_PLL3_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005146:	e009      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
      break;
 800514c:	e006      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800514e:	bf00      	nop
 8005150:	e004      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005152:	bf00      	nop
 8005154:	e002      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800515a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005162:	4b5a      	ldr	r3, [pc, #360]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005166:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516e:	4957      	ldr	r1, [pc, #348]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	650b      	str	r3, [r1, #80]	; 0x50
 8005174:	e001      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d044      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800518c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005190:	d01b      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005196:	d805      	bhi.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d022      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800519c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80051a2:	e01b      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d01d      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80051aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ae:	d01c      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80051b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051b4:	d01b      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80051b6:	e011      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	2101      	movs	r1, #1
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 faf2 	bl	80067a8 <RCCEx_PLL2_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80051c8:	e012      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3324      	adds	r3, #36	; 0x24
 80051ce:	2101      	movs	r1, #1
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 fb9b 	bl	800690c <RCCEx_PLL3_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80051da:	e009      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	75fb      	strb	r3, [r7, #23]
      break;
 80051e0:	e006      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80051e2:	bf00      	nop
 80051e4:	e004      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80051e6:	bf00      	nop
 80051e8:	e002      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80051ea:	bf00      	nop
 80051ec:	e000      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80051ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051f6:	4b35      	ldr	r3, [pc, #212]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005204:	4931      	ldr	r1, [pc, #196]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005206:	4313      	orrs	r3, r2
 8005208:	658b      	str	r3, [r1, #88]	; 0x58
 800520a:	e001      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d02d      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005224:	d005      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800522a:	d009      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d013      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005230:	e00f      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005232:	4b26      	ldr	r3, [pc, #152]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	4a25      	ldr	r2, [pc, #148]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800523e:	e00c      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3304      	adds	r3, #4
 8005244:	2101      	movs	r1, #1
 8005246:	4618      	mov	r0, r3
 8005248:	f001 faae 	bl	80067a8 <RCCEx_PLL2_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005250:	e003      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
      break;
 8005256:	e000      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800525a:	7dfb      	ldrb	r3, [r7, #23]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005260:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005264:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526c:	4917      	ldr	r1, [pc, #92]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800526e:	4313      	orrs	r3, r2
 8005270:	650b      	str	r3, [r1, #80]	; 0x50
 8005272:	e001      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	7dfb      	ldrb	r3, [r7, #23]
 8005276:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d035      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	2b03      	cmp	r3, #3
 800528a:	d81b      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052d1 	.word	0x080052d1
 8005298:	080052a5 	.word	0x080052a5
 800529c:	080052b3 	.word	0x080052b3
 80052a0:	080052d1 	.word	0x080052d1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	4a08      	ldr	r2, [pc, #32]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80052b0:	e00f      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3304      	adds	r3, #4
 80052b6:	2102      	movs	r1, #2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 fa75 	bl	80067a8 <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80052c2:	e006      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	75fb      	strb	r3, [r7, #23]
      break;
 80052c8:	e003      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80052ca:	bf00      	nop
 80052cc:	58024400 	.word	0x58024400
      break;
 80052d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80052d8:	4bba      	ldr	r3, [pc, #744]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052dc:	f023 0203 	bic.w	r2, r3, #3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	49b7      	ldr	r1, [pc, #732]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052ea:	e001      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
 80052ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8086 	beq.w	800540a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052fe:	4bb2      	ldr	r3, [pc, #712]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4ab1      	ldr	r2, [pc, #708]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005308:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800530a:	f7fb fc53 	bl	8000bb4 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005310:	e009      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005312:	f7fb fc4f 	bl	8000bb4 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b64      	cmp	r3, #100	; 0x64
 800531e:	d902      	bls.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	75fb      	strb	r3, [r7, #23]
        break;
 8005324:	e005      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005326:	4ba8      	ldr	r3, [pc, #672]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0ef      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d166      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005338:	4ba2      	ldr	r3, [pc, #648]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800533a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005342:	4053      	eors	r3, r2
 8005344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005348:	2b00      	cmp	r3, #0
 800534a:	d013      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800534c:	4b9d      	ldr	r3, [pc, #628]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800534e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005354:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005356:	4b9b      	ldr	r3, [pc, #620]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	4a9a      	ldr	r2, [pc, #616]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005362:	4b98      	ldr	r3, [pc, #608]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	4a97      	ldr	r2, [pc, #604]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800536e:	4a95      	ldr	r2, [pc, #596]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800537a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537e:	d115      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fb fc18 	bl	8000bb4 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005386:	e00b      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fb fc14 	bl	8000bb4 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	; 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d902      	bls.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	75fb      	strb	r3, [r7, #23]
            break;
 800539e:	e005      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053a0:	4b88      	ldr	r3, [pc, #544]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0ed      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d126      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053c0:	d10d      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80053c2:	4b80      	ldr	r3, [pc, #512]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053d0:	0919      	lsrs	r1, r3, #4
 80053d2:	4b7e      	ldr	r3, [pc, #504]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80053d4:	400b      	ands	r3, r1
 80053d6:	497b      	ldr	r1, [pc, #492]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	610b      	str	r3, [r1, #16]
 80053dc:	e005      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80053de:	4b79      	ldr	r3, [pc, #484]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	4a78      	ldr	r2, [pc, #480]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053e8:	6113      	str	r3, [r2, #16]
 80053ea:	4b76      	ldr	r3, [pc, #472]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f8:	4972      	ldr	r1, [pc, #456]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	670b      	str	r3, [r1, #112]	; 0x70
 80053fe:	e004      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	75bb      	strb	r3, [r7, #22]
 8005404:	e001      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005406:	7dfb      	ldrb	r3, [r7, #23]
 8005408:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d07d      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800541a:	2b28      	cmp	r3, #40	; 0x28
 800541c:	d866      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800541e:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	080054f3 	.word	0x080054f3
 8005428:	080054ed 	.word	0x080054ed
 800542c:	080054ed 	.word	0x080054ed
 8005430:	080054ed 	.word	0x080054ed
 8005434:	080054ed 	.word	0x080054ed
 8005438:	080054ed 	.word	0x080054ed
 800543c:	080054ed 	.word	0x080054ed
 8005440:	080054ed 	.word	0x080054ed
 8005444:	080054c9 	.word	0x080054c9
 8005448:	080054ed 	.word	0x080054ed
 800544c:	080054ed 	.word	0x080054ed
 8005450:	080054ed 	.word	0x080054ed
 8005454:	080054ed 	.word	0x080054ed
 8005458:	080054ed 	.word	0x080054ed
 800545c:	080054ed 	.word	0x080054ed
 8005460:	080054ed 	.word	0x080054ed
 8005464:	080054db 	.word	0x080054db
 8005468:	080054ed 	.word	0x080054ed
 800546c:	080054ed 	.word	0x080054ed
 8005470:	080054ed 	.word	0x080054ed
 8005474:	080054ed 	.word	0x080054ed
 8005478:	080054ed 	.word	0x080054ed
 800547c:	080054ed 	.word	0x080054ed
 8005480:	080054ed 	.word	0x080054ed
 8005484:	080054f3 	.word	0x080054f3
 8005488:	080054ed 	.word	0x080054ed
 800548c:	080054ed 	.word	0x080054ed
 8005490:	080054ed 	.word	0x080054ed
 8005494:	080054ed 	.word	0x080054ed
 8005498:	080054ed 	.word	0x080054ed
 800549c:	080054ed 	.word	0x080054ed
 80054a0:	080054ed 	.word	0x080054ed
 80054a4:	080054f3 	.word	0x080054f3
 80054a8:	080054ed 	.word	0x080054ed
 80054ac:	080054ed 	.word	0x080054ed
 80054b0:	080054ed 	.word	0x080054ed
 80054b4:	080054ed 	.word	0x080054ed
 80054b8:	080054ed 	.word	0x080054ed
 80054bc:	080054ed 	.word	0x080054ed
 80054c0:	080054ed 	.word	0x080054ed
 80054c4:	080054f3 	.word	0x080054f3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	2101      	movs	r1, #1
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 f96a 	bl	80067a8 <RCCEx_PLL2_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80054d8:	e00c      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 fa13 	bl	800690c <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80054ea:	e003      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
      break;
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80054f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80054fa:	4b32      	ldr	r3, [pc, #200]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005506:	492f      	ldr	r1, [pc, #188]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005508:	4313      	orrs	r3, r2
 800550a:	654b      	str	r3, [r1, #84]	; 0x54
 800550c:	e001      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d037      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005522:	2b05      	cmp	r3, #5
 8005524:	d820      	bhi.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005526:	a201      	add	r2, pc, #4	; (adr r2, 800552c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	0800556f 	.word	0x0800556f
 8005530:	08005545 	.word	0x08005545
 8005534:	08005557 	.word	0x08005557
 8005538:	0800556f 	.word	0x0800556f
 800553c:	0800556f 	.word	0x0800556f
 8005540:	0800556f 	.word	0x0800556f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	2101      	movs	r1, #1
 800554a:	4618      	mov	r0, r3
 800554c:	f001 f92c 	bl	80067a8 <RCCEx_PLL2_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005554:	e00c      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3324      	adds	r3, #36	; 0x24
 800555a:	2101      	movs	r1, #1
 800555c:	4618      	mov	r0, r3
 800555e:	f001 f9d5 	bl	800690c <RCCEx_PLL3_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005566:	e003      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	75fb      	strb	r3, [r7, #23]
      break;
 800556c:	e000      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800556e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005576:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f023 0207 	bic.w	r2, r3, #7
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005582:	4910      	ldr	r1, [pc, #64]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005584:	4313      	orrs	r3, r2
 8005586:	654b      	str	r3, [r1, #84]	; 0x54
 8005588:	e001      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d040      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a0:	2b05      	cmp	r3, #5
 80055a2:	d827      	bhi.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80055a4:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055fb 	.word	0x080055fb
 80055b0:	080055d1 	.word	0x080055d1
 80055b4:	080055e3 	.word	0x080055e3
 80055b8:	080055fb 	.word	0x080055fb
 80055bc:	080055fb 	.word	0x080055fb
 80055c0:	080055fb 	.word	0x080055fb
 80055c4:	58024400 	.word	0x58024400
 80055c8:	58024800 	.word	0x58024800
 80055cc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	2101      	movs	r1, #1
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 f8e6 	bl	80067a8 <RCCEx_PLL2_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80055e0:	e00c      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3324      	adds	r3, #36	; 0x24
 80055e6:	2101      	movs	r1, #1
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 f98f 	bl	800690c <RCCEx_PLL3_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80055f2:	e003      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	75fb      	strb	r3, [r7, #23]
      break;
 80055f8:	e000      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80055fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005602:	4bb2      	ldr	r3, [pc, #712]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	f023 0207 	bic.w	r2, r3, #7
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005610:	49ae      	ldr	r1, [pc, #696]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	658b      	str	r3, [r1, #88]	; 0x58
 8005616:	e001      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d044      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800562e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005632:	d01b      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005638:	d805      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d022      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800563e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005642:	d00a      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005644:	e01b      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564a:	d01d      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800564c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005650:	d01c      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005652:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005656:	d01b      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005658:	e011      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3304      	adds	r3, #4
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f001 f8a1 	bl	80067a8 <RCCEx_PLL2_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800566a:	e012      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3324      	adds	r3, #36	; 0x24
 8005670:	2102      	movs	r1, #2
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f94a 	bl	800690c <RCCEx_PLL3_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800567c:	e009      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	75fb      	strb	r3, [r7, #23]
      break;
 8005682:	e006      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005684:	bf00      	nop
 8005686:	e004      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005688:	bf00      	nop
 800568a:	e002      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005698:	4b8c      	ldr	r3, [pc, #560]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a6:	4989      	ldr	r1, [pc, #548]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	654b      	str	r3, [r1, #84]	; 0x54
 80056ac:	e001      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d044      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c8:	d01b      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80056ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ce:	d805      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d022      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80056d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d8:	d00a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80056da:	e01b      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e0:	d01d      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80056e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80056e6:	d01c      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80056e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ec:	d01b      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80056ee:	e011      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	2100      	movs	r1, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	f001 f856 	bl	80067a8 <RCCEx_PLL2_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005700:	e012      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3324      	adds	r3, #36	; 0x24
 8005706:	2102      	movs	r1, #2
 8005708:	4618      	mov	r0, r3
 800570a:	f001 f8ff 	bl	800690c <RCCEx_PLL3_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005712:	e009      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
      break;
 8005718:	e006      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800571a:	bf00      	nop
 800571c:	e004      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800572e:	4b67      	ldr	r3, [pc, #412]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005732:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800573c:	4963      	ldr	r1, [pc, #396]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800573e:	4313      	orrs	r3, r2
 8005740:	658b      	str	r3, [r1, #88]	; 0x58
 8005742:	e001      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
 8005746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	2b00      	cmp	r3, #0
 8005752:	d044      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800575a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800575e:	d01b      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005764:	d805      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d022      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576e:	d00a      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005770:	e01b      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005776:	d01d      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005778:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800577c:	d01c      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800577e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005782:	d01b      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005784:	e011      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3304      	adds	r3, #4
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f001 f80b 	bl	80067a8 <RCCEx_PLL2_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005796:	e012      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3324      	adds	r3, #36	; 0x24
 800579c:	2102      	movs	r1, #2
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 f8b4 	bl	800690c <RCCEx_PLL3_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80057a8:	e009      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
      break;
 80057ae:	e006      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80057b0:	bf00      	nop
 80057b2:	e004      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80057b4:	bf00      	nop
 80057b6:	e002      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80057b8:	bf00      	nop
 80057ba:	e000      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80057bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80057c4:	4b41      	ldr	r3, [pc, #260]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057d2:	493e      	ldr	r1, [pc, #248]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	658b      	str	r3, [r1, #88]	; 0x58
 80057d8:	e001      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d01a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f4:	d10a      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3324      	adds	r3, #36	; 0x24
 80057fa:	2102      	movs	r1, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 f885 	bl	800690c <RCCEx_PLL3_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800580c:	4b2f      	ldr	r3, [pc, #188]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800580e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005810:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800581a:	492c      	ldr	r1, [pc, #176]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800581c:	4313      	orrs	r3, r2
 800581e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01a      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005836:	d10a      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3324      	adds	r3, #36	; 0x24
 800583c:	2102      	movs	r1, #2
 800583e:	4618      	mov	r0, r3
 8005840:	f001 f864 	bl	800690c <RCCEx_PLL3_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800584e:	4b1f      	ldr	r3, [pc, #124]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800585c:	491b      	ldr	r1, [pc, #108]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800585e:	4313      	orrs	r3, r2
 8005860:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d032      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005878:	d00d      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800587a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800587e:	d016      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d111      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	2100      	movs	r1, #0
 800588a:	4618      	mov	r0, r3
 800588c:	f000 ff8c 	bl	80067a8 <RCCEx_PLL2_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005894:	e00c      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3324      	adds	r3, #36	; 0x24
 800589a:	2102      	movs	r1, #2
 800589c:	4618      	mov	r0, r3
 800589e:	f001 f835 	bl	800690c <RCCEx_PLL3_Config>
 80058a2:	4603      	mov	r3, r0
 80058a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80058a6:	e003      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	75fb      	strb	r3, [r7, #23]
      break;
 80058ac:	e000      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80058ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058c4:	4901      	ldr	r1, [pc, #4]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	658b      	str	r3, [r1, #88]	; 0x58
 80058ca:	e003      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80058cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d02f      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058ea:	d00c      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80058ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058f0:	d015      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80058f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f6:	d10f      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f8:	4b71      	ldr	r3, [pc, #452]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	4a70      	ldr	r2, [pc, #448]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005904:	e00c      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3324      	adds	r3, #36	; 0x24
 800590a:	2101      	movs	r1, #1
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fffd 	bl	800690c <RCCEx_PLL3_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005916:	e003      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
      break;
 800591c:	e000      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800591e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005926:	4b66      	ldr	r3, [pc, #408]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005934:	4962      	ldr	r1, [pc, #392]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005936:	4313      	orrs	r3, r2
 8005938:	654b      	str	r3, [r1, #84]	; 0x54
 800593a:	e001      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593c:	7dfb      	ldrb	r3, [r7, #23]
 800593e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d029      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d007      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800595a:	e00f      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595c:	4b58      	ldr	r3, [pc, #352]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4a57      	ldr	r2, [pc, #348]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005968:	e00b      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3304      	adds	r3, #4
 800596e:	2102      	movs	r1, #2
 8005970:	4618      	mov	r0, r3
 8005972:	f000 ff19 	bl	80067a8 <RCCEx_PLL2_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800597a:	e002      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	75fb      	strb	r3, [r7, #23]
      break;
 8005980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005982:	7dfb      	ldrb	r3, [r7, #23]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005988:	4b4d      	ldr	r3, [pc, #308]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800598a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005994:	494a      	ldr	r1, [pc, #296]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005996:	4313      	orrs	r3, r2
 8005998:	64cb      	str	r3, [r1, #76]	; 0x4c
 800599a:	e001      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3324      	adds	r3, #36	; 0x24
 80059b0:	2102      	movs	r1, #2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 ffaa 	bl	800690c <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d02f      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	d00c      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80059d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059dc:	d802      	bhi.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d011      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80059e2:	e00d      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80059e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e8:	d00f      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ee:	d00e      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80059f0:	e006      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f2:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	4a32      	ldr	r2, [pc, #200]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80059fe:	e007      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	75fb      	strb	r3, [r7, #23]
      break;
 8005a04:	e004      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005a06:	bf00      	nop
 8005a08:	e002      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e000      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a16:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a22:	4927      	ldr	r1, [pc, #156]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	654b      	str	r3, [r1, #84]	; 0x54
 8005a28:	e001      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
 8005a2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a3a:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	491e      	ldr	r1, [pc, #120]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a64:	4916      	ldr	r1, [pc, #88]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00d      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	4a11      	ldr	r2, [pc, #68]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a80:	6113      	str	r3, [r2, #16]
 8005a82:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a8c:	490c      	ldr	r1, [pc, #48]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	da08      	bge.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa6:	4906      	ldr	r1, [pc, #24]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005aac:	7dbb      	ldrb	r3, [r7, #22]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	58024400 	.word	0x58024400

08005ac4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b090      	sub	sp, #64	; 0x40
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad2:	d150      	bne.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005ad4:	4ba1      	ldr	r3, [pc, #644]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d844      	bhi.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005ae4:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b01 	.word	0x08005b01
 8005af0:	08005b11 	.word	0x08005b11
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	08005b69 	.word	0x08005b69
 8005afc:	08005b31 	.word	0x08005b31
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fd03 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b0e:	e241      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b10:	f107 0318 	add.w	r3, r7, #24
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fa63 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b1e:	e239      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b20:	f107 030c 	add.w	r3, r7, #12
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fba7 	bl	8006278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b2e:	e231      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b30:	4b8a      	ldr	r3, [pc, #552]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005b40:	4b87      	ldr	r3, [pc, #540]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005b44:	e226      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b4c:	d102      	bne.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8005b4e:	4b85      	ldr	r3, [pc, #532]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b52:	e21f      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b5a:	d102      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005b5c:	4b82      	ldr	r3, [pc, #520]	; (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b60:	e218      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b66:	e215      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b68:	4b80      	ldr	r3, [pc, #512]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b6c:	e212      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b72:	bf00      	nop
 8005b74:	e20e      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b7c:	d14f      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005b7e:	4b77      	ldr	r3, [pc, #476]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b82:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005b86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	2b80      	cmp	r3, #128	; 0x80
 8005b8c:	d01c      	beq.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005b8e:	2b80      	cmp	r3, #128	; 0x80
 8005b90:	d804      	bhi.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d00e      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005b9a:	e03c      	b.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005b9c:	2bc0      	cmp	r3, #192	; 0xc0
 8005b9e:	d037      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba4:	d018      	beq.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005ba6:	e036      	b.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fcaf 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bb6:	e1ed      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bb8:	f107 0318 	add.w	r3, r7, #24
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fa0f 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bc6:	e1e5      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bc8:	f107 030c 	add.w	r3, r7, #12
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fb53 	bl	8006278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bd6:	e1dd      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005bd8:	4b60      	ldr	r3, [pc, #384]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005be8:	4b5d      	ldr	r3, [pc, #372]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005bec:	e1d2      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bf4:	d102      	bne.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8005bf6:	4b5b      	ldr	r3, [pc, #364]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bfa:	e1cb      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c02:	d102      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005c04:	4b58      	ldr	r3, [pc, #352]	; (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c08:	e1c4      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c0e:	e1c1      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c10:	4b56      	ldr	r3, [pc, #344]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c14:	e1be      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c1a:	bf00      	nop
 8005c1c:	e1ba      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d153      	bne.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005c26:	4b4d      	ldr	r3, [pc, #308]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c36:	d01f      	beq.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c3c:	d805      	bhi.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c46:	d00f      	beq.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005c48:	e03d      	b.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005c4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c4e:	d037      	beq.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005c50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c54:	d018      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005c56:	e036      	b.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fc57 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c66:	e195      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c68:	f107 0318 	add.w	r3, r7, #24
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f9b7 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c76:	e18d      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c78:	f107 030c 	add.w	r3, r7, #12
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fafb 	bl	8006278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c86:	e185      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c88:	4b34      	ldr	r3, [pc, #208]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005c98:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005c9c:	e17a      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ca4:	d102      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8005ca6:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005caa:	e173      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cb2:	d102      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005cb4:	4b2c      	ldr	r3, [pc, #176]	; (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cb8:	e16c      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cbe:	e169      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cc0:	4b2a      	ldr	r3, [pc, #168]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cc4:	e166      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cca:	bf00      	nop
 8005ccc:	e162      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd4:	d15d      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005cd6:	4b21      	ldr	r3, [pc, #132]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005cde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ce6:	d01f      	beq.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cec:	d805      	bhi.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cf6:	d00f      	beq.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005cf8:	e047      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005cfa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cfe:	d041      	beq.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d04:	d018      	beq.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005d06:	e040      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fbff 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d16:	e13d      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d18:	f107 0318 	add.w	r3, r7, #24
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f95f 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d26:	e135      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d28:	f107 030c 	add.w	r3, r7, #12
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 faa3 	bl	8006278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d36:	e12d      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005d4c:	e122      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d54:	d10c      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8005d56:	4b03      	ldr	r3, [pc, #12]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d5a:	e11b      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005d5c:	58024400 	.word	0x58024400
 8005d60:	03d09000 	.word	0x03d09000
 8005d64:	003d0900 	.word	0x003d0900
 8005d68:	017d7840 	.word	0x017d7840
 8005d6c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d76:	d102      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8005d78:	4b89      	ldr	r3, [pc, #548]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d7c:	e10a      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d82:	e107      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d84:	4b87      	ldr	r3, [pc, #540]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d88:	e104      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d8e:	bf00      	nop
 8005d90:	e100      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d98:	d153      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005d9a:	4b83      	ldr	r3, [pc, #524]	; (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005da2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005daa:	d01f      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db0:	d805      	bhi.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dba:	d00f      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005dbc:	e03d      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005dbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005dc2:	d037      	beq.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc8:	d018      	beq.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005dca:	e036      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fb9d 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dda:	e0db      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ddc:	f107 0318 	add.w	r3, r7, #24
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 f8fd 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dea:	e0d3      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dec:	f107 030c 	add.w	r3, r7, #12
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fa41 	bl	8006278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dfa:	e0cb      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005dfc:	4b6a      	ldr	r3, [pc, #424]	; (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005e0c:	4b67      	ldr	r3, [pc, #412]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005e10:	e0c0      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e18:	d102      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8005e1a:	4b65      	ldr	r3, [pc, #404]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e1e:	e0b9      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e26:	d102      	bne.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8005e28:	4b5d      	ldr	r3, [pc, #372]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e2c:	e0b2      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e32:	e0af      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e34:	4b5b      	ldr	r3, [pc, #364]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e38:	e0ac      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e3e:	bf00      	nop
 8005e40:	e0a8      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e48:	d13d      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005e4a:	4b57      	ldr	r3, [pc, #348]	; (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5a:	d00c      	beq.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e60:	d011      	beq.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d12b      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e66:	f107 0318 	add.w	r3, r7, #24
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 f8b8 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e74:	e08e      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e76:	f107 030c 	add.w	r3, r7, #12
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f9fc 	bl	8006278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e84:	e086      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e86:	4b48      	ldr	r3, [pc, #288]	; (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005e96:	4b45      	ldr	r3, [pc, #276]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005e9a:	e07b      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ea2:	d102      	bne.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005ea4:	4b42      	ldr	r3, [pc, #264]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ea8:	e074      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eb0:	d102      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eb6:	e06d      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ebc:	e06a      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ec2:	bf00      	nop
 8005ec4:	e066      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ecc:	d11f      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005ece:	4b36      	ldr	r3, [pc, #216]	; (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ed6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee2:	d008      	beq.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005ee4:	e00f      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fb10 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ef4:	e04e      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ef6:	f107 0318 	add.w	r3, r7, #24
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 f870 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f04:	e046      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f0a:	bf00      	nop
 8005f0c:	e042      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f14:	d13c      	bne.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005f1e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f26:	d01e      	beq.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8005f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f2c:	d805      	bhi.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00d      	beq.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f36:	d00e      	beq.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8005f38:	e026      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d01d      	beq.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f44:	d01d      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005f46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f4a:	d014      	beq.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8005f4c:	e01c      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005f4e:	f000 f831 	bl	8005fb4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f52:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005f54:	e01e      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f56:	f107 0318 	add.w	r3, r7, #24
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f840 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f64:	e016      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f66:	f107 030c 	add.w	r3, r7, #12
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 f984 	bl	8006278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f74:	e00e      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8005f76:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005f78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f7a:	e00b      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f80:	e008      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f86:	e005      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f8c:	bf00      	nop
 8005f8e:	e001      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3740      	adds	r7, #64	; 0x40
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	017d7840 	.word	0x017d7840
 8005fa4:	00bb8000 	.word	0x00bb8000
 8005fa8:	58024400 	.word	0x58024400
 8005fac:	03d09000 	.word	0x03d09000
 8005fb0:	003d0900 	.word	0x003d0900

08005fb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005fb8:	f7fe fe76 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4a04      	ldr	r2, [pc, #16]	; (8005fdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005fca:	5cd3      	ldrb	r3, [r2, r3]
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	0800a388 	.word	0x0800a388

08005fe0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b089      	sub	sp, #36	; 0x24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fe8:	4b9d      	ldr	r3, [pc, #628]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f003 0303 	and.w	r3, r3, #3
 8005ff0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005ff2:	4b9b      	ldr	r3, [pc, #620]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	0b1b      	lsrs	r3, r3, #12
 8005ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ffc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ffe:	4b98      	ldr	r3, [pc, #608]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800600a:	4b95      	ldr	r3, [pc, #596]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	08db      	lsrs	r3, r3, #3
 8006010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 810a 	beq.w	8006242 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d05a      	beq.n	80060ea <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006034:	2b01      	cmp	r3, #1
 8006036:	d302      	bcc.n	800603e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006038:	2b02      	cmp	r3, #2
 800603a:	d078      	beq.n	800612e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800603c:	e099      	b.n	8006172 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800603e:	4b88      	ldr	r3, [pc, #544]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d02d      	beq.n	80060a6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800604a:	4b85      	ldr	r3, [pc, #532]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	08db      	lsrs	r3, r3, #3
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	4a83      	ldr	r2, [pc, #524]	; (8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006056:	fa22 f303 	lsr.w	r3, r2, r3
 800605a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006074:	4b7a      	ldr	r3, [pc, #488]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607c:	ee07 3a90 	vmov	s15, r3
 8006080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006084:	ed97 6a03 	vldr	s12, [r7, #12]
 8006088:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800608c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060a4:	e087      	b.n	80061b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	ee07 3a90 	vmov	s15, r3
 80060ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800626c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80060b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b8:	4b69      	ldr	r3, [pc, #420]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80060cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80060d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060e8:	e065      	b.n	80061b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80060f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fc:	4b58      	ldr	r3, [pc, #352]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006110:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006128:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800612c:	e043      	b.n	80061b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006138:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006274 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800613c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006140:	4b47      	ldr	r3, [pc, #284]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006150:	ed97 6a03 	vldr	s12, [r7, #12]
 8006154:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006170:	e021      	b.n	80061b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006184:	4b36      	ldr	r3, [pc, #216]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006194:	ed97 6a03 	vldr	s12, [r7, #12]
 8006198:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800619c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061b4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80061b6:	4b2a      	ldr	r3, [pc, #168]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	0a5b      	lsrs	r3, r3, #9
 80061bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80061d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061dc:	ee17 2a90 	vmov	r2, s15
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80061e4:	4b1e      	ldr	r3, [pc, #120]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800620a:	ee17 2a90 	vmov	r2, s15
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006212:	4b13      	ldr	r3, [pc, #76]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	0e1b      	lsrs	r3, r3, #24
 8006218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800621c:	ee07 3a90 	vmov	s15, r3
 8006220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006228:	ee37 7a87 	vadd.f32	s14, s15, s14
 800622c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006238:	ee17 2a90 	vmov	r2, s15
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006240:	e008      	b.n	8006254 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	609a      	str	r2, [r3, #8]
}
 8006254:	bf00      	nop
 8006256:	3724      	adds	r7, #36	; 0x24
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	58024400 	.word	0x58024400
 8006264:	03d09000 	.word	0x03d09000
 8006268:	46000000 	.word	0x46000000
 800626c:	4c742400 	.word	0x4c742400
 8006270:	4a742400 	.word	0x4a742400
 8006274:	4bbebc20 	.word	0x4bbebc20

08006278 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006278:	b480      	push	{r7}
 800627a:	b089      	sub	sp, #36	; 0x24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006280:	4b9d      	ldr	r3, [pc, #628]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800628a:	4b9b      	ldr	r3, [pc, #620]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	0d1b      	lsrs	r3, r3, #20
 8006290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006294:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006296:	4b98      	ldr	r3, [pc, #608]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	0a1b      	lsrs	r3, r3, #8
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80062a2:	4b95      	ldr	r3, [pc, #596]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a6:	08db      	lsrs	r3, r3, #3
 80062a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 810a 	beq.w	80064da <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d05a      	beq.n	8006382 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d302      	bcc.n	80062d6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d078      	beq.n	80063c6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80062d4:	e099      	b.n	800640a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d6:	4b88      	ldr	r3, [pc, #544]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d02d      	beq.n	800633e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062e2:	4b85      	ldr	r3, [pc, #532]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	08db      	lsrs	r3, r3, #3
 80062e8:	f003 0303 	and.w	r3, r3, #3
 80062ec:	4a83      	ldr	r2, [pc, #524]	; (80064fc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80062ee:	fa22 f303 	lsr.w	r3, r2, r3
 80062f2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800630c:	4b7a      	ldr	r3, [pc, #488]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006314:	ee07 3a90 	vmov	s15, r3
 8006318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006320:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006328:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006338:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800633c:	e087      	b.n	800644e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	ee07 3a90 	vmov	s15, r3
 8006344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006348:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800634c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006350:	4b69      	ldr	r3, [pc, #420]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006360:	ed97 6a03 	vldr	s12, [r7, #12]
 8006364:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800636c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006380:	e065      	b.n	800644e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	ee07 3a90 	vmov	s15, r3
 8006388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006394:	4b58      	ldr	r3, [pc, #352]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639c:	ee07 3a90 	vmov	s15, r3
 80063a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80063ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063c4:	e043      	b.n	800644e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	ee07 3a90 	vmov	s15, r3
 80063cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80063d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d8:	4b47      	ldr	r3, [pc, #284]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e0:	ee07 3a90 	vmov	s15, r3
 80063e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80063f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006408:	e021      	b.n	800644e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	ee07 3a90 	vmov	s15, r3
 8006410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006414:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641c:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006424:	ee07 3a90 	vmov	s15, r3
 8006428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006430:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006448:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800644c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800644e:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	0a5b      	lsrs	r3, r3, #9
 8006454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006468:	edd7 6a07 	vldr	s13, [r7, #28]
 800646c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006474:	ee17 2a90 	vmov	r2, s15
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800647c:	4b1e      	ldr	r3, [pc, #120]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006496:	edd7 6a07 	vldr	s13, [r7, #28]
 800649a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800649e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a2:	ee17 2a90 	vmov	r2, s15
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80064aa:	4b13      	ldr	r3, [pc, #76]	; (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	0e1b      	lsrs	r3, r3, #24
 80064b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064d0:	ee17 2a90 	vmov	r2, s15
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064d8:	e008      	b.n	80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	609a      	str	r2, [r3, #8]
}
 80064ec:	bf00      	nop
 80064ee:	3724      	adds	r7, #36	; 0x24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	58024400 	.word	0x58024400
 80064fc:	03d09000 	.word	0x03d09000
 8006500:	46000000 	.word	0x46000000
 8006504:	4c742400 	.word	0x4c742400
 8006508:	4a742400 	.word	0x4a742400
 800650c:	4bbebc20 	.word	0x4bbebc20

08006510 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006510:	b480      	push	{r7}
 8006512:	b089      	sub	sp, #36	; 0x24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006518:	4b9d      	ldr	r3, [pc, #628]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	f003 0303 	and.w	r3, r3, #3
 8006520:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006522:	4b9b      	ldr	r3, [pc, #620]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	091b      	lsrs	r3, r3, #4
 8006528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800652c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800652e:	4b98      	ldr	r3, [pc, #608]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006538:	4b95      	ldr	r3, [pc, #596]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653c:	08db      	lsrs	r3, r3, #3
 800653e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	fb02 f303 	mul.w	r3, r2, r3
 8006548:	ee07 3a90 	vmov	s15, r3
 800654c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006550:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 810a 	beq.w	8006770 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d05a      	beq.n	8006618 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006562:	2b01      	cmp	r3, #1
 8006564:	d302      	bcc.n	800656c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8006566:	2b02      	cmp	r3, #2
 8006568:	d078      	beq.n	800665c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800656a:	e099      	b.n	80066a0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800656c:	4b88      	ldr	r3, [pc, #544]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d02d      	beq.n	80065d4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006578:	4b85      	ldr	r3, [pc, #532]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	08db      	lsrs	r3, r3, #3
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	4a84      	ldr	r2, [pc, #528]	; (8006794 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
 8006588:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	ee07 3a90 	vmov	s15, r3
 8006590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a2:	4b7b      	ldr	r3, [pc, #492]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80065ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80065d2:	e087      	b.n	80066e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80065e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e6:	4b6a      	ldr	r3, [pc, #424]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80065fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800660a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800660e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006616:	e065      	b.n	80066e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	ee07 3a90 	vmov	s15, r3
 800661e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006622:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80067a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800662a:	4b59      	ldr	r3, [pc, #356]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800663a:	ed97 6a03 	vldr	s12, [r7, #12]
 800663e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800664a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800664e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800665a:	e043      	b.n	80066e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006666:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80067a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800666a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800666e:	4b48      	ldr	r3, [pc, #288]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006682:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800668a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800668e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800669a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800669e:	e021      	b.n	80066e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80067a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80066ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b2:	4b37      	ldr	r3, [pc, #220]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80066ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066e2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80066e4:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	0a5b      	lsrs	r3, r3, #9
 80066ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800670a:	ee17 2a90 	vmov	r2, s15
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006712:	4b1f      	ldr	r3, [pc, #124]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	0c1b      	lsrs	r3, r3, #16
 8006718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800671c:	ee07 3a90 	vmov	s15, r3
 8006720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006728:	ee37 7a87 	vadd.f32	s14, s15, s14
 800672c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006738:	ee17 2a90 	vmov	r2, s15
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006740:	4b13      	ldr	r3, [pc, #76]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	0e1b      	lsrs	r3, r3, #24
 8006746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800675a:	edd7 6a07 	vldr	s13, [r7, #28]
 800675e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006766:	ee17 2a90 	vmov	r2, s15
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800676e:	e008      	b.n	8006782 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	609a      	str	r2, [r3, #8]
}
 8006782:	bf00      	nop
 8006784:	3724      	adds	r7, #36	; 0x24
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	58024400 	.word	0x58024400
 8006794:	03d09000 	.word	0x03d09000
 8006798:	46000000 	.word	0x46000000
 800679c:	4c742400 	.word	0x4c742400
 80067a0:	4a742400 	.word	0x4a742400
 80067a4:	4bbebc20 	.word	0x4bbebc20

080067a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067b6:	4b53      	ldr	r3, [pc, #332]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d101      	bne.n	80067c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e099      	b.n	80068fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067c6:	4b4f      	ldr	r3, [pc, #316]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a4e      	ldr	r2, [pc, #312]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80067cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d2:	f7fa f9ef 	bl	8000bb4 <HAL_GetTick>
 80067d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067d8:	e008      	b.n	80067ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80067da:	f7fa f9eb 	bl	8000bb4 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e086      	b.n	80068fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067ec:	4b45      	ldr	r3, [pc, #276]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f0      	bne.n	80067da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067f8:	4b42      	ldr	r3, [pc, #264]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	031b      	lsls	r3, r3, #12
 8006806:	493f      	ldr	r1, [pc, #252]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006808:	4313      	orrs	r3, r2
 800680a:	628b      	str	r3, [r1, #40]	; 0x28
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	3b01      	subs	r3, #1
 8006812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	3b01      	subs	r3, #1
 800681c:	025b      	lsls	r3, r3, #9
 800681e:	b29b      	uxth	r3, r3
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	3b01      	subs	r3, #1
 8006828:	041b      	lsls	r3, r3, #16
 800682a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	3b01      	subs	r3, #1
 8006836:	061b      	lsls	r3, r3, #24
 8006838:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800683c:	4931      	ldr	r1, [pc, #196]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 800683e:	4313      	orrs	r3, r2
 8006840:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006842:	4b30      	ldr	r3, [pc, #192]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	492d      	ldr	r1, [pc, #180]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006850:	4313      	orrs	r3, r2
 8006852:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006854:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	f023 0220 	bic.w	r2, r3, #32
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	4928      	ldr	r1, [pc, #160]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006862:	4313      	orrs	r3, r2
 8006864:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006866:	4b27      	ldr	r3, [pc, #156]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	4a26      	ldr	r2, [pc, #152]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 800686c:	f023 0310 	bic.w	r3, r3, #16
 8006870:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006872:	4b24      	ldr	r3, [pc, #144]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006876:	4b24      	ldr	r3, [pc, #144]	; (8006908 <RCCEx_PLL2_Config+0x160>)
 8006878:	4013      	ands	r3, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	69d2      	ldr	r2, [r2, #28]
 800687e:	00d2      	lsls	r2, r2, #3
 8006880:	4920      	ldr	r1, [pc, #128]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006882:	4313      	orrs	r3, r2
 8006884:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006886:	4b1f      	ldr	r3, [pc, #124]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	4a1e      	ldr	r2, [pc, #120]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 800688c:	f043 0310 	orr.w	r3, r3, #16
 8006890:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d106      	bne.n	80068a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006898:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	4a19      	ldr	r2, [pc, #100]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 800689e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068a4:	e00f      	b.n	80068c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d106      	bne.n	80068ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068ac:	4b15      	ldr	r3, [pc, #84]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	4a14      	ldr	r2, [pc, #80]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068b8:	e005      	b.n	80068c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	4a11      	ldr	r2, [pc, #68]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068c6:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a0e      	ldr	r2, [pc, #56]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068d2:	f7fa f96f 	bl	8000bb4 <HAL_GetTick>
 80068d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068d8:	e008      	b.n	80068ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80068da:	f7fa f96b 	bl	8000bb4 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e006      	b.n	80068fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	58024400 	.word	0x58024400
 8006908:	ffff0007 	.word	0xffff0007

0800690c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800691a:	4b53      	ldr	r3, [pc, #332]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	2b03      	cmp	r3, #3
 8006924:	d101      	bne.n	800692a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e099      	b.n	8006a5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800692a:	4b4f      	ldr	r3, [pc, #316]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a4e      	ldr	r2, [pc, #312]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006936:	f7fa f93d 	bl	8000bb4 <HAL_GetTick>
 800693a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800693c:	e008      	b.n	8006950 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800693e:	f7fa f939 	bl	8000bb4 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e086      	b.n	8006a5e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006950:	4b45      	ldr	r3, [pc, #276]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f0      	bne.n	800693e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800695c:	4b42      	ldr	r3, [pc, #264]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	051b      	lsls	r3, r3, #20
 800696a:	493f      	ldr	r1, [pc, #252]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 800696c:	4313      	orrs	r3, r2
 800696e:	628b      	str	r3, [r1, #40]	; 0x28
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	3b01      	subs	r3, #1
 8006976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	3b01      	subs	r3, #1
 8006980:	025b      	lsls	r3, r3, #9
 8006982:	b29b      	uxth	r3, r3
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	3b01      	subs	r3, #1
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	3b01      	subs	r3, #1
 800699a:	061b      	lsls	r3, r3, #24
 800699c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069a0:	4931      	ldr	r1, [pc, #196]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069a6:	4b30      	ldr	r3, [pc, #192]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	492d      	ldr	r1, [pc, #180]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069b8:	4b2b      	ldr	r3, [pc, #172]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	4928      	ldr	r1, [pc, #160]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069ca:	4b27      	ldr	r3, [pc, #156]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	4a26      	ldr	r2, [pc, #152]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069d6:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <RCCEx_PLL3_Config+0x160>)
 80069dc:	4013      	ands	r3, r2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	69d2      	ldr	r2, [r2, #28]
 80069e2:	00d2      	lsls	r2, r2, #3
 80069e4:	4920      	ldr	r1, [pc, #128]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069ea:	4b1f      	ldr	r3, [pc, #124]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ee:	4a1e      	ldr	r2, [pc, #120]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	4a19      	ldr	r2, [pc, #100]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a08:	e00f      	b.n	8006a2a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d106      	bne.n	8006a1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a10:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	4a14      	ldr	r2, [pc, #80]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a1c:	e005      	b.n	8006a2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a1e:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a22:	4a11      	ldr	r2, [pc, #68]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a0e      	ldr	r2, [pc, #56]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a36:	f7fa f8bd 	bl	8000bb4 <HAL_GetTick>
 8006a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a3c:	e008      	b.n	8006a50 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a3e:	f7fa f8b9 	bl	8000bb4 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e006      	b.n	8006a5e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0f0      	beq.n	8006a3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	58024400 	.word	0x58024400
 8006a6c:	ffff0007 	.word	0xffff0007

08006a70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a70:	b084      	sub	sp, #16
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	f107 001c 	add.w	r0, r7, #28
 8006a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d120      	bne.n	8006aca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	4b25      	ldr	r3, [pc, #148]	; (8006b30 <USB_CoreInit+0xc0>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d105      	bne.n	8006abe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 fa66 	bl	8007f90 <USB_CoreReset>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73fb      	strb	r3, [r7, #15]
 8006ac8:	e01a      	b.n	8006b00 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fa5a 	bl	8007f90 <USB_CoreReset>
 8006adc:	4603      	mov	r3, r0
 8006ade:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
 8006af2:	e005      	b.n	8006b00 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d10b      	bne.n	8006b1e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f043 0206 	orr.w	r2, r3, #6
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f043 0220 	orr.w	r2, r3, #32
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b2a:	b004      	add	sp, #16
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	ffbdffbf 	.word	0xffbdffbf

08006b34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d165      	bne.n	8006c14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4a41      	ldr	r2, [pc, #260]	; (8006c50 <USB_SetTurnaroundTime+0x11c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d906      	bls.n	8006b5e <USB_SetTurnaroundTime+0x2a>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4a40      	ldr	r2, [pc, #256]	; (8006c54 <USB_SetTurnaroundTime+0x120>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d802      	bhi.n	8006b5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b58:	230f      	movs	r3, #15
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e062      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4a3c      	ldr	r2, [pc, #240]	; (8006c54 <USB_SetTurnaroundTime+0x120>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d906      	bls.n	8006b74 <USB_SetTurnaroundTime+0x40>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4a3b      	ldr	r2, [pc, #236]	; (8006c58 <USB_SetTurnaroundTime+0x124>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d802      	bhi.n	8006b74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b6e:	230e      	movs	r3, #14
 8006b70:	617b      	str	r3, [r7, #20]
 8006b72:	e057      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4a38      	ldr	r2, [pc, #224]	; (8006c58 <USB_SetTurnaroundTime+0x124>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d906      	bls.n	8006b8a <USB_SetTurnaroundTime+0x56>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	4a37      	ldr	r2, [pc, #220]	; (8006c5c <USB_SetTurnaroundTime+0x128>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d802      	bhi.n	8006b8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b84:	230d      	movs	r3, #13
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	e04c      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4a33      	ldr	r2, [pc, #204]	; (8006c5c <USB_SetTurnaroundTime+0x128>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d906      	bls.n	8006ba0 <USB_SetTurnaroundTime+0x6c>
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4a32      	ldr	r2, [pc, #200]	; (8006c60 <USB_SetTurnaroundTime+0x12c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d802      	bhi.n	8006ba0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b9a:	230c      	movs	r3, #12
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	e041      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4a2f      	ldr	r2, [pc, #188]	; (8006c60 <USB_SetTurnaroundTime+0x12c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d906      	bls.n	8006bb6 <USB_SetTurnaroundTime+0x82>
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4a2e      	ldr	r2, [pc, #184]	; (8006c64 <USB_SetTurnaroundTime+0x130>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d802      	bhi.n	8006bb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006bb0:	230b      	movs	r3, #11
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e036      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	4a2a      	ldr	r2, [pc, #168]	; (8006c64 <USB_SetTurnaroundTime+0x130>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d906      	bls.n	8006bcc <USB_SetTurnaroundTime+0x98>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4a29      	ldr	r2, [pc, #164]	; (8006c68 <USB_SetTurnaroundTime+0x134>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d802      	bhi.n	8006bcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006bc6:	230a      	movs	r3, #10
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	e02b      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4a26      	ldr	r2, [pc, #152]	; (8006c68 <USB_SetTurnaroundTime+0x134>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d906      	bls.n	8006be2 <USB_SetTurnaroundTime+0xae>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4a25      	ldr	r2, [pc, #148]	; (8006c6c <USB_SetTurnaroundTime+0x138>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d802      	bhi.n	8006be2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bdc:	2309      	movs	r3, #9
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e020      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4a21      	ldr	r2, [pc, #132]	; (8006c6c <USB_SetTurnaroundTime+0x138>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d906      	bls.n	8006bf8 <USB_SetTurnaroundTime+0xc4>
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4a20      	ldr	r2, [pc, #128]	; (8006c70 <USB_SetTurnaroundTime+0x13c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d802      	bhi.n	8006bf8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006bf2:	2308      	movs	r3, #8
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e015      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4a1d      	ldr	r2, [pc, #116]	; (8006c70 <USB_SetTurnaroundTime+0x13c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d906      	bls.n	8006c0e <USB_SetTurnaroundTime+0xda>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4a1c      	ldr	r2, [pc, #112]	; (8006c74 <USB_SetTurnaroundTime+0x140>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d802      	bhi.n	8006c0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c08:	2307      	movs	r3, #7
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	e00a      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c0e:	2306      	movs	r3, #6
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e007      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d102      	bne.n	8006c20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c1a:	2309      	movs	r3, #9
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	e001      	b.n	8006c24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c20:	2309      	movs	r3, #9
 8006c22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	029b      	lsls	r3, r3, #10
 8006c38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	371c      	adds	r7, #28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	00d8acbf 	.word	0x00d8acbf
 8006c54:	00e4e1bf 	.word	0x00e4e1bf
 8006c58:	00f423ff 	.word	0x00f423ff
 8006c5c:	0106737f 	.word	0x0106737f
 8006c60:	011a499f 	.word	0x011a499f
 8006c64:	01312cff 	.word	0x01312cff
 8006c68:	014ca43f 	.word	0x014ca43f
 8006c6c:	016e35ff 	.word	0x016e35ff
 8006c70:	01a6ab1f 	.word	0x01a6ab1f
 8006c74:	01e847ff 	.word	0x01e847ff

08006c78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f043 0201 	orr.w	r2, r3, #1
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f023 0201 	bic.w	r2, r3, #1
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d106      	bne.n	8006ce8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60da      	str	r2, [r3, #12]
 8006ce6:	e00b      	b.n	8006d00 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60da      	str	r2, [r3, #12]
 8006cfa:	e001      	b.n	8006d00 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e003      	b.n	8006d08 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006d00:	2032      	movs	r0, #50	; 0x32
 8006d02:	f7f9 ff63 	bl	8000bcc <HAL_Delay>

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d10:	b084      	sub	sp, #16
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	e009      	b.n	8006d44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	3340      	adds	r3, #64	; 0x40
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	3301      	adds	r3, #1
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b0e      	cmp	r3, #14
 8006d48:	d9f2      	bls.n	8006d30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11c      	bne.n	8006d8a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e005      	b.n	8006d96 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	2300      	movs	r3, #0
 8006da0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da8:	4619      	mov	r1, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db0:	461a      	mov	r2, r3
 8006db2:	680b      	ldr	r3, [r1, #0]
 8006db4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d10c      	bne.n	8006dd6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d104      	bne.n	8006dcc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f949 	bl	800705c <USB_SetDevSpeed>
 8006dca:	e008      	b.n	8006dde <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006dcc:	2101      	movs	r1, #1
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f944 	bl	800705c <USB_SetDevSpeed>
 8006dd4:	e003      	b.n	8006dde <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006dd6:	2103      	movs	r1, #3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f93f 	bl	800705c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dde:	2110      	movs	r1, #16
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f8f3 	bl	8006fcc <USB_FlushTxFifo>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f911 	bl	8007018 <USB_FlushRxFifo>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e06:	461a      	mov	r2, r3
 8006e08:	2300      	movs	r3, #0
 8006e0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e12:	461a      	mov	r2, r3
 8006e14:	2300      	movs	r3, #0
 8006e16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	461a      	mov	r2, r3
 8006e20:	2300      	movs	r3, #0
 8006e22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e24:	2300      	movs	r3, #0
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	e043      	b.n	8006eb2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e40:	d118      	bne.n	8006e74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e54:	461a      	mov	r2, r3
 8006e56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	e013      	b.n	8006e86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	e008      	b.n	8006e86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e80:	461a      	mov	r2, r3
 8006e82:	2300      	movs	r3, #0
 8006e84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e92:	461a      	mov	r2, r3
 8006e94:	2300      	movs	r3, #0
 8006e96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d3b7      	bcc.n	8006e2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
 8006ebe:	e043      	b.n	8006f48 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ed6:	d118      	bne.n	8006f0a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	461a      	mov	r2, r3
 8006eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	e013      	b.n	8006f1c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f00:	461a      	mov	r2, r3
 8006f02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	e008      	b.n	8006f1c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	461a      	mov	r2, r3
 8006f18:	2300      	movs	r3, #0
 8006f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	461a      	mov	r2, r3
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3301      	adds	r3, #1
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d3b7      	bcc.n	8006ec0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	f043 0210 	orr.w	r2, r3, #16
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <USB_DevInit+0x2b4>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	f043 0208 	orr.w	r2, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d105      	bne.n	8006fb4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <USB_DevInit+0x2b8>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fc0:	b004      	add	sp, #16
 8006fc2:	4770      	bx	lr
 8006fc4:	803c3800 	.word	0x803c3800
 8006fc8:	40000004 	.word	0x40000004

08006fcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	019b      	lsls	r3, r3, #6
 8006fde:	f043 0220 	orr.w	r2, r3, #32
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4a09      	ldr	r2, [pc, #36]	; (8007014 <USB_FlushTxFifo+0x48>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d901      	bls.n	8006ff8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e006      	b.n	8007006 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b20      	cmp	r3, #32
 8007002:	d0f0      	beq.n	8006fe6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	00030d40 	.word	0x00030d40

08007018 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2210      	movs	r2, #16
 8007028:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3301      	adds	r3, #1
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4a09      	ldr	r2, [pc, #36]	; (8007058 <USB_FlushRxFifo+0x40>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d901      	bls.n	800703c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e006      	b.n	800704a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b10      	cmp	r3, #16
 8007046:	d0f0      	beq.n	800702a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	00030d40 	.word	0x00030d40

0800705c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	68f9      	ldr	r1, [r7, #12]
 8007078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800707c:	4313      	orrs	r3, r2
 800707e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800708e:	b480      	push	{r7}
 8007090:	b087      	sub	sp, #28
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 0306 	and.w	r3, r3, #6
 80070a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]
 80070b2:	e00a      	b.n	80070ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d002      	beq.n	80070c0 <USB_GetDevSpeed+0x32>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b06      	cmp	r3, #6
 80070be:	d102      	bne.n	80070c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80070c0:	2302      	movs	r3, #2
 80070c2:	75fb      	strb	r3, [r7, #23]
 80070c4:	e001      	b.n	80070ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80070c6:	230f      	movs	r3, #15
 80070c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	785b      	ldrb	r3, [r3, #1]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d139      	bne.n	8007168 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	2101      	movs	r1, #1
 8007106:	fa01 f303 	lsl.w	r3, r1, r3
 800710a:	b29b      	uxth	r3, r3
 800710c:	68f9      	ldr	r1, [r7, #12]
 800710e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007112:	4313      	orrs	r3, r2
 8007114:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d153      	bne.n	80071d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	78db      	ldrb	r3, [r3, #3]
 8007146:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007148:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	059b      	lsls	r3, r3, #22
 800714e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007150:	431a      	orrs	r2, r3
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	0159      	lsls	r1, r3, #5
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	440b      	add	r3, r1
 800715a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715e:	4619      	mov	r1, r3
 8007160:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <USB_ActivateEndpoint+0x10c>)
 8007162:	4313      	orrs	r3, r2
 8007164:	600b      	str	r3, [r1, #0]
 8007166:	e035      	b.n	80071d4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	2101      	movs	r1, #1
 800717a:	fa01 f303 	lsl.w	r3, r1, r3
 800717e:	041b      	lsls	r3, r3, #16
 8007180:	68f9      	ldr	r1, [r7, #12]
 8007182:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007186:	4313      	orrs	r3, r2
 8007188:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d119      	bne.n	80071d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	78db      	ldrb	r3, [r3, #3]
 80071ba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071bc:	430b      	orrs	r3, r1
 80071be:	431a      	orrs	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	0159      	lsls	r1, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	440b      	add	r3, r1
 80071c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071cc:	4619      	mov	r1, r3
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <USB_ActivateEndpoint+0x10c>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	10008000 	.word	0x10008000

080071e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	785b      	ldrb	r3, [r3, #1]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d135      	bne.n	8007270 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	f003 030f 	and.w	r3, r3, #15
 8007214:	2101      	movs	r1, #1
 8007216:	fa01 f303 	lsl.w	r3, r1, r3
 800721a:	b29b      	uxth	r3, r3
 800721c:	43db      	mvns	r3, r3
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007224:	4013      	ands	r3, r2
 8007226:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722e:	69da      	ldr	r2, [r3, #28]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	2101      	movs	r1, #1
 800723a:	fa01 f303 	lsl.w	r3, r1, r3
 800723e:	b29b      	uxth	r3, r3
 8007240:	43db      	mvns	r3, r3
 8007242:	68f9      	ldr	r1, [r7, #12]
 8007244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007248:	4013      	ands	r3, r2
 800724a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	0159      	lsls	r1, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	440b      	add	r3, r1
 8007262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007266:	4619      	mov	r1, r3
 8007268:	4b1f      	ldr	r3, [pc, #124]	; (80072e8 <USB_DeactivateEndpoint+0x100>)
 800726a:	4013      	ands	r3, r2
 800726c:	600b      	str	r3, [r1, #0]
 800726e:	e034      	b.n	80072da <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	2101      	movs	r1, #1
 8007282:	fa01 f303 	lsl.w	r3, r1, r3
 8007286:	041b      	lsls	r3, r3, #16
 8007288:	43db      	mvns	r3, r3
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007290:	4013      	ands	r3, r2
 8007292:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	2101      	movs	r1, #1
 80072a6:	fa01 f303 	lsl.w	r3, r1, r3
 80072aa:	041b      	lsls	r3, r3, #16
 80072ac:	43db      	mvns	r3, r3
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b4:	4013      	ands	r3, r2
 80072b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	0159      	lsls	r1, r3, #5
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	440b      	add	r3, r1
 80072ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d2:	4619      	mov	r1, r3
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <USB_DeactivateEndpoint+0x104>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	ec337800 	.word	0xec337800
 80072ec:	eff37800 	.word	0xeff37800

080072f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b01      	cmp	r3, #1
 800730e:	f040 8163 	bne.w	80075d8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d132      	bne.n	8007380 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	0159      	lsls	r1, r3, #5
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	440b      	add	r3, r1
 8007330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007334:	4619      	mov	r1, r3
 8007336:	4ba5      	ldr	r3, [pc, #660]	; (80075cc <USB_EPStartXfer+0x2dc>)
 8007338:	4013      	ands	r3, r2
 800733a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800735a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	691a      	ldr	r2, [r3, #16]
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	0159      	lsls	r1, r3, #5
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	440b      	add	r3, r1
 8007372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007376:	4619      	mov	r1, r3
 8007378:	4b95      	ldr	r3, [pc, #596]	; (80075d0 <USB_EPStartXfer+0x2e0>)
 800737a:	4013      	ands	r3, r2
 800737c:	610b      	str	r3, [r1, #16]
 800737e:	e074      	b.n	800746a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	0159      	lsls	r1, r3, #5
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	440b      	add	r3, r1
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	4619      	mov	r1, r3
 800739c:	4b8c      	ldr	r3, [pc, #560]	; (80075d0 <USB_EPStartXfer+0x2e0>)
 800739e:	4013      	ands	r3, r2
 80073a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	0159      	lsls	r1, r3, #5
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	440b      	add	r3, r1
 80073b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073bc:	4619      	mov	r1, r3
 80073be:	4b83      	ldr	r3, [pc, #524]	; (80075cc <USB_EPStartXfer+0x2dc>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d0:	691a      	ldr	r2, [r3, #16]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6959      	ldr	r1, [r3, #20]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	440b      	add	r3, r1
 80073dc:	1e59      	subs	r1, r3, #1
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80073e6:	04d9      	lsls	r1, r3, #19
 80073e8:	4b7a      	ldr	r3, [pc, #488]	; (80075d4 <USB_EPStartXfer+0x2e4>)
 80073ea:	400b      	ands	r3, r1
 80073ec:	69b9      	ldr	r1, [r7, #24]
 80073ee:	0148      	lsls	r0, r1, #5
 80073f0:	69f9      	ldr	r1, [r7, #28]
 80073f2:	4401      	add	r1, r0
 80073f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073f8:	4313      	orrs	r3, r2
 80073fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007408:	691a      	ldr	r2, [r3, #16]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007412:	69b9      	ldr	r1, [r7, #24]
 8007414:	0148      	lsls	r0, r1, #5
 8007416:	69f9      	ldr	r1, [r7, #28]
 8007418:	4401      	add	r1, r0
 800741a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800741e:	4313      	orrs	r3, r2
 8007420:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	78db      	ldrb	r3, [r3, #3]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d11f      	bne.n	800746a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	440a      	add	r2, r1
 8007440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007444:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007448:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	0151      	lsls	r1, r2, #5
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	440a      	add	r2, r1
 8007460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007464:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007468:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800746a:	79fb      	ldrb	r3, [r7, #7]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d14b      	bne.n	8007508 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007484:	461a      	mov	r2, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	78db      	ldrb	r3, [r3, #3]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d128      	bne.n	80074e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d110      	bne.n	80074c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	0151      	lsls	r1, r2, #5
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	440a      	add	r2, r1
 80074ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	e00f      	b.n	80074e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	69fa      	ldr	r2, [r7, #28]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007500:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	e133      	b.n	8007770 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007526:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	78db      	ldrb	r3, [r3, #3]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d015      	beq.n	800755c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 811b 	beq.w	8007770 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	f003 030f 	and.w	r3, r3, #15
 800754a:	2101      	movs	r1, #1
 800754c:	fa01 f303 	lsl.w	r3, r1, r3
 8007550:	69f9      	ldr	r1, [r7, #28]
 8007552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007556:	4313      	orrs	r3, r2
 8007558:	634b      	str	r3, [r1, #52]	; 0x34
 800755a:	e109      	b.n	8007770 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007568:	2b00      	cmp	r3, #0
 800756a:	d110      	bne.n	800758e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	440a      	add	r2, r1
 8007582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007586:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	e00f      	b.n	80075ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	0151      	lsls	r1, r2, #5
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	440a      	add	r2, r1
 80075a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	68d9      	ldr	r1, [r3, #12]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	781a      	ldrb	r2, [r3, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	b298      	uxth	r0, r3
 80075bc:	79fb      	ldrb	r3, [r7, #7]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	4603      	mov	r3, r0
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fa38 	bl	8007a38 <USB_WritePacket>
 80075c8:	e0d2      	b.n	8007770 <USB_EPStartXfer+0x480>
 80075ca:	bf00      	nop
 80075cc:	e007ffff 	.word	0xe007ffff
 80075d0:	fff80000 	.word	0xfff80000
 80075d4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e4:	691a      	ldr	r2, [r3, #16]
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	0159      	lsls	r1, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	440b      	add	r3, r1
 80075ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f2:	4619      	mov	r1, r3
 80075f4:	4b61      	ldr	r3, [pc, #388]	; (800777c <USB_EPStartXfer+0x48c>)
 80075f6:	4013      	ands	r3, r2
 80075f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	0159      	lsls	r1, r3, #5
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	440b      	add	r3, r1
 8007610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007614:	4619      	mov	r1, r3
 8007616:	4b5a      	ldr	r3, [pc, #360]	; (8007780 <USB_EPStartXfer+0x490>)
 8007618:	4013      	ands	r3, r2
 800761a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d123      	bne.n	800766c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800763a:	69b9      	ldr	r1, [r7, #24]
 800763c:	0148      	lsls	r0, r1, #5
 800763e:	69f9      	ldr	r1, [r7, #28]
 8007640:	4401      	add	r1, r0
 8007642:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007646:	4313      	orrs	r3, r2
 8007648:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	440a      	add	r2, r1
 8007660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007664:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007668:	6113      	str	r3, [r2, #16]
 800766a:	e033      	b.n	80076d4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	695a      	ldr	r2, [r3, #20]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	4413      	add	r3, r2
 8007676:	1e5a      	subs	r2, r3, #1
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007680:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	8afb      	ldrh	r3, [r7, #22]
 8007692:	04d9      	lsls	r1, r3, #19
 8007694:	4b3b      	ldr	r3, [pc, #236]	; (8007784 <USB_EPStartXfer+0x494>)
 8007696:	400b      	ands	r3, r1
 8007698:	69b9      	ldr	r1, [r7, #24]
 800769a:	0148      	lsls	r0, r1, #5
 800769c:	69f9      	ldr	r1, [r7, #28]
 800769e:	4401      	add	r1, r0
 80076a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076a4:	4313      	orrs	r3, r2
 80076a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	8af9      	ldrh	r1, [r7, #22]
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c4:	69b9      	ldr	r1, [r7, #24]
 80076c6:	0148      	lsls	r0, r1, #5
 80076c8:	69f9      	ldr	r1, [r7, #28]
 80076ca:	4401      	add	r1, r0
 80076cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076d0:	4313      	orrs	r3, r2
 80076d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d10d      	bne.n	80076f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	68d9      	ldr	r1, [r3, #12]
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	460a      	mov	r2, r1
 80076f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	78db      	ldrb	r3, [r3, #3]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d128      	bne.n	8007750 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770a:	2b00      	cmp	r3, #0
 800770c:	d110      	bne.n	8007730 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	0151      	lsls	r1, r2, #5
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	440a      	add	r2, r1
 8007724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	e00f      	b.n	8007750 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800774e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	440a      	add	r2, r1
 8007766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800776a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800776e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3720      	adds	r7, #32
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	fff80000 	.word	0xfff80000
 8007780:	e007ffff 	.word	0xe007ffff
 8007784:	1ff80000 	.word	0x1ff80000

08007788 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	785b      	ldrb	r3, [r3, #1]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	f040 80cd 	bne.w	8007944 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d132      	bne.n	8007818 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	0159      	lsls	r1, r3, #5
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	440b      	add	r3, r1
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	4619      	mov	r1, r3
 80077ce:	4b98      	ldr	r3, [pc, #608]	; (8007a30 <USB_EP0StartXfer+0x2a8>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	0159      	lsls	r1, r3, #5
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	440b      	add	r3, r1
 800780a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780e:	4619      	mov	r1, r3
 8007810:	4b88      	ldr	r3, [pc, #544]	; (8007a34 <USB_EP0StartXfer+0x2ac>)
 8007812:	4013      	ands	r3, r2
 8007814:	610b      	str	r3, [r1, #16]
 8007816:	e04e      	b.n	80078b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007824:	691a      	ldr	r2, [r3, #16]
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	0159      	lsls	r1, r3, #5
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	440b      	add	r3, r1
 800782e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007832:	4619      	mov	r1, r3
 8007834:	4b7f      	ldr	r3, [pc, #508]	; (8007a34 <USB_EP0StartXfer+0x2ac>)
 8007836:	4013      	ands	r3, r2
 8007838:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	0159      	lsls	r1, r3, #5
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	440b      	add	r3, r1
 8007850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007854:	4619      	mov	r1, r3
 8007856:	4b76      	ldr	r3, [pc, #472]	; (8007a30 <USB_EP0StartXfer+0x2a8>)
 8007858:	4013      	ands	r3, r2
 800785a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	695a      	ldr	r2, [r3, #20]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	429a      	cmp	r2, r3
 8007866:	d903      	bls.n	8007870 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	440a      	add	r2, r1
 8007886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800788e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	691a      	ldr	r2, [r3, #16]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078a6:	6939      	ldr	r1, [r7, #16]
 80078a8:	0148      	lsls	r0, r1, #5
 80078aa:	6979      	ldr	r1, [r7, #20]
 80078ac:	4401      	add	r1, r0
 80078ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078b2:	4313      	orrs	r3, r2
 80078b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d11e      	bne.n	80078fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d009      	beq.n	80078d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d0:	461a      	mov	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	e092      	b.n	8007a20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	0151      	lsls	r1, r2, #5
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	440a      	add	r2, r1
 8007910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007914:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007918:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d07e      	beq.n	8007a20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	2101      	movs	r1, #1
 8007934:	fa01 f303 	lsl.w	r3, r1, r3
 8007938:	6979      	ldr	r1, [r7, #20]
 800793a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800793e:	4313      	orrs	r3, r2
 8007940:	634b      	str	r3, [r1, #52]	; 0x34
 8007942:	e06d      	b.n	8007a20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	0159      	lsls	r1, r3, #5
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	440b      	add	r3, r1
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	4619      	mov	r1, r3
 8007960:	4b34      	ldr	r3, [pc, #208]	; (8007a34 <USB_EP0StartXfer+0x2ac>)
 8007962:	4013      	ands	r3, r2
 8007964:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	4413      	add	r3, r2
 800796e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	0159      	lsls	r1, r3, #5
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	440b      	add	r3, r1
 800797c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007980:	4619      	mov	r1, r3
 8007982:	4b2b      	ldr	r3, [pc, #172]	; (8007a30 <USB_EP0StartXfer+0x2a8>)
 8007984:	4013      	ands	r3, r2
 8007986:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c4:	691a      	ldr	r2, [r3, #16]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ce:	6939      	ldr	r1, [r7, #16]
 80079d0:	0148      	lsls	r0, r1, #5
 80079d2:	6979      	ldr	r1, [r7, #20]
 80079d4:	4401      	add	r1, r0
 80079d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079da:	4313      	orrs	r3, r2
 80079dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d10d      	bne.n	8007a00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d009      	beq.n	8007a00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	68d9      	ldr	r1, [r3, #12]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fc:	460a      	mov	r2, r1
 80079fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	0151      	lsls	r1, r2, #5
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	440a      	add	r2, r1
 8007a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	e007ffff 	.word	0xe007ffff
 8007a34:	fff80000 	.word	0xfff80000

08007a38 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b089      	sub	sp, #36	; 0x24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4611      	mov	r1, r2
 8007a44:	461a      	mov	r2, r3
 8007a46:	460b      	mov	r3, r1
 8007a48:	71fb      	strb	r3, [r7, #7]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007a56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d11a      	bne.n	8007a94 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a5e:	88bb      	ldrh	r3, [r7, #4]
 8007a60:	3303      	adds	r3, #3
 8007a62:	089b      	lsrs	r3, r3, #2
 8007a64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a66:	2300      	movs	r3, #0
 8007a68:	61bb      	str	r3, [r7, #24]
 8007a6a:	e00f      	b.n	8007a8c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	031a      	lsls	r2, r3, #12
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a78:	461a      	mov	r2, r3
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	3304      	adds	r3, #4
 8007a84:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	61bb      	str	r3, [r7, #24]
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d3eb      	bcc.n	8007a6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3724      	adds	r7, #36	; 0x24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b089      	sub	sp, #36	; 0x24
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	60f8      	str	r0, [r7, #12]
 8007aaa:	60b9      	str	r1, [r7, #8]
 8007aac:	4613      	mov	r3, r2
 8007aae:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ab8:	88fb      	ldrh	r3, [r7, #6]
 8007aba:	3303      	adds	r3, #3
 8007abc:	089b      	lsrs	r3, r3, #2
 8007abe:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	e00b      	b.n	8007ade <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	3301      	adds	r3, #1
 8007adc:	61bb      	str	r3, [r7, #24]
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d3ef      	bcc.n	8007ac6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007ae6:	69fb      	ldr	r3, [r7, #28]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3724      	adds	r7, #36	; 0x24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	785b      	ldrb	r3, [r3, #1]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d12c      	bne.n	8007b6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	db12      	blt.n	8007b48 <USB_EPSetStall+0x54>
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00f      	beq.n	8007b48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	0151      	lsls	r1, r2, #5
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	440a      	add	r2, r1
 8007b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	0151      	lsls	r1, r2, #5
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	440a      	add	r2, r1
 8007b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	e02b      	b.n	8007bc2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	db12      	blt.n	8007ba2 <USB_EPSetStall+0xae>
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00f      	beq.n	8007ba2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ba0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d128      	bne.n	8007c3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	78db      	ldrb	r3, [r3, #3]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d003      	beq.n	8007c1c <USB_EPClearStall+0x4c>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	78db      	ldrb	r3, [r3, #3]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d138      	bne.n	8007c8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	0151      	lsls	r1, r2, #5
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	440a      	add	r2, r1
 8007c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	e027      	b.n	8007c8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	78db      	ldrb	r3, [r3, #3]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d003      	beq.n	8007c6e <USB_EPClearStall+0x9e>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	78db      	ldrb	r3, [r3, #3]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d10f      	bne.n	8007c8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	0151      	lsls	r1, r2, #5
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	440a      	add	r2, r1
 8007c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cbe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cd0:	68f9      	ldr	r1, [r7, #12]
 8007cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d02:	f023 0302 	bic.w	r3, r3, #2
 8007d06:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007d08:	2003      	movs	r0, #3
 8007d0a:	f7f8 ff5f 	bl	8000bcc <HAL_Delay>

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d32:	f043 0302 	orr.w	r3, r3, #2
 8007d36:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007d38:	2003      	movs	r0, #3
 8007d3a:	f7f8 ff47 	bl	8000bcc <HAL_Delay>

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d60:	68fb      	ldr	r3, [r7, #12]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	0c1b      	lsrs	r3, r3, #16
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b085      	sub	sp, #20
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	b29b      	uxth	r3, r3
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	4013      	ands	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e04:	68bb      	ldr	r3, [r7, #8]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e42:	01db      	lsls	r3, r3, #7
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e60:	68bb      	ldr	r3, [r7, #8]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	371c      	adds	r7, #28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
	...

08007e8c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <USB_ActivateSetup+0x44>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ec0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	fffff800 	.word	0xfffff800

08007ed4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	460b      	mov	r3, r1
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	333c      	adds	r3, #60	; 0x3c
 8007eea:	3304      	adds	r3, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4a26      	ldr	r2, [pc, #152]	; (8007f8c <USB_EP0_OutStart+0xb8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d90a      	bls.n	8007f0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f08:	d101      	bne.n	8007f0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e037      	b.n	8007f7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f14:	461a      	mov	r2, r3
 8007f16:	2300      	movs	r3, #0
 8007f18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3c:	f043 0318 	orr.w	r3, r3, #24
 8007f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d10f      	bne.n	8007f7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	4f54300a 	.word	0x4f54300a

08007f90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4a13      	ldr	r2, [pc, #76]	; (8007ff4 <USB_CoreReset+0x64>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d901      	bls.n	8007fae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e01b      	b.n	8007fe6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	daf2      	bge.n	8007f9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f043 0201 	orr.w	r2, r3, #1
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4a09      	ldr	r2, [pc, #36]	; (8007ff4 <USB_CoreReset+0x64>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d901      	bls.n	8007fd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e006      	b.n	8007fe6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d0f0      	beq.n	8007fc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	00030d40 	.word	0x00030d40

08007ff8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7c1b      	ldrb	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d115      	bne.n	800803c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008014:	2202      	movs	r2, #2
 8008016:	2181      	movs	r1, #129	; 0x81
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 ff36 	bl	8009e8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008028:	2202      	movs	r2, #2
 800802a:	2101      	movs	r1, #1
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 ff2c 	bl	8009e8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800803a:	e012      	b.n	8008062 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	2202      	movs	r2, #2
 8008040:	2181      	movs	r1, #129	; 0x81
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 ff21 	bl	8009e8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800804e:	2340      	movs	r3, #64	; 0x40
 8008050:	2202      	movs	r2, #2
 8008052:	2101      	movs	r1, #1
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 ff18 	bl	8009e8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008062:	2308      	movs	r3, #8
 8008064:	2203      	movs	r2, #3
 8008066:	2182      	movs	r1, #130	; 0x82
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 ff0e 	bl	8009e8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008074:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008078:	f002 f884 	bl	800a184 <malloc>
 800807c:	4603      	mov	r3, r0
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
 8008094:	e026      	b.n	80080e4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800809c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	7c1b      	ldrb	r3, [r3, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d109      	bne.n	80080d4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ca:	2101      	movs	r1, #1
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 ffcd 	bl	800a06c <USBD_LL_PrepareReceive>
 80080d2:	e007      	b.n	80080e4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080da:	2340      	movs	r3, #64	; 0x40
 80080dc:	2101      	movs	r1, #1
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 ffc4 	bl	800a06c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80080fe:	2181      	movs	r1, #129	; 0x81
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 fee8 	bl	8009ed6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800810c:	2101      	movs	r1, #1
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 fee1 	bl	8009ed6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800811c:	2182      	movs	r1, #130	; 0x82
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 fed9 	bl	8009ed6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00e      	beq.n	8008152 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008144:	4618      	mov	r0, r3
 8008146:	f002 f825 	bl	800a194 <free>
    pdev->pClassData = NULL;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008152:	7bfb      	ldrb	r3, [r7, #15]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008182:	2b00      	cmp	r3, #0
 8008184:	d039      	beq.n	80081fa <USBD_CDC_Setup+0x9e>
 8008186:	2b20      	cmp	r3, #32
 8008188:	d17c      	bne.n	8008284 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	88db      	ldrh	r3, [r3, #6]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d029      	beq.n	80081e6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b25b      	sxtb	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	da11      	bge.n	80081c0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80081a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	88d2      	ldrh	r2, [r2, #6]
 80081ae:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80081b0:	6939      	ldr	r1, [r7, #16]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	88db      	ldrh	r3, [r3, #6]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 fa3f 	bl	800963c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80081be:	e068      	b.n	8008292 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	785a      	ldrb	r2, [r3, #1]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	88db      	ldrh	r3, [r3, #6]
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80081d6:	6939      	ldr	r1, [r7, #16]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	88db      	ldrh	r3, [r3, #6]
 80081dc:	461a      	mov	r2, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 fa5a 	bl	8009698 <USBD_CtlPrepareRx>
      break;
 80081e4:	e055      	b.n	8008292 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	7850      	ldrb	r0, [r2, #1]
 80081f2:	2200      	movs	r2, #0
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	4798      	blx	r3
      break;
 80081f8:	e04b      	b.n	8008292 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	2b0a      	cmp	r3, #10
 8008200:	d017      	beq.n	8008232 <USBD_CDC_Setup+0xd6>
 8008202:	2b0b      	cmp	r3, #11
 8008204:	d029      	beq.n	800825a <USBD_CDC_Setup+0xfe>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d133      	bne.n	8008272 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	2b03      	cmp	r3, #3
 8008212:	d107      	bne.n	8008224 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008214:	f107 030c 	add.w	r3, r7, #12
 8008218:	2202      	movs	r2, #2
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 fa0d 	bl	800963c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008222:	e02e      	b.n	8008282 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 f99d 	bl	8009566 <USBD_CtlError>
            ret = USBD_FAIL;
 800822c:	2302      	movs	r3, #2
 800822e:	75fb      	strb	r3, [r7, #23]
          break;
 8008230:	e027      	b.n	8008282 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008238:	2b03      	cmp	r3, #3
 800823a:	d107      	bne.n	800824c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800823c:	f107 030f 	add.w	r3, r7, #15
 8008240:	2201      	movs	r2, #1
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 f9f9 	bl	800963c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800824a:	e01a      	b.n	8008282 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 f989 	bl	8009566 <USBD_CtlError>
            ret = USBD_FAIL;
 8008254:	2302      	movs	r3, #2
 8008256:	75fb      	strb	r3, [r7, #23]
          break;
 8008258:	e013      	b.n	8008282 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008260:	2b03      	cmp	r3, #3
 8008262:	d00d      	beq.n	8008280 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 f97d 	bl	8009566 <USBD_CtlError>
            ret = USBD_FAIL;
 800826c:	2302      	movs	r3, #2
 800826e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008270:	e006      	b.n	8008280 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f976 	bl	8009566 <USBD_CtlError>
          ret = USBD_FAIL;
 800827a:	2302      	movs	r3, #2
 800827c:	75fb      	strb	r3, [r7, #23]
          break;
 800827e:	e000      	b.n	8008282 <USBD_CDC_Setup+0x126>
          break;
 8008280:	bf00      	nop
      }
      break;
 8008282:	e006      	b.n	8008292 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 f96d 	bl	8009566 <USBD_CtlError>
      ret = USBD_FAIL;
 800828c:	2302      	movs	r3, #2
 800828e:	75fb      	strb	r3, [r7, #23]
      break;
 8008290:	bf00      	nop
  }

  return ret;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082b6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d03a      	beq.n	8008338 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	440b      	add	r3, r1
 80082d0:	331c      	adds	r3, #28
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d029      	beq.n	800832c <USBD_CDC_DataIn+0x90>
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	331c      	adds	r3, #28
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	78f9      	ldrb	r1, [r7, #3]
 80082ec:	68b8      	ldr	r0, [r7, #8]
 80082ee:	460b      	mov	r3, r1
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	1a5b      	subs	r3, r3, r1
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4403      	add	r3, r0
 80082f8:	3344      	adds	r3, #68	; 0x44
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008300:	fb03 f301 	mul.w	r3, r3, r1
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d110      	bne.n	800832c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800830a:	78fa      	ldrb	r2, [r7, #3]
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	440b      	add	r3, r1
 8008318:	331c      	adds	r3, #28
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800831e:	78f9      	ldrb	r1, [r7, #3]
 8008320:	2300      	movs	r3, #0
 8008322:	2200      	movs	r2, #0
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fe7e 	bl	800a026 <USBD_LL_Transmit>
 800832a:	e003      	b.n	8008334 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	e000      	b.n	800833a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008338:	2302      	movs	r3, #2
  }
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008354:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 fea9 	bl	800a0b2 <USBD_LL_GetRxDataSize>
 8008360:	4602      	mov	r2, r0
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00d      	beq.n	800838e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008386:	4611      	mov	r1, r2
 8008388:	4798      	blx	r3

    return USBD_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	e000      	b.n	8008390 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800838e:	2302      	movs	r3, #2
  }
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d015      	beq.n	80083de <USBD_CDC_EP0_RxReady+0x46>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80083b8:	2bff      	cmp	r3, #255	; 0xff
 80083ba:	d010      	beq.n	80083de <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80083ca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80083d2:	b292      	uxth	r2, r2
 80083d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	22ff      	movs	r2, #255	; 0xff
 80083da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2243      	movs	r2, #67	; 0x43
 80083f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80083f6:	4b03      	ldr	r3, [pc, #12]	; (8008404 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	24000098 	.word	0x24000098

08008408 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2243      	movs	r2, #67	; 0x43
 8008414:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008416:	4b03      	ldr	r3, [pc, #12]	; (8008424 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	24000054 	.word	0x24000054

08008428 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2243      	movs	r2, #67	; 0x43
 8008434:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008436:	4b03      	ldr	r3, [pc, #12]	; (8008444 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008438:	4618      	mov	r0, r3
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	240000dc 	.word	0x240000dc

08008448 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	220a      	movs	r2, #10
 8008454:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008456:	4b03      	ldr	r3, [pc, #12]	; (8008464 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	24000010 	.word	0x24000010

08008468 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008472:	2302      	movs	r3, #2
 8008474:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008496:	b480      	push	{r7}
 8008498:	b087      	sub	sp, #28
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	4613      	mov	r3, r2
 80084a2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084aa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80084b4:	88fa      	ldrh	r2, [r7, #6]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008500:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01c      	beq.n	8008546 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008512:	2b00      	cmp	r3, #0
 8008514:	d115      	bne.n	8008542 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008534:	b29b      	uxth	r3, r3
 8008536:	2181      	movs	r1, #129	; 0x81
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 fd74 	bl	800a026 <USBD_LL_Transmit>

      return USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	e002      	b.n	8008548 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008546:	2302      	movs	r3, #2
  }
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800855e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008566:	2b00      	cmp	r3, #0
 8008568:	d017      	beq.n	800859a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7c1b      	ldrb	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800857c:	2101      	movs	r1, #1
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f001 fd74 	bl	800a06c <USBD_LL_PrepareReceive>
 8008584:	e007      	b.n	8008596 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800858c:	2340      	movs	r3, #64	; 0x40
 800858e:	2101      	movs	r1, #1
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 fd6b 	bl	800a06c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	e000      	b.n	800859c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800859a:	2302      	movs	r3, #2
  }
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	4613      	mov	r3, r2
 80085b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085b8:	2302      	movs	r3, #2
 80085ba:	e01a      	b.n	80085f2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	79fa      	ldrb	r2, [r7, #7]
 80085e8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f001 fbe2 	bl	8009db4 <USBD_LL_Init>

  return USBD_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d006      	beq.n	800861c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
 800861a:	e001      	b.n	8008620 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800861c:	2302      	movs	r3, #2
 800861e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 fc0c 	bl	8009e54 <USBD_LL_Start>

  return USBD_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008668:	2302      	movs	r3, #2
 800866a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00c      	beq.n	8008690 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	4611      	mov	r1, r2
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4798      	blx	r3
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	78fa      	ldrb	r2, [r7, #3]
 80086b0:	4611      	mov	r1, r2
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	4798      	blx	r3

  return USBD_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 ff0a 	bl	80094ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086e6:	461a      	mov	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086f4:	f003 031f 	and.w	r3, r3, #31
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d00c      	beq.n	8008716 <USBD_LL_SetupStage+0x56>
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d302      	bcc.n	8008706 <USBD_LL_SetupStage+0x46>
 8008700:	2b02      	cmp	r3, #2
 8008702:	d010      	beq.n	8008726 <USBD_LL_SetupStage+0x66>
 8008704:	e017      	b.n	8008736 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa0a 	bl	8008b28 <USBD_StdDevReq>
      break;
 8008714:	e01a      	b.n	800874c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa6c 	bl	8008bfc <USBD_StdItfReq>
      break;
 8008724:	e012      	b.n	800874c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 faaa 	bl	8008c88 <USBD_StdEPReq>
      break;
 8008734:	e00a      	b.n	800874c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800873c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008740:	b2db      	uxtb	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 fbe5 	bl	8009f14 <USBD_LL_StallEP>
      break;
 800874a:	bf00      	nop
  }

  return USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	460b      	mov	r3, r1
 8008760:	607a      	str	r2, [r7, #4]
 8008762:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008764:	7afb      	ldrb	r3, [r7, #11]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d14b      	bne.n	8008802 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008770:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008778:	2b03      	cmp	r3, #3
 800877a:	d134      	bne.n	80087e6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	429a      	cmp	r2, r3
 8008786:	d919      	bls.n	80087bc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	1ad2      	subs	r2, r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800879e:	429a      	cmp	r2, r3
 80087a0:	d203      	bcs.n	80087aa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	e002      	b.n	80087b0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 ff8d 	bl	80096d4 <USBD_CtlContinueRx>
 80087ba:	e038      	b.n	800882e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00a      	beq.n	80087de <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d105      	bne.n	80087de <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 ff8a 	bl	80096f8 <USBD_CtlSendStatus>
 80087e4:	e023      	b.n	800882e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087ec:	2b05      	cmp	r3, #5
 80087ee:	d11e      	bne.n	800882e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f001 fb8a 	bl	8009f14 <USBD_LL_StallEP>
 8008800:	e015      	b.n	800882e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00d      	beq.n	800882a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008814:	2b03      	cmp	r3, #3
 8008816:	d108      	bne.n	800882a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	7afa      	ldrb	r2, [r7, #11]
 8008822:	4611      	mov	r1, r2
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	4798      	blx	r3
 8008828:	e001      	b.n	800882e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800882a:	2302      	movs	r3, #2
 800882c:	e000      	b.n	8008830 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	460b      	mov	r3, r1
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d17f      	bne.n	800894c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3314      	adds	r3, #20
 8008850:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008858:	2b02      	cmp	r3, #2
 800885a:	d15c      	bne.n	8008916 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	429a      	cmp	r2, r3
 8008866:	d915      	bls.n	8008894 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	1ad2      	subs	r2, r2, r3
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	b29b      	uxth	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fef7 	bl	8009674 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008886:	2300      	movs	r3, #0
 8008888:	2200      	movs	r2, #0
 800888a:	2100      	movs	r1, #0
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f001 fbed 	bl	800a06c <USBD_LL_PrepareReceive>
 8008892:	e04e      	b.n	8008932 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	6912      	ldr	r2, [r2, #16]
 800889c:	fbb3 f1f2 	udiv	r1, r3, r2
 80088a0:	fb02 f201 	mul.w	r2, r2, r1
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d11c      	bne.n	80088e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d316      	bcc.n	80088e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d20f      	bcs.n	80088e4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088c4:	2200      	movs	r2, #0
 80088c6:	2100      	movs	r1, #0
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 fed3 	bl	8009674 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088d6:	2300      	movs	r3, #0
 80088d8:	2200      	movs	r2, #0
 80088da:	2100      	movs	r1, #0
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f001 fbc5 	bl	800a06c <USBD_LL_PrepareReceive>
 80088e2:	e026      	b.n	8008932 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d105      	bne.n	8008906 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008906:	2180      	movs	r1, #128	; 0x80
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f001 fb03 	bl	8009f14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 ff05 	bl	800971e <USBD_CtlReceiveStatus>
 8008914:	e00d      	b.n	8008932 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800891c:	2b04      	cmp	r3, #4
 800891e:	d004      	beq.n	800892a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008926:	2b00      	cmp	r3, #0
 8008928:	d103      	bne.n	8008932 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800892a:	2180      	movs	r1, #128	; 0x80
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f001 faf1 	bl	8009f14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008938:	2b01      	cmp	r3, #1
 800893a:	d11d      	bne.n	8008978 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7ff fe82 	bl	8008646 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800894a:	e015      	b.n	8008978 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00d      	beq.n	8008974 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800895e:	2b03      	cmp	r3, #3
 8008960:	d108      	bne.n	8008974 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	7afa      	ldrb	r2, [r7, #11]
 800896c:	4611      	mov	r1, r2
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	4798      	blx	r3
 8008972:	e001      	b.n	8008978 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008974:	2302      	movs	r3, #2
 8008976:	e000      	b.n	800897a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800898a:	2340      	movs	r3, #64	; 0x40
 800898c:	2200      	movs	r2, #0
 800898e:	2100      	movs	r1, #0
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 fa7a 	bl	8009e8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2240      	movs	r2, #64	; 0x40
 80089a2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089a6:	2340      	movs	r3, #64	; 0x40
 80089a8:	2200      	movs	r2, #0
 80089aa:	2180      	movs	r1, #128	; 0x80
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 fa6c 	bl	8009e8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2240      	movs	r2, #64	; 0x40
 80089bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d009      	beq.n	80089fa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6852      	ldr	r2, [r2, #4]
 80089f2:	b2d2      	uxtb	r2, r2
 80089f4:	4611      	mov	r1, r2
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	4798      	blx	r3
  }

  return USBD_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	78fa      	ldrb	r2, [r7, #3]
 8008a14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d105      	bne.n	8008a6c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d10b      	bne.n	8008aa4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d005      	beq.n	8008aa4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6852      	ldr	r2, [r2, #4]
 8008b14:	b2d2      	uxtb	r2, r2
 8008b16:	4611      	mov	r1, r2
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	4798      	blx	r3

  return USBD_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b3e:	2b20      	cmp	r3, #32
 8008b40:	d004      	beq.n	8008b4c <USBD_StdDevReq+0x24>
 8008b42:	2b40      	cmp	r3, #64	; 0x40
 8008b44:	d002      	beq.n	8008b4c <USBD_StdDevReq+0x24>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d008      	beq.n	8008b5c <USBD_StdDevReq+0x34>
 8008b4a:	e04c      	b.n	8008be6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
      break;
 8008b5a:	e049      	b.n	8008bf0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	785b      	ldrb	r3, [r3, #1]
 8008b60:	2b09      	cmp	r3, #9
 8008b62:	d83a      	bhi.n	8008bda <USBD_StdDevReq+0xb2>
 8008b64:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <USBD_StdDevReq+0x44>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008bbd 	.word	0x08008bbd
 8008b70:	08008bd1 	.word	0x08008bd1
 8008b74:	08008bdb 	.word	0x08008bdb
 8008b78:	08008bc7 	.word	0x08008bc7
 8008b7c:	08008bdb 	.word	0x08008bdb
 8008b80:	08008b9f 	.word	0x08008b9f
 8008b84:	08008b95 	.word	0x08008b95
 8008b88:	08008bdb 	.word	0x08008bdb
 8008b8c:	08008bb3 	.word	0x08008bb3
 8008b90:	08008ba9 	.word	0x08008ba9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f9d4 	bl	8008f44 <USBD_GetDescriptor>
          break;
 8008b9c:	e022      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fb37 	bl	8009214 <USBD_SetAddress>
          break;
 8008ba6:	e01d      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fb74 	bl	8009298 <USBD_SetConfig>
          break;
 8008bb0:	e018      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fbfd 	bl	80093b4 <USBD_GetConfig>
          break;
 8008bba:	e013      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fc2c 	bl	800941c <USBD_GetStatus>
          break;
 8008bc4:	e00e      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fc5a 	bl	8009482 <USBD_SetFeature>
          break;
 8008bce:	e009      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fc69 	bl	80094aa <USBD_ClrFeature>
          break;
 8008bd8:	e004      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fcc2 	bl	8009566 <USBD_CtlError>
          break;
 8008be2:	bf00      	nop
      }
      break;
 8008be4:	e004      	b.n	8008bf0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fcbc 	bl	8009566 <USBD_CtlError>
      break;
 8008bee:	bf00      	nop
  }

  return ret;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop

08008bfc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c12:	2b20      	cmp	r3, #32
 8008c14:	d003      	beq.n	8008c1e <USBD_StdItfReq+0x22>
 8008c16:	2b40      	cmp	r3, #64	; 0x40
 8008c18:	d001      	beq.n	8008c1e <USBD_StdItfReq+0x22>
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d12a      	bne.n	8008c74 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c24:	3b01      	subs	r3, #1
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d81d      	bhi.n	8008c66 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	889b      	ldrh	r3, [r3, #4]
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d813      	bhi.n	8008c5c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	4798      	blx	r3
 8008c42:	4603      	mov	r3, r0
 8008c44:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	88db      	ldrh	r3, [r3, #6]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d110      	bne.n	8008c70 <USBD_StdItfReq+0x74>
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10d      	bne.n	8008c70 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fd4f 	bl	80096f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c5a:	e009      	b.n	8008c70 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fc81 	bl	8009566 <USBD_CtlError>
          break;
 8008c64:	e004      	b.n	8008c70 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fc7c 	bl	8009566 <USBD_CtlError>
          break;
 8008c6e:	e000      	b.n	8008c72 <USBD_StdItfReq+0x76>
          break;
 8008c70:	bf00      	nop
      }
      break;
 8008c72:	e004      	b.n	8008c7e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fc75 	bl	8009566 <USBD_CtlError>
      break;
 8008c7c:	bf00      	nop
  }

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	889b      	ldrh	r3, [r3, #4]
 8008c9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ca4:	2b20      	cmp	r3, #32
 8008ca6:	d004      	beq.n	8008cb2 <USBD_StdEPReq+0x2a>
 8008ca8:	2b40      	cmp	r3, #64	; 0x40
 8008caa:	d002      	beq.n	8008cb2 <USBD_StdEPReq+0x2a>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d008      	beq.n	8008cc2 <USBD_StdEPReq+0x3a>
 8008cb0:	e13d      	b.n	8008f2e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
      break;
 8008cc0:	e13a      	b.n	8008f38 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d10a      	bne.n	8008ce4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	4798      	blx	r3
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	e12a      	b.n	8008f3a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	785b      	ldrb	r3, [r3, #1]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d03e      	beq.n	8008d6a <USBD_StdEPReq+0xe2>
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d002      	beq.n	8008cf6 <USBD_StdEPReq+0x6e>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d070      	beq.n	8008dd6 <USBD_StdEPReq+0x14e>
 8008cf4:	e115      	b.n	8008f22 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d002      	beq.n	8008d06 <USBD_StdEPReq+0x7e>
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d015      	beq.n	8008d30 <USBD_StdEPReq+0xa8>
 8008d04:	e02b      	b.n	8008d5e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00c      	beq.n	8008d26 <USBD_StdEPReq+0x9e>
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	2b80      	cmp	r3, #128	; 0x80
 8008d10:	d009      	beq.n	8008d26 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 f8fc 	bl	8009f14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d1c:	2180      	movs	r1, #128	; 0x80
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 f8f8 	bl	8009f14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d24:	e020      	b.n	8008d68 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fc1c 	bl	8009566 <USBD_CtlError>
              break;
 8008d2e:	e01b      	b.n	8008d68 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	885b      	ldrh	r3, [r3, #2]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10e      	bne.n	8008d56 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00b      	beq.n	8008d56 <USBD_StdEPReq+0xce>
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b80      	cmp	r3, #128	; 0x80
 8008d42:	d008      	beq.n	8008d56 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	88db      	ldrh	r3, [r3, #6]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d104      	bne.n	8008d56 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 f8df 	bl	8009f14 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fcce 	bl	80096f8 <USBD_CtlSendStatus>

              break;
 8008d5c:	e004      	b.n	8008d68 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fc00 	bl	8009566 <USBD_CtlError>
              break;
 8008d66:	bf00      	nop
          }
          break;
 8008d68:	e0e0      	b.n	8008f2c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d002      	beq.n	8008d7a <USBD_StdEPReq+0xf2>
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d015      	beq.n	8008da4 <USBD_StdEPReq+0x11c>
 8008d78:	e026      	b.n	8008dc8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00c      	beq.n	8008d9a <USBD_StdEPReq+0x112>
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	2b80      	cmp	r3, #128	; 0x80
 8008d84:	d009      	beq.n	8008d9a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 f8c2 	bl	8009f14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d90:	2180      	movs	r1, #128	; 0x80
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 f8be 	bl	8009f14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d98:	e01c      	b.n	8008dd4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fbe2 	bl	8009566 <USBD_CtlError>
              break;
 8008da2:	e017      	b.n	8008dd4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	885b      	ldrh	r3, [r3, #2]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d112      	bne.n	8008dd2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d004      	beq.n	8008dc0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 f8c9 	bl	8009f52 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fc99 	bl	80096f8 <USBD_CtlSendStatus>
              }
              break;
 8008dc6:	e004      	b.n	8008dd2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fbcb 	bl	8009566 <USBD_CtlError>
              break;
 8008dd0:	e000      	b.n	8008dd4 <USBD_StdEPReq+0x14c>
              break;
 8008dd2:	bf00      	nop
          }
          break;
 8008dd4:	e0aa      	b.n	8008f2c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d002      	beq.n	8008de6 <USBD_StdEPReq+0x15e>
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d032      	beq.n	8008e4a <USBD_StdEPReq+0x1c2>
 8008de4:	e097      	b.n	8008f16 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d007      	beq.n	8008dfc <USBD_StdEPReq+0x174>
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	2b80      	cmp	r3, #128	; 0x80
 8008df0:	d004      	beq.n	8008dfc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fbb6 	bl	8009566 <USBD_CtlError>
                break;
 8008dfa:	e091      	b.n	8008f20 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	da0b      	bge.n	8008e1c <USBD_StdEPReq+0x194>
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	3310      	adds	r3, #16
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	4413      	add	r3, r2
 8008e18:	3304      	adds	r3, #4
 8008e1a:	e00b      	b.n	8008e34 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	4413      	add	r3, r2
 8008e32:	3304      	adds	r3, #4
 8008e34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fbfa 	bl	800963c <USBD_CtlSendData>
              break;
 8008e48:	e06a      	b.n	8008f20 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	da11      	bge.n	8008e76 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	f003 020f 	and.w	r2, r3, #15
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	3318      	adds	r3, #24
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d117      	bne.n	8008e9c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fb79 	bl	8009566 <USBD_CtlError>
                  break;
 8008e74:	e054      	b.n	8008f20 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	f003 020f 	and.w	r2, r3, #15
 8008e7c:	6879      	ldr	r1, [r7, #4]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	440b      	add	r3, r1
 8008e88:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d104      	bne.n	8008e9c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fb66 	bl	8009566 <USBD_CtlError>
                  break;
 8008e9a:	e041      	b.n	8008f20 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	da0b      	bge.n	8008ebc <USBD_StdEPReq+0x234>
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	3310      	adds	r3, #16
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	3304      	adds	r3, #4
 8008eba:	e00b      	b.n	8008ed4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <USBD_StdEPReq+0x25a>
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	2b80      	cmp	r3, #128	; 0x80
 8008ee0:	d103      	bne.n	8008eea <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	e00e      	b.n	8008f08 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008eea:	7bbb      	ldrb	r3, [r7, #14]
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f001 f84e 	bl	8009f90 <USBD_LL_IsStallEP>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2201      	movs	r2, #1
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e002      	b.n	8008f08 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fb94 	bl	800963c <USBD_CtlSendData>
              break;
 8008f14:	e004      	b.n	8008f20 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fb24 	bl	8009566 <USBD_CtlError>
              break;
 8008f1e:	bf00      	nop
          }
          break;
 8008f20:	e004      	b.n	8008f2c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fb1e 	bl	8009566 <USBD_CtlError>
          break;
 8008f2a:	bf00      	nop
      }
      break;
 8008f2c:	e004      	b.n	8008f38 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fb18 	bl	8009566 <USBD_CtlError>
      break;
 8008f36:	bf00      	nop
  }

  return ret;
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	885b      	ldrh	r3, [r3, #2]
 8008f5e:	0a1b      	lsrs	r3, r3, #8
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	2b06      	cmp	r3, #6
 8008f66:	f200 8128 	bhi.w	80091ba <USBD_GetDescriptor+0x276>
 8008f6a:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <USBD_GetDescriptor+0x2c>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08008f8d 	.word	0x08008f8d
 8008f74:	08008fa5 	.word	0x08008fa5
 8008f78:	08008fe5 	.word	0x08008fe5
 8008f7c:	080091bb 	.word	0x080091bb
 8008f80:	080091bb 	.word	0x080091bb
 8008f84:	0800915b 	.word	0x0800915b
 8008f88:	08009187 	.word	0x08009187
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	7c12      	ldrb	r2, [r2, #16]
 8008f98:	f107 0108 	add.w	r1, r7, #8
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3
 8008fa0:	60f8      	str	r0, [r7, #12]
      break;
 8008fa2:	e112      	b.n	80091ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	7c1b      	ldrb	r3, [r3, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10d      	bne.n	8008fc8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	f107 0208 	add.w	r2, r7, #8
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4798      	blx	r3
 8008fbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fc6:	e100      	b.n	80091ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd0:	f107 0208 	add.w	r2, r7, #8
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	4798      	blx	r3
 8008fd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	2202      	movs	r2, #2
 8008fe0:	701a      	strb	r2, [r3, #0]
      break;
 8008fe2:	e0f2      	b.n	80091ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	885b      	ldrh	r3, [r3, #2]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b05      	cmp	r3, #5
 8008fec:	f200 80ac 	bhi.w	8009148 <USBD_GetDescriptor+0x204>
 8008ff0:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <USBD_GetDescriptor+0xb4>)
 8008ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff6:	bf00      	nop
 8008ff8:	08009011 	.word	0x08009011
 8008ffc:	08009045 	.word	0x08009045
 8009000:	08009079 	.word	0x08009079
 8009004:	080090ad 	.word	0x080090ad
 8009008:	080090e1 	.word	0x080090e1
 800900c:	08009115 	.word	0x08009115
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00b      	beq.n	8009034 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	7c12      	ldrb	r2, [r2, #16]
 8009028:	f107 0108 	add.w	r1, r7, #8
 800902c:	4610      	mov	r0, r2
 800902e:	4798      	blx	r3
 8009030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009032:	e091      	b.n	8009158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa95 	bl	8009566 <USBD_CtlError>
            err++;
 800903c:	7afb      	ldrb	r3, [r7, #11]
 800903e:	3301      	adds	r3, #1
 8009040:	72fb      	strb	r3, [r7, #11]
          break;
 8009042:	e089      	b.n	8009158 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	7c12      	ldrb	r2, [r2, #16]
 800905c:	f107 0108 	add.w	r1, r7, #8
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
 8009064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009066:	e077      	b.n	8009158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa7b 	bl	8009566 <USBD_CtlError>
            err++;
 8009070:	7afb      	ldrb	r3, [r7, #11]
 8009072:	3301      	adds	r3, #1
 8009074:	72fb      	strb	r3, [r7, #11]
          break;
 8009076:	e06f      	b.n	8009158 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	7c12      	ldrb	r2, [r2, #16]
 8009090:	f107 0108 	add.w	r1, r7, #8
 8009094:	4610      	mov	r0, r2
 8009096:	4798      	blx	r3
 8009098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800909a:	e05d      	b.n	8009158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fa61 	bl	8009566 <USBD_CtlError>
            err++;
 80090a4:	7afb      	ldrb	r3, [r7, #11]
 80090a6:	3301      	adds	r3, #1
 80090a8:	72fb      	strb	r3, [r7, #11]
          break;
 80090aa:	e055      	b.n	8009158 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00b      	beq.n	80090d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	7c12      	ldrb	r2, [r2, #16]
 80090c4:	f107 0108 	add.w	r1, r7, #8
 80090c8:	4610      	mov	r0, r2
 80090ca:	4798      	blx	r3
 80090cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ce:	e043      	b.n	8009158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa47 	bl	8009566 <USBD_CtlError>
            err++;
 80090d8:	7afb      	ldrb	r3, [r7, #11]
 80090da:	3301      	adds	r3, #1
 80090dc:	72fb      	strb	r3, [r7, #11]
          break;
 80090de:	e03b      	b.n	8009158 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00b      	beq.n	8009104 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7c12      	ldrb	r2, [r2, #16]
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009102:	e029      	b.n	8009158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa2d 	bl	8009566 <USBD_CtlError>
            err++;
 800910c:	7afb      	ldrb	r3, [r7, #11]
 800910e:	3301      	adds	r3, #1
 8009110:	72fb      	strb	r3, [r7, #11]
          break;
 8009112:	e021      	b.n	8009158 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	7c12      	ldrb	r2, [r2, #16]
 800912c:	f107 0108 	add.w	r1, r7, #8
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
 8009134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009136:	e00f      	b.n	8009158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fa13 	bl	8009566 <USBD_CtlError>
            err++;
 8009140:	7afb      	ldrb	r3, [r7, #11]
 8009142:	3301      	adds	r3, #1
 8009144:	72fb      	strb	r3, [r7, #11]
          break;
 8009146:	e007      	b.n	8009158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fa0b 	bl	8009566 <USBD_CtlError>
          err++;
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	3301      	adds	r3, #1
 8009154:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009156:	e038      	b.n	80091ca <USBD_GetDescriptor+0x286>
 8009158:	e037      	b.n	80091ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	7c1b      	ldrb	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d109      	bne.n	8009176 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916a:	f107 0208 	add.w	r2, r7, #8
 800916e:	4610      	mov	r0, r2
 8009170:	4798      	blx	r3
 8009172:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009174:	e029      	b.n	80091ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f9f4 	bl	8009566 <USBD_CtlError>
        err++;
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	3301      	adds	r3, #1
 8009182:	72fb      	strb	r3, [r7, #11]
      break;
 8009184:	e021      	b.n	80091ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	7c1b      	ldrb	r3, [r3, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10d      	bne.n	80091aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	f107 0208 	add.w	r2, r7, #8
 800919a:	4610      	mov	r0, r2
 800919c:	4798      	blx	r3
 800919e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3301      	adds	r3, #1
 80091a4:	2207      	movs	r2, #7
 80091a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091a8:	e00f      	b.n	80091ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f9da 	bl	8009566 <USBD_CtlError>
        err++;
 80091b2:	7afb      	ldrb	r3, [r7, #11]
 80091b4:	3301      	adds	r3, #1
 80091b6:	72fb      	strb	r3, [r7, #11]
      break;
 80091b8:	e007      	b.n	80091ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f9d2 	bl	8009566 <USBD_CtlError>
      err++;
 80091c2:	7afb      	ldrb	r3, [r7, #11]
 80091c4:	3301      	adds	r3, #1
 80091c6:	72fb      	strb	r3, [r7, #11]
      break;
 80091c8:	bf00      	nop
  }

  if (err != 0U)
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d11c      	bne.n	800920a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80091d0:	893b      	ldrh	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d011      	beq.n	80091fa <USBD_GetDescriptor+0x2b6>
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	88db      	ldrh	r3, [r3, #6]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00d      	beq.n	80091fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	88da      	ldrh	r2, [r3, #6]
 80091e2:	893b      	ldrh	r3, [r7, #8]
 80091e4:	4293      	cmp	r3, r2
 80091e6:	bf28      	it	cs
 80091e8:	4613      	movcs	r3, r2
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091ee:	893b      	ldrh	r3, [r7, #8]
 80091f0:	461a      	mov	r2, r3
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fa21 	bl	800963c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	88db      	ldrh	r3, [r3, #6]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d104      	bne.n	800920c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa78 	bl	80096f8 <USBD_CtlSendStatus>
 8009208:	e000      	b.n	800920c <USBD_GetDescriptor+0x2c8>
    return;
 800920a:	bf00      	nop
    }
  }
}
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop

08009214 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	889b      	ldrh	r3, [r3, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d130      	bne.n	8009288 <USBD_SetAddress+0x74>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	88db      	ldrh	r3, [r3, #6]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d12c      	bne.n	8009288 <USBD_SetAddress+0x74>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	885b      	ldrh	r3, [r3, #2]
 8009232:	2b7f      	cmp	r3, #127	; 0x7f
 8009234:	d828      	bhi.n	8009288 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	885b      	ldrh	r3, [r3, #2]
 800923a:	b2db      	uxtb	r3, r3
 800923c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009240:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009248:	2b03      	cmp	r3, #3
 800924a:	d104      	bne.n	8009256 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f989 	bl	8009566 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009254:	e01c      	b.n	8009290 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7bfa      	ldrb	r2, [r7, #15]
 800925a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fec0 	bl	8009fe8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fa45 	bl	80096f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d004      	beq.n	800927e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2202      	movs	r2, #2
 8009278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800927c:	e008      	b.n	8009290 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009286:	e003      	b.n	8009290 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f96b 	bl	8009566 <USBD_CtlError>
  }
}
 8009290:	bf00      	nop
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	4b41      	ldr	r3, [pc, #260]	; (80093b0 <USBD_SetConfig+0x118>)
 80092aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092ac:	4b40      	ldr	r3, [pc, #256]	; (80093b0 <USBD_SetConfig+0x118>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d904      	bls.n	80092be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f955 	bl	8009566 <USBD_CtlError>
 80092bc:	e075      	b.n	80093aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d002      	beq.n	80092ce <USBD_SetConfig+0x36>
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d023      	beq.n	8009314 <USBD_SetConfig+0x7c>
 80092cc:	e062      	b.n	8009394 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80092ce:	4b38      	ldr	r3, [pc, #224]	; (80093b0 <USBD_SetConfig+0x118>)
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01a      	beq.n	800930c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80092d6:	4b36      	ldr	r3, [pc, #216]	; (80093b0 <USBD_SetConfig+0x118>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2203      	movs	r2, #3
 80092e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092e8:	4b31      	ldr	r3, [pc, #196]	; (80093b0 <USBD_SetConfig+0x118>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff f9b4 	bl	800865c <USBD_SetClassConfig>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d104      	bne.n	8009304 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f932 	bl	8009566 <USBD_CtlError>
            return;
 8009302:	e052      	b.n	80093aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f9f7 	bl	80096f8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800930a:	e04e      	b.n	80093aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f9f3 	bl	80096f8 <USBD_CtlSendStatus>
        break;
 8009312:	e04a      	b.n	80093aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009314:	4b26      	ldr	r3, [pc, #152]	; (80093b0 <USBD_SetConfig+0x118>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d112      	bne.n	8009342 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009324:	4b22      	ldr	r3, [pc, #136]	; (80093b0 <USBD_SetConfig+0x118>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	461a      	mov	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800932e:	4b20      	ldr	r3, [pc, #128]	; (80093b0 <USBD_SetConfig+0x118>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7ff f9b0 	bl	800869a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f9dc 	bl	80096f8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009340:	e033      	b.n	80093aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009342:	4b1b      	ldr	r3, [pc, #108]	; (80093b0 <USBD_SetConfig+0x118>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	429a      	cmp	r2, r3
 800934e:	d01d      	beq.n	800938c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	b2db      	uxtb	r3, r3
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff f99e 	bl	800869a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800935e:	4b14      	ldr	r3, [pc, #80]	; (80093b0 <USBD_SetConfig+0x118>)
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009368:	4b11      	ldr	r3, [pc, #68]	; (80093b0 <USBD_SetConfig+0x118>)
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff f974 	bl	800865c <USBD_SetClassConfig>
 8009374:	4603      	mov	r3, r0
 8009376:	2b02      	cmp	r3, #2
 8009378:	d104      	bne.n	8009384 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f8f2 	bl	8009566 <USBD_CtlError>
            return;
 8009382:	e012      	b.n	80093aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f9b7 	bl	80096f8 <USBD_CtlSendStatus>
        break;
 800938a:	e00e      	b.n	80093aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f9b3 	bl	80096f8 <USBD_CtlSendStatus>
        break;
 8009392:	e00a      	b.n	80093aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f8e5 	bl	8009566 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800939c:	4b04      	ldr	r3, [pc, #16]	; (80093b0 <USBD_SetConfig+0x118>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff f979 	bl	800869a <USBD_ClrClassConfig>
        break;
 80093a8:	bf00      	nop
    }
  }
}
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	24000204 	.word	0x24000204

080093b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	88db      	ldrh	r3, [r3, #6]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d004      	beq.n	80093d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f8cc 	bl	8009566 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093ce:	e021      	b.n	8009414 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	db17      	blt.n	800940a <USBD_GetConfig+0x56>
 80093da:	2b02      	cmp	r3, #2
 80093dc:	dd02      	ble.n	80093e4 <USBD_GetConfig+0x30>
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d00b      	beq.n	80093fa <USBD_GetConfig+0x46>
 80093e2:	e012      	b.n	800940a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3308      	adds	r3, #8
 80093ee:	2201      	movs	r2, #1
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f922 	bl	800963c <USBD_CtlSendData>
        break;
 80093f8:	e00c      	b.n	8009414 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3304      	adds	r3, #4
 80093fe:	2201      	movs	r2, #1
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f91a 	bl	800963c <USBD_CtlSendData>
        break;
 8009408:	e004      	b.n	8009414 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f8aa 	bl	8009566 <USBD_CtlError>
        break;
 8009412:	bf00      	nop
}
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800942c:	3b01      	subs	r3, #1
 800942e:	2b02      	cmp	r3, #2
 8009430:	d81e      	bhi.n	8009470 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	88db      	ldrh	r3, [r3, #6]
 8009436:	2b02      	cmp	r3, #2
 8009438:	d004      	beq.n	8009444 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f892 	bl	8009566 <USBD_CtlError>
        break;
 8009442:	e01a      	b.n	800947a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009450:	2b00      	cmp	r3, #0
 8009452:	d005      	beq.n	8009460 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f043 0202 	orr.w	r2, r3, #2
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	330c      	adds	r3, #12
 8009464:	2202      	movs	r2, #2
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f8e7 	bl	800963c <USBD_CtlSendData>
      break;
 800946e:	e004      	b.n	800947a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f877 	bl	8009566 <USBD_CtlError>
      break;
 8009478:	bf00      	nop
  }
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	885b      	ldrh	r3, [r3, #2]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d106      	bne.n	80094a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f92b 	bl	80096f8 <USBD_CtlSendStatus>
  }
}
 80094a2:	bf00      	nop
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ba:	3b01      	subs	r3, #1
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d80b      	bhi.n	80094d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	885b      	ldrh	r3, [r3, #2]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d10c      	bne.n	80094e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f911 	bl	80096f8 <USBD_CtlSendStatus>
      }
      break;
 80094d6:	e004      	b.n	80094e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f843 	bl	8009566 <USBD_CtlError>
      break;
 80094e0:	e000      	b.n	80094e4 <USBD_ClrFeature+0x3a>
      break;
 80094e2:	bf00      	nop
  }
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781a      	ldrb	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	785a      	ldrb	r2, [r3, #1]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	3302      	adds	r3, #2
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	b29a      	uxth	r2, r3
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	3303      	adds	r3, #3
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	b29b      	uxth	r3, r3
 8009516:	021b      	lsls	r3, r3, #8
 8009518:	b29b      	uxth	r3, r3
 800951a:	4413      	add	r3, r2
 800951c:	b29a      	uxth	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	3304      	adds	r3, #4
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	b29a      	uxth	r2, r3
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	3305      	adds	r3, #5
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	b29b      	uxth	r3, r3
 8009532:	021b      	lsls	r3, r3, #8
 8009534:	b29b      	uxth	r3, r3
 8009536:	4413      	add	r3, r2
 8009538:	b29a      	uxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	3306      	adds	r3, #6
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	b29a      	uxth	r2, r3
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	3307      	adds	r3, #7
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	b29b      	uxth	r3, r3
 800954e:	021b      	lsls	r3, r3, #8
 8009550:	b29b      	uxth	r3, r3
 8009552:	4413      	add	r3, r2
 8009554:	b29a      	uxth	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	80da      	strh	r2, [r3, #6]

}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009570:	2180      	movs	r1, #128	; 0x80
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fcce 	bl	8009f14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009578:	2100      	movs	r1, #0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fcca 	bl	8009f14 <USBD_LL_StallEP>
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d032      	beq.n	8009604 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 f834 	bl	800960c <USBD_GetLen>
 80095a4:	4603      	mov	r3, r0
 80095a6:	3301      	adds	r3, #1
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	75fa      	strb	r2, [r7, #23]
 80095b8:	461a      	mov	r2, r3
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	4413      	add	r3, r2
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	7812      	ldrb	r2, [r2, #0]
 80095c2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	1c5a      	adds	r2, r3, #1
 80095c8:	75fa      	strb	r2, [r7, #23]
 80095ca:	461a      	mov	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	4413      	add	r3, r2
 80095d0:	2203      	movs	r2, #3
 80095d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80095d4:	e012      	b.n	80095fc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	60fa      	str	r2, [r7, #12]
 80095dc:	7dfa      	ldrb	r2, [r7, #23]
 80095de:	1c51      	adds	r1, r2, #1
 80095e0:	75f9      	strb	r1, [r7, #23]
 80095e2:	4611      	mov	r1, r2
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	440a      	add	r2, r1
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	75fa      	strb	r2, [r7, #23]
 80095f2:	461a      	mov	r2, r3
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	4413      	add	r3, r2
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e8      	bne.n	80095d6 <USBD_GetString+0x4e>
    }
  }
}
 8009604:	bf00      	nop
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009618:	e005      	b.n	8009626 <USBD_GetLen+0x1a>
  {
    len++;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	3301      	adds	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3301      	adds	r3, #1
 8009624:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1f5      	bne.n	800961a <USBD_GetLen+0xe>
  }

  return len;
 800962e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4613      	mov	r3, r2
 8009648:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2202      	movs	r2, #2
 800964e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009652:	88fa      	ldrh	r2, [r7, #6]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009658:	88fa      	ldrh	r2, [r7, #6]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800965e:	88fb      	ldrh	r3, [r7, #6]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	2100      	movs	r1, #0
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 fcde 	bl	800a026 <USBD_LL_Transmit>

  return USBD_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009682:	88fb      	ldrh	r3, [r7, #6]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	2100      	movs	r1, #0
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f000 fccc 	bl	800a026 <USBD_LL_Transmit>

  return USBD_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	4613      	mov	r3, r2
 80096a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2203      	movs	r2, #3
 80096aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096ae:	88fa      	ldrh	r2, [r7, #6]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80096b6:	88fa      	ldrh	r2, [r7, #6]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096be:	88fb      	ldrh	r3, [r7, #6]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	2100      	movs	r1, #0
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 fcd1 	bl	800a06c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	4613      	mov	r3, r2
 80096e0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096e2:	88fb      	ldrh	r3, [r7, #6]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	2100      	movs	r1, #0
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 fcbf 	bl	800a06c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2204      	movs	r2, #4
 8009704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009708:	2300      	movs	r3, #0
 800970a:	2200      	movs	r2, #0
 800970c:	2100      	movs	r1, #0
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fc89 	bl	800a026 <USBD_LL_Transmit>

  return USBD_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2205      	movs	r2, #5
 800972a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800972e:	2300      	movs	r3, #0
 8009730:	2200      	movs	r2, #0
 8009732:	2100      	movs	r1, #0
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fc99 	bl	800a06c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009748:	2200      	movs	r2, #0
 800974a:	4913      	ldr	r1, [pc, #76]	; (8009798 <MX_USB_DEVICE_Init+0x54>)
 800974c:	4813      	ldr	r0, [pc, #76]	; (800979c <MX_USB_DEVICE_Init+0x58>)
 800974e:	f7fe ff29 	bl	80085a4 <USBD_Init>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009758:	f7f7 f814 	bl	8000784 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800975c:	4910      	ldr	r1, [pc, #64]	; (80097a0 <MX_USB_DEVICE_Init+0x5c>)
 800975e:	480f      	ldr	r0, [pc, #60]	; (800979c <MX_USB_DEVICE_Init+0x58>)
 8009760:	f7fe ff4b 	bl	80085fa <USBD_RegisterClass>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800976a:	f7f7 f80b 	bl	8000784 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800976e:	490d      	ldr	r1, [pc, #52]	; (80097a4 <MX_USB_DEVICE_Init+0x60>)
 8009770:	480a      	ldr	r0, [pc, #40]	; (800979c <MX_USB_DEVICE_Init+0x58>)
 8009772:	f7fe fe79 	bl	8008468 <USBD_CDC_RegisterInterface>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800977c:	f7f7 f802 	bl	8000784 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009780:	4806      	ldr	r0, [pc, #24]	; (800979c <MX_USB_DEVICE_Init+0x58>)
 8009782:	f7fe ff54 	bl	800862e <USBD_Start>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800978c:	f7f6 fffa 	bl	8000784 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009790:	f7fa fb7a 	bl	8003e88 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009794:	bf00      	nop
 8009796:	bd80      	pop	{r7, pc}
 8009798:	24000130 	.word	0x24000130
 800979c:	24000278 	.word	0x24000278
 80097a0:	2400001c 	.word	0x2400001c
 80097a4:	24000120 	.word	0x24000120

080097a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80097ac:	2200      	movs	r2, #0
 80097ae:	4905      	ldr	r1, [pc, #20]	; (80097c4 <CDC_Init_FS+0x1c>)
 80097b0:	4805      	ldr	r0, [pc, #20]	; (80097c8 <CDC_Init_FS+0x20>)
 80097b2:	f7fe fe70 	bl	8008496 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80097b6:	4905      	ldr	r1, [pc, #20]	; (80097cc <CDC_Init_FS+0x24>)
 80097b8:	4803      	ldr	r0, [pc, #12]	; (80097c8 <CDC_Init_FS+0x20>)
 80097ba:	f7fe fe86 	bl	80084ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	24000d3c 	.word	0x24000d3c
 80097c8:	24000278 	.word	0x24000278
 80097cc:	2400053c 	.word	0x2400053c

080097d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097d0:	b480      	push	{r7}
 80097d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	6039      	str	r1, [r7, #0]
 80097ea:	71fb      	strb	r3, [r7, #7]
 80097ec:	4613      	mov	r3, r2
 80097ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	2b23      	cmp	r3, #35	; 0x23
 80097f4:	d84a      	bhi.n	800988c <CDC_Control_FS+0xac>
 80097f6:	a201      	add	r2, pc, #4	; (adr r2, 80097fc <CDC_Control_FS+0x1c>)
 80097f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fc:	0800988d 	.word	0x0800988d
 8009800:	0800988d 	.word	0x0800988d
 8009804:	0800988d 	.word	0x0800988d
 8009808:	0800988d 	.word	0x0800988d
 800980c:	0800988d 	.word	0x0800988d
 8009810:	0800988d 	.word	0x0800988d
 8009814:	0800988d 	.word	0x0800988d
 8009818:	0800988d 	.word	0x0800988d
 800981c:	0800988d 	.word	0x0800988d
 8009820:	0800988d 	.word	0x0800988d
 8009824:	0800988d 	.word	0x0800988d
 8009828:	0800988d 	.word	0x0800988d
 800982c:	0800988d 	.word	0x0800988d
 8009830:	0800988d 	.word	0x0800988d
 8009834:	0800988d 	.word	0x0800988d
 8009838:	0800988d 	.word	0x0800988d
 800983c:	0800988d 	.word	0x0800988d
 8009840:	0800988d 	.word	0x0800988d
 8009844:	0800988d 	.word	0x0800988d
 8009848:	0800988d 	.word	0x0800988d
 800984c:	0800988d 	.word	0x0800988d
 8009850:	0800988d 	.word	0x0800988d
 8009854:	0800988d 	.word	0x0800988d
 8009858:	0800988d 	.word	0x0800988d
 800985c:	0800988d 	.word	0x0800988d
 8009860:	0800988d 	.word	0x0800988d
 8009864:	0800988d 	.word	0x0800988d
 8009868:	0800988d 	.word	0x0800988d
 800986c:	0800988d 	.word	0x0800988d
 8009870:	0800988d 	.word	0x0800988d
 8009874:	0800988d 	.word	0x0800988d
 8009878:	0800988d 	.word	0x0800988d
 800987c:	0800988d 	.word	0x0800988d
 8009880:	0800988d 	.word	0x0800988d
 8009884:	0800988d 	.word	0x0800988d
 8009888:	0800988d 	.word	0x0800988d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800988c:	bf00      	nop
  }

  return (USBD_OK);
 800988e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009890:	4618      	mov	r0, r3
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	4805      	ldr	r0, [pc, #20]	; (80098c0 <CDC_Receive_FS+0x24>)
 80098aa:	f7fe fe0e 	bl	80084ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80098ae:	4804      	ldr	r0, [pc, #16]	; (80098c0 <CDC_Receive_FS+0x24>)
 80098b0:	f7fe fe4e 	bl	8008550 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80098b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	24000278 	.word	0x24000278

080098c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098d4:	4b0d      	ldr	r3, [pc, #52]	; (800990c <CDC_Transmit_FS+0x48>)
 80098d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e00b      	b.n	8009902 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80098ea:	887b      	ldrh	r3, [r7, #2]
 80098ec:	461a      	mov	r2, r3
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	4806      	ldr	r0, [pc, #24]	; (800990c <CDC_Transmit_FS+0x48>)
 80098f2:	f7fe fdd0 	bl	8008496 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098f6:	4805      	ldr	r0, [pc, #20]	; (800990c <CDC_Transmit_FS+0x48>)
 80098f8:	f7fe fdfb 	bl	80084f2 <USBD_CDC_TransmitPacket>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009900:	7bfb      	ldrb	r3, [r7, #15]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	24000278 	.word	0x24000278

08009910 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2212      	movs	r2, #18
 8009920:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009922:	4b03      	ldr	r3, [pc, #12]	; (8009930 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009924:	4618      	mov	r0, r3
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	2400014c 	.word	0x2400014c

08009934 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	6039      	str	r1, [r7, #0]
 800993e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2204      	movs	r2, #4
 8009944:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009946:	4b03      	ldr	r3, [pc, #12]	; (8009954 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	24000160 	.word	0x24000160

08009958 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	6039      	str	r1, [r7, #0]
 8009962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d105      	bne.n	8009976 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	4907      	ldr	r1, [pc, #28]	; (800998c <USBD_FS_ProductStrDescriptor+0x34>)
 800996e:	4808      	ldr	r0, [pc, #32]	; (8009990 <USBD_FS_ProductStrDescriptor+0x38>)
 8009970:	f7ff fe0a 	bl	8009588 <USBD_GetString>
 8009974:	e004      	b.n	8009980 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	4904      	ldr	r1, [pc, #16]	; (800998c <USBD_FS_ProductStrDescriptor+0x34>)
 800997a:	4805      	ldr	r0, [pc, #20]	; (8009990 <USBD_FS_ProductStrDescriptor+0x38>)
 800997c:	f7ff fe04 	bl	8009588 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009980:	4b02      	ldr	r3, [pc, #8]	; (800998c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009982:	4618      	mov	r0, r3
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	2400153c 	.word	0x2400153c
 8009990:	0800a340 	.word	0x0800a340

08009994 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	4603      	mov	r3, r0
 800999c:	6039      	str	r1, [r7, #0]
 800999e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	4904      	ldr	r1, [pc, #16]	; (80099b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099a4:	4804      	ldr	r0, [pc, #16]	; (80099b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099a6:	f7ff fdef 	bl	8009588 <USBD_GetString>
  return USBD_StrDesc;
 80099aa:	4b02      	ldr	r3, [pc, #8]	; (80099b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	2400153c 	.word	0x2400153c
 80099b8:	0800a358 	.word	0x0800a358

080099bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	6039      	str	r1, [r7, #0]
 80099c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	221a      	movs	r2, #26
 80099cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099ce:	f000 f843 	bl	8009a58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099d2:	4b02      	ldr	r3, [pc, #8]	; (80099dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	24000164 	.word	0x24000164

080099e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	4907      	ldr	r1, [pc, #28]	; (8009a14 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099f6:	4808      	ldr	r0, [pc, #32]	; (8009a18 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099f8:	f7ff fdc6 	bl	8009588 <USBD_GetString>
 80099fc:	e004      	b.n	8009a08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	4904      	ldr	r1, [pc, #16]	; (8009a14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a02:	4805      	ldr	r0, [pc, #20]	; (8009a18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a04:	f7ff fdc0 	bl	8009588 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a08:	4b02      	ldr	r3, [pc, #8]	; (8009a14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	2400153c 	.word	0x2400153c
 8009a18:	0800a36c 	.word	0x0800a36c

08009a1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	6039      	str	r1, [r7, #0]
 8009a26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d105      	bne.n	8009a3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	4907      	ldr	r1, [pc, #28]	; (8009a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a32:	4808      	ldr	r0, [pc, #32]	; (8009a54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a34:	f7ff fda8 	bl	8009588 <USBD_GetString>
 8009a38:	e004      	b.n	8009a44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	4904      	ldr	r1, [pc, #16]	; (8009a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a3e:	4805      	ldr	r0, [pc, #20]	; (8009a54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a40:	f7ff fda2 	bl	8009588 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a44:	4b02      	ldr	r3, [pc, #8]	; (8009a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	2400153c 	.word	0x2400153c
 8009a54:	0800a378 	.word	0x0800a378

08009a58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a5e:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <Get_SerialNum+0x44>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a64:	4b0e      	ldr	r3, [pc, #56]	; (8009aa0 <Get_SerialNum+0x48>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a6a:	4b0e      	ldr	r3, [pc, #56]	; (8009aa4 <Get_SerialNum+0x4c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4413      	add	r3, r2
 8009a76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d009      	beq.n	8009a92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a7e:	2208      	movs	r2, #8
 8009a80:	4909      	ldr	r1, [pc, #36]	; (8009aa8 <Get_SerialNum+0x50>)
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 f814 	bl	8009ab0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a88:	2204      	movs	r2, #4
 8009a8a:	4908      	ldr	r1, [pc, #32]	; (8009aac <Get_SerialNum+0x54>)
 8009a8c:	68b8      	ldr	r0, [r7, #8]
 8009a8e:	f000 f80f 	bl	8009ab0 <IntToUnicode>
  }
}
 8009a92:	bf00      	nop
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	1ff1e800 	.word	0x1ff1e800
 8009aa0:	1ff1e804 	.word	0x1ff1e804
 8009aa4:	1ff1e808 	.word	0x1ff1e808
 8009aa8:	24000166 	.word	0x24000166
 8009aac:	24000176 	.word	0x24000176

08009ab0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	4613      	mov	r3, r2
 8009abc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	75fb      	strb	r3, [r7, #23]
 8009ac6:	e027      	b.n	8009b18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	0f1b      	lsrs	r3, r3, #28
 8009acc:	2b09      	cmp	r3, #9
 8009ace:	d80b      	bhi.n	8009ae8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	0f1b      	lsrs	r3, r3, #28
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4619      	mov	r1, r3
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	440b      	add	r3, r1
 8009ae0:	3230      	adds	r2, #48	; 0x30
 8009ae2:	b2d2      	uxtb	r2, r2
 8009ae4:	701a      	strb	r2, [r3, #0]
 8009ae6:	e00a      	b.n	8009afe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	0f1b      	lsrs	r3, r3, #28
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	4619      	mov	r1, r3
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	440b      	add	r3, r1
 8009af8:	3237      	adds	r2, #55	; 0x37
 8009afa:	b2d2      	uxtb	r2, r2
 8009afc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	011b      	lsls	r3, r3, #4
 8009b02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	3301      	adds	r3, #1
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	2200      	movs	r2, #0
 8009b10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
 8009b14:	3301      	adds	r3, #1
 8009b16:	75fb      	strb	r3, [r7, #23]
 8009b18:	7dfa      	ldrb	r2, [r7, #23]
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d3d3      	bcc.n	8009ac8 <IntToUnicode+0x18>
  }
}
 8009b20:	bf00      	nop
 8009b22:	371c      	adds	r7, #28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08a      	sub	sp, #40	; 0x28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b34:	f107 0314 	add.w	r3, r7, #20
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	605a      	str	r2, [r3, #4]
 8009b3e:	609a      	str	r2, [r3, #8]
 8009b40:	60da      	str	r2, [r3, #12]
 8009b42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a1e      	ldr	r2, [pc, #120]	; (8009bc4 <HAL_PCD_MspInit+0x98>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d136      	bne.n	8009bbc <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b4e:	4b1e      	ldr	r3, [pc, #120]	; (8009bc8 <HAL_PCD_MspInit+0x9c>)
 8009b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b54:	4a1c      	ldr	r2, [pc, #112]	; (8009bc8 <HAL_PCD_MspInit+0x9c>)
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b5e:	4b1a      	ldr	r3, [pc, #104]	; (8009bc8 <HAL_PCD_MspInit+0x9c>)
 8009b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	613b      	str	r3, [r7, #16]
 8009b6a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b6c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b72:	2302      	movs	r3, #2
 8009b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009b7e:	230a      	movs	r3, #10
 8009b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b82:	f107 0314 	add.w	r3, r7, #20
 8009b86:	4619      	mov	r1, r3
 8009b88:	4810      	ldr	r0, [pc, #64]	; (8009bcc <HAL_PCD_MspInit+0xa0>)
 8009b8a:	f7f8 fdb7 	bl	80026fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b8e:	4b0e      	ldr	r3, [pc, #56]	; (8009bc8 <HAL_PCD_MspInit+0x9c>)
 8009b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009b94:	4a0c      	ldr	r2, [pc, #48]	; (8009bc8 <HAL_PCD_MspInit+0x9c>)
 8009b96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009b9e:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <HAL_PCD_MspInit+0x9c>)
 8009ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009bac:	2200      	movs	r2, #0
 8009bae:	2100      	movs	r1, #0
 8009bb0:	2065      	movs	r0, #101	; 0x65
 8009bb2:	f7f8 fd6e 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009bb6:	2065      	movs	r0, #101	; 0x65
 8009bb8:	f7f8 fd85 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009bbc:	bf00      	nop
 8009bbe:	3728      	adds	r7, #40	; 0x28
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	40080000 	.word	0x40080000
 8009bc8:	58024400 	.word	0x58024400
 8009bcc:	58020000 	.word	0x58020000

08009bd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009be4:	4619      	mov	r1, r3
 8009be6:	4610      	mov	r0, r2
 8009be8:	f7fe fd6a 	bl	80086c0 <USBD_LL_SetupStage>
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009c06:	78fa      	ldrb	r2, [r7, #3]
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	1a9b      	subs	r3, r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	440b      	add	r3, r1
 8009c14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f7fe fd9a 	bl	8008756 <USBD_LL_DataOutStage>
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	460b      	mov	r3, r1
 8009c34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009c3c:	78fa      	ldrb	r2, [r7, #3]
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	4613      	mov	r3, r2
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	1a9b      	subs	r3, r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	3348      	adds	r3, #72	; 0x48
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	78fb      	ldrb	r3, [r7, #3]
 8009c50:	4619      	mov	r1, r3
 8009c52:	f7fe fdf1 	bl	8008838 <USBD_LL_DataInStage>
}
 8009c56:	bf00      	nop
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fe ff04 	bl	8008a7a <USBD_LL_SOF>
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c82:	2301      	movs	r3, #1
 8009c84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73fb      	strb	r3, [r7, #15]
 8009c92:	e008      	b.n	8009ca6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d102      	bne.n	8009ca2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	73fb      	strb	r3, [r7, #15]
 8009ca0:	e001      	b.n	8009ca6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ca2:	f7f6 fd6f 	bl	8000784 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cac:	7bfa      	ldrb	r2, [r7, #15]
 8009cae:	4611      	mov	r1, r2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fe fea7 	bl	8008a04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fe fe60 	bl	8008982 <USBD_LL_Reset>
}
 8009cc2:	bf00      	nop
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fe fea2 	bl	8008a24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	6812      	ldr	r2, [r2, #0]
 8009cee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d005      	beq.n	8009d0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d00:	4b04      	ldr	r3, [pc, #16]	; (8009d14 <HAL_PCD_SuspendCallback+0x48>)
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	4a03      	ldr	r2, [pc, #12]	; (8009d14 <HAL_PCD_SuspendCallback+0x48>)
 8009d06:	f043 0306 	orr.w	r3, r3, #6
 8009d0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	e000ed00 	.word	0xe000ed00

08009d18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe fe91 	bl	8008a4e <USBD_LL_Resume>
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe febc 	bl	8008ac8 <USBD_LL_IsoOUTIncomplete>
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d6a:	78fa      	ldrb	r2, [r7, #3]
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe fe9d 	bl	8008aae <USBD_LL_IsoINIncomplete>
}
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fe fea9 	bl	8008ae2 <USBD_LL_DevConnected>
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe fea6 	bl	8008af8 <USBD_LL_DevDisconnected>
}
 8009dac:	bf00      	nop
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d13e      	bne.n	8009e42 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009dc4:	4a21      	ldr	r2, [pc, #132]	; (8009e4c <USBD_LL_Init+0x98>)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a1f      	ldr	r2, [pc, #124]	; (8009e4c <USBD_LL_Init+0x98>)
 8009dd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009dd4:	4b1d      	ldr	r3, [pc, #116]	; (8009e4c <USBD_LL_Init+0x98>)
 8009dd6:	4a1e      	ldr	r2, [pc, #120]	; (8009e50 <USBD_LL_Init+0x9c>)
 8009dd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009dda:	4b1c      	ldr	r3, [pc, #112]	; (8009e4c <USBD_LL_Init+0x98>)
 8009ddc:	2209      	movs	r2, #9
 8009dde:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009de0:	4b1a      	ldr	r3, [pc, #104]	; (8009e4c <USBD_LL_Init+0x98>)
 8009de2:	2202      	movs	r2, #2
 8009de4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009de6:	4b19      	ldr	r3, [pc, #100]	; (8009e4c <USBD_LL_Init+0x98>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009dec:	4b17      	ldr	r3, [pc, #92]	; (8009e4c <USBD_LL_Init+0x98>)
 8009dee:	2202      	movs	r2, #2
 8009df0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009df2:	4b16      	ldr	r3, [pc, #88]	; (8009e4c <USBD_LL_Init+0x98>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009df8:	4b14      	ldr	r3, [pc, #80]	; (8009e4c <USBD_LL_Init+0x98>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009dfe:	4b13      	ldr	r3, [pc, #76]	; (8009e4c <USBD_LL_Init+0x98>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009e04:	4b11      	ldr	r3, [pc, #68]	; (8009e4c <USBD_LL_Init+0x98>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009e0a:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <USBD_LL_Init+0x98>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e10:	4b0e      	ldr	r3, [pc, #56]	; (8009e4c <USBD_LL_Init+0x98>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e16:	480d      	ldr	r0, [pc, #52]	; (8009e4c <USBD_LL_Init+0x98>)
 8009e18:	f7f8 fe20 	bl	8002a5c <HAL_PCD_Init>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009e22:	f7f6 fcaf 	bl	8000784 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009e26:	2180      	movs	r1, #128	; 0x80
 8009e28:	4808      	ldr	r0, [pc, #32]	; (8009e4c <USBD_LL_Init+0x98>)
 8009e2a:	f7f9 ffb2 	bl	8003d92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009e2e:	2240      	movs	r2, #64	; 0x40
 8009e30:	2100      	movs	r1, #0
 8009e32:	4806      	ldr	r0, [pc, #24]	; (8009e4c <USBD_LL_Init+0x98>)
 8009e34:	f7f9 ff66 	bl	8003d04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009e38:	2280      	movs	r2, #128	; 0x80
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	4803      	ldr	r0, [pc, #12]	; (8009e4c <USBD_LL_Init+0x98>)
 8009e3e:	f7f9 ff61 	bl	8003d04 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	2400163c 	.word	0x2400163c
 8009e50:	40080000 	.word	0x40080000

08009e54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e60:	2300      	movs	r3, #0
 8009e62:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7f8 ff1a 	bl	8002ca4 <HAL_PCD_Start>
 8009e70:	4603      	mov	r3, r0
 8009e72:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 f92e 	bl	800a0d8 <USBD_Get_USB_Status>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	461a      	mov	r2, r3
 8009e98:	4603      	mov	r3, r0
 8009e9a:	70fb      	strb	r3, [r7, #3]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	70bb      	strb	r3, [r7, #2]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009eb2:	78bb      	ldrb	r3, [r7, #2]
 8009eb4:	883a      	ldrh	r2, [r7, #0]
 8009eb6:	78f9      	ldrb	r1, [r7, #3]
 8009eb8:	f7f9 fb2b 	bl	8003512 <HAL_PCD_EP_Open>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 f908 	bl	800a0d8 <USBD_Get_USB_Status>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ef0:	78fa      	ldrb	r2, [r7, #3]
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7f9 fb74 	bl	80035e2 <HAL_PCD_EP_Close>
 8009efa:	4603      	mov	r3, r0
 8009efc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 f8e9 	bl	800a0d8 <USBD_Get_USB_Status>
 8009f06:	4603      	mov	r3, r0
 8009f08:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f2e:	78fa      	ldrb	r2, [r7, #3]
 8009f30:	4611      	mov	r1, r2
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7f9 fc4c 	bl	80037d0 <HAL_PCD_EP_SetStall>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 f8ca 	bl	800a0d8 <USBD_Get_USB_Status>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7f9 fc91 	bl	8003898 <HAL_PCD_EP_ClrStall>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 f8ab 	bl	800a0d8 <USBD_Get_USB_Status>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fa2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	da0b      	bge.n	8009fc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fb2:	68f9      	ldr	r1, [r7, #12]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	1a9b      	subs	r3, r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	333e      	adds	r3, #62	; 0x3e
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	e00b      	b.n	8009fdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009fc4:	78fb      	ldrb	r3, [r7, #3]
 8009fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fca:	68f9      	ldr	r1, [r7, #12]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	00db      	lsls	r3, r3, #3
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009fda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a002:	78fa      	ldrb	r2, [r7, #3]
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f7f9 fa5e 	bl	80034c8 <HAL_PCD_SetAddress>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	4618      	mov	r0, r3
 800a014:	f000 f860 	bl	800a0d8 <USBD_Get_USB_Status>
 800a018:	4603      	mov	r3, r0
 800a01a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	461a      	mov	r2, r3
 800a032:	460b      	mov	r3, r1
 800a034:	72fb      	strb	r3, [r7, #11]
 800a036:	4613      	mov	r3, r2
 800a038:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a048:	893b      	ldrh	r3, [r7, #8]
 800a04a:	7af9      	ldrb	r1, [r7, #11]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	f7f9 fb75 	bl	800373c <HAL_PCD_EP_Transmit>
 800a052:	4603      	mov	r3, r0
 800a054:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800a056:	7dfb      	ldrb	r3, [r7, #23]
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 f83d 	bl	800a0d8 <USBD_Get_USB_Status>
 800a05e:	4603      	mov	r3, r0
 800a060:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800a062:	7dbb      	ldrb	r3, [r7, #22]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	607a      	str	r2, [r7, #4]
 800a076:	461a      	mov	r2, r3
 800a078:	460b      	mov	r3, r1
 800a07a:	72fb      	strb	r3, [r7, #11]
 800a07c:	4613      	mov	r3, r2
 800a07e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a08e:	893b      	ldrh	r3, [r7, #8]
 800a090:	7af9      	ldrb	r1, [r7, #11]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	f7f9 faef 	bl	8003676 <HAL_PCD_EP_Receive>
 800a098:	4603      	mov	r3, r0
 800a09a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 f81a 	bl	800a0d8 <USBD_Get_USB_Status>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800a0a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0c4:	78fa      	ldrb	r2, [r7, #3]
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7f9 fb1f 	bl	800370c <HAL_PCD_EP_GetRxCount>
 800a0ce:	4603      	mov	r3, r0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0e6:	79fb      	ldrb	r3, [r7, #7]
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d817      	bhi.n	800a11c <USBD_Get_USB_Status+0x44>
 800a0ec:	a201      	add	r2, pc, #4	; (adr r2, 800a0f4 <USBD_Get_USB_Status+0x1c>)
 800a0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f2:	bf00      	nop
 800a0f4:	0800a105 	.word	0x0800a105
 800a0f8:	0800a10b 	.word	0x0800a10b
 800a0fc:	0800a111 	.word	0x0800a111
 800a100:	0800a117 	.word	0x0800a117
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	73fb      	strb	r3, [r7, #15]
    break;
 800a108:	e00b      	b.n	800a122 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a10a:	2302      	movs	r3, #2
 800a10c:	73fb      	strb	r3, [r7, #15]
    break;
 800a10e:	e008      	b.n	800a122 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a110:	2301      	movs	r3, #1
 800a112:	73fb      	strb	r3, [r7, #15]
    break;
 800a114:	e005      	b.n	800a122 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a116:	2302      	movs	r3, #2
 800a118:	73fb      	strb	r3, [r7, #15]
    break;
 800a11a:	e002      	b.n	800a122 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a11c:	2302      	movs	r3, #2
 800a11e:	73fb      	strb	r3, [r7, #15]
    break;
 800a120:	bf00      	nop
  }
  return usb_status;
 800a122:	7bfb      	ldrb	r3, [r7, #15]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <__errno>:
 800a130:	4b01      	ldr	r3, [pc, #4]	; (800a138 <__errno+0x8>)
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	24000180 	.word	0x24000180

0800a13c <__libc_init_array>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	4e0d      	ldr	r6, [pc, #52]	; (800a174 <__libc_init_array+0x38>)
 800a140:	4c0d      	ldr	r4, [pc, #52]	; (800a178 <__libc_init_array+0x3c>)
 800a142:	1ba4      	subs	r4, r4, r6
 800a144:	10a4      	asrs	r4, r4, #2
 800a146:	2500      	movs	r5, #0
 800a148:	42a5      	cmp	r5, r4
 800a14a:	d109      	bne.n	800a160 <__libc_init_array+0x24>
 800a14c:	4e0b      	ldr	r6, [pc, #44]	; (800a17c <__libc_init_array+0x40>)
 800a14e:	4c0c      	ldr	r4, [pc, #48]	; (800a180 <__libc_init_array+0x44>)
 800a150:	f000 f8ea 	bl	800a328 <_init>
 800a154:	1ba4      	subs	r4, r4, r6
 800a156:	10a4      	asrs	r4, r4, #2
 800a158:	2500      	movs	r5, #0
 800a15a:	42a5      	cmp	r5, r4
 800a15c:	d105      	bne.n	800a16a <__libc_init_array+0x2e>
 800a15e:	bd70      	pop	{r4, r5, r6, pc}
 800a160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a164:	4798      	blx	r3
 800a166:	3501      	adds	r5, #1
 800a168:	e7ee      	b.n	800a148 <__libc_init_array+0xc>
 800a16a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a16e:	4798      	blx	r3
 800a170:	3501      	adds	r5, #1
 800a172:	e7f2      	b.n	800a15a <__libc_init_array+0x1e>
 800a174:	0800a398 	.word	0x0800a398
 800a178:	0800a398 	.word	0x0800a398
 800a17c:	0800a398 	.word	0x0800a398
 800a180:	0800a39c 	.word	0x0800a39c

0800a184 <malloc>:
 800a184:	4b02      	ldr	r3, [pc, #8]	; (800a190 <malloc+0xc>)
 800a186:	4601      	mov	r1, r0
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	f000 b861 	b.w	800a250 <_malloc_r>
 800a18e:	bf00      	nop
 800a190:	24000180 	.word	0x24000180

0800a194 <free>:
 800a194:	4b02      	ldr	r3, [pc, #8]	; (800a1a0 <free+0xc>)
 800a196:	4601      	mov	r1, r0
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	f000 b80b 	b.w	800a1b4 <_free_r>
 800a19e:	bf00      	nop
 800a1a0:	24000180 	.word	0x24000180

0800a1a4 <memset>:
 800a1a4:	4402      	add	r2, r0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d100      	bne.n	800a1ae <memset+0xa>
 800a1ac:	4770      	bx	lr
 800a1ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a1b2:	e7f9      	b.n	800a1a8 <memset+0x4>

0800a1b4 <_free_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	d045      	beq.n	800a248 <_free_r+0x94>
 800a1bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c0:	1f0c      	subs	r4, r1, #4
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	bfb8      	it	lt
 800a1c6:	18e4      	addlt	r4, r4, r3
 800a1c8:	f000 f8ac 	bl	800a324 <__malloc_lock>
 800a1cc:	4a1f      	ldr	r2, [pc, #124]	; (800a24c <_free_r+0x98>)
 800a1ce:	6813      	ldr	r3, [r2, #0]
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	b933      	cbnz	r3, 800a1e2 <_free_r+0x2e>
 800a1d4:	6063      	str	r3, [r4, #4]
 800a1d6:	6014      	str	r4, [r2, #0]
 800a1d8:	4628      	mov	r0, r5
 800a1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1de:	f000 b8a2 	b.w	800a326 <__malloc_unlock>
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	d90c      	bls.n	800a200 <_free_r+0x4c>
 800a1e6:	6821      	ldr	r1, [r4, #0]
 800a1e8:	1862      	adds	r2, r4, r1
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	bf04      	itt	eq
 800a1ee:	681a      	ldreq	r2, [r3, #0]
 800a1f0:	685b      	ldreq	r3, [r3, #4]
 800a1f2:	6063      	str	r3, [r4, #4]
 800a1f4:	bf04      	itt	eq
 800a1f6:	1852      	addeq	r2, r2, r1
 800a1f8:	6022      	streq	r2, [r4, #0]
 800a1fa:	6004      	str	r4, [r0, #0]
 800a1fc:	e7ec      	b.n	800a1d8 <_free_r+0x24>
 800a1fe:	4613      	mov	r3, r2
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	b10a      	cbz	r2, 800a208 <_free_r+0x54>
 800a204:	42a2      	cmp	r2, r4
 800a206:	d9fa      	bls.n	800a1fe <_free_r+0x4a>
 800a208:	6819      	ldr	r1, [r3, #0]
 800a20a:	1858      	adds	r0, r3, r1
 800a20c:	42a0      	cmp	r0, r4
 800a20e:	d10b      	bne.n	800a228 <_free_r+0x74>
 800a210:	6820      	ldr	r0, [r4, #0]
 800a212:	4401      	add	r1, r0
 800a214:	1858      	adds	r0, r3, r1
 800a216:	4282      	cmp	r2, r0
 800a218:	6019      	str	r1, [r3, #0]
 800a21a:	d1dd      	bne.n	800a1d8 <_free_r+0x24>
 800a21c:	6810      	ldr	r0, [r2, #0]
 800a21e:	6852      	ldr	r2, [r2, #4]
 800a220:	605a      	str	r2, [r3, #4]
 800a222:	4401      	add	r1, r0
 800a224:	6019      	str	r1, [r3, #0]
 800a226:	e7d7      	b.n	800a1d8 <_free_r+0x24>
 800a228:	d902      	bls.n	800a230 <_free_r+0x7c>
 800a22a:	230c      	movs	r3, #12
 800a22c:	602b      	str	r3, [r5, #0]
 800a22e:	e7d3      	b.n	800a1d8 <_free_r+0x24>
 800a230:	6820      	ldr	r0, [r4, #0]
 800a232:	1821      	adds	r1, r4, r0
 800a234:	428a      	cmp	r2, r1
 800a236:	bf04      	itt	eq
 800a238:	6811      	ldreq	r1, [r2, #0]
 800a23a:	6852      	ldreq	r2, [r2, #4]
 800a23c:	6062      	str	r2, [r4, #4]
 800a23e:	bf04      	itt	eq
 800a240:	1809      	addeq	r1, r1, r0
 800a242:	6021      	streq	r1, [r4, #0]
 800a244:	605c      	str	r4, [r3, #4]
 800a246:	e7c7      	b.n	800a1d8 <_free_r+0x24>
 800a248:	bd38      	pop	{r3, r4, r5, pc}
 800a24a:	bf00      	nop
 800a24c:	24000208 	.word	0x24000208

0800a250 <_malloc_r>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	1ccd      	adds	r5, r1, #3
 800a254:	f025 0503 	bic.w	r5, r5, #3
 800a258:	3508      	adds	r5, #8
 800a25a:	2d0c      	cmp	r5, #12
 800a25c:	bf38      	it	cc
 800a25e:	250c      	movcc	r5, #12
 800a260:	2d00      	cmp	r5, #0
 800a262:	4606      	mov	r6, r0
 800a264:	db01      	blt.n	800a26a <_malloc_r+0x1a>
 800a266:	42a9      	cmp	r1, r5
 800a268:	d903      	bls.n	800a272 <_malloc_r+0x22>
 800a26a:	230c      	movs	r3, #12
 800a26c:	6033      	str	r3, [r6, #0]
 800a26e:	2000      	movs	r0, #0
 800a270:	bd70      	pop	{r4, r5, r6, pc}
 800a272:	f000 f857 	bl	800a324 <__malloc_lock>
 800a276:	4a21      	ldr	r2, [pc, #132]	; (800a2fc <_malloc_r+0xac>)
 800a278:	6814      	ldr	r4, [r2, #0]
 800a27a:	4621      	mov	r1, r4
 800a27c:	b991      	cbnz	r1, 800a2a4 <_malloc_r+0x54>
 800a27e:	4c20      	ldr	r4, [pc, #128]	; (800a300 <_malloc_r+0xb0>)
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	b91b      	cbnz	r3, 800a28c <_malloc_r+0x3c>
 800a284:	4630      	mov	r0, r6
 800a286:	f000 f83d 	bl	800a304 <_sbrk_r>
 800a28a:	6020      	str	r0, [r4, #0]
 800a28c:	4629      	mov	r1, r5
 800a28e:	4630      	mov	r0, r6
 800a290:	f000 f838 	bl	800a304 <_sbrk_r>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d124      	bne.n	800a2e2 <_malloc_r+0x92>
 800a298:	230c      	movs	r3, #12
 800a29a:	6033      	str	r3, [r6, #0]
 800a29c:	4630      	mov	r0, r6
 800a29e:	f000 f842 	bl	800a326 <__malloc_unlock>
 800a2a2:	e7e4      	b.n	800a26e <_malloc_r+0x1e>
 800a2a4:	680b      	ldr	r3, [r1, #0]
 800a2a6:	1b5b      	subs	r3, r3, r5
 800a2a8:	d418      	bmi.n	800a2dc <_malloc_r+0x8c>
 800a2aa:	2b0b      	cmp	r3, #11
 800a2ac:	d90f      	bls.n	800a2ce <_malloc_r+0x7e>
 800a2ae:	600b      	str	r3, [r1, #0]
 800a2b0:	50cd      	str	r5, [r1, r3]
 800a2b2:	18cc      	adds	r4, r1, r3
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	f000 f836 	bl	800a326 <__malloc_unlock>
 800a2ba:	f104 000b 	add.w	r0, r4, #11
 800a2be:	1d23      	adds	r3, r4, #4
 800a2c0:	f020 0007 	bic.w	r0, r0, #7
 800a2c4:	1ac3      	subs	r3, r0, r3
 800a2c6:	d0d3      	beq.n	800a270 <_malloc_r+0x20>
 800a2c8:	425a      	negs	r2, r3
 800a2ca:	50e2      	str	r2, [r4, r3]
 800a2cc:	e7d0      	b.n	800a270 <_malloc_r+0x20>
 800a2ce:	428c      	cmp	r4, r1
 800a2d0:	684b      	ldr	r3, [r1, #4]
 800a2d2:	bf16      	itet	ne
 800a2d4:	6063      	strne	r3, [r4, #4]
 800a2d6:	6013      	streq	r3, [r2, #0]
 800a2d8:	460c      	movne	r4, r1
 800a2da:	e7eb      	b.n	800a2b4 <_malloc_r+0x64>
 800a2dc:	460c      	mov	r4, r1
 800a2de:	6849      	ldr	r1, [r1, #4]
 800a2e0:	e7cc      	b.n	800a27c <_malloc_r+0x2c>
 800a2e2:	1cc4      	adds	r4, r0, #3
 800a2e4:	f024 0403 	bic.w	r4, r4, #3
 800a2e8:	42a0      	cmp	r0, r4
 800a2ea:	d005      	beq.n	800a2f8 <_malloc_r+0xa8>
 800a2ec:	1a21      	subs	r1, r4, r0
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f000 f808 	bl	800a304 <_sbrk_r>
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	d0cf      	beq.n	800a298 <_malloc_r+0x48>
 800a2f8:	6025      	str	r5, [r4, #0]
 800a2fa:	e7db      	b.n	800a2b4 <_malloc_r+0x64>
 800a2fc:	24000208 	.word	0x24000208
 800a300:	2400020c 	.word	0x2400020c

0800a304 <_sbrk_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4c06      	ldr	r4, [pc, #24]	; (800a320 <_sbrk_r+0x1c>)
 800a308:	2300      	movs	r3, #0
 800a30a:	4605      	mov	r5, r0
 800a30c:	4608      	mov	r0, r1
 800a30e:	6023      	str	r3, [r4, #0]
 800a310:	f7f6 fb12 	bl	8000938 <_sbrk>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d102      	bne.n	800a31e <_sbrk_r+0x1a>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	b103      	cbz	r3, 800a31e <_sbrk_r+0x1a>
 800a31c:	602b      	str	r3, [r5, #0]
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	24001a44 	.word	0x24001a44

0800a324 <__malloc_lock>:
 800a324:	4770      	bx	lr

0800a326 <__malloc_unlock>:
 800a326:	4770      	bx	lr

0800a328 <_init>:
 800a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32a:	bf00      	nop
 800a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a32e:	bc08      	pop	{r3}
 800a330:	469e      	mov	lr, r3
 800a332:	4770      	bx	lr

0800a334 <_fini>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr
