
blyadsky_pidorasyshe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005344  08005344  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08005344  08005344  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005344  08005344  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005344  08005344  00015344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800534c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001158  200001e4  08005530  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000133c  08005530  0002133c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010026  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000295f  00000000  00000000  00030233  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  00032b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f0  00000000  00000000  000335d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016206  00000000  00000000  00033ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3f5  00000000  00000000  0004a0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d124  00000000  00000000  000554bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c25df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000285c  00000000  00000000  000c265c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	080052c0 	.word	0x080052c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	080052c0 	.word	0x080052c0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 f9c3 	bl	80004dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82f 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f889 	bl	8000270 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015e:	f004 fb63 	bl	8004828 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //uint16_t data[1000];
  uint8_t* data = malloc(POINT_COUNT * sizeof(uint16_t));
 8000162:	f242 7010 	movw	r0, #10000	; 0x2710
 8000166:	f005 f81f 	bl	80051a8 <malloc>
 800016a:	4603      	mov	r3, r0
 800016c:	60bb      	str	r3, [r7, #8]
  for (uint16_t i = 0; i < POINT_COUNT; i++) {
 800016e:	2300      	movs	r3, #0
 8000170:	81fb      	strh	r3, [r7, #14]
 8000172:	e00a      	b.n	800018a <main+0x3e>
	  uint16_t d = 1;//i % 4095;
 8000174:	2301      	movs	r3, #1
 8000176:	80bb      	strh	r3, [r7, #4]
	  memcpy((data + i * sizeof(uint16_t)), &d, sizeof(uint16_t));
 8000178:	89fb      	ldrh	r3, [r7, #14]
 800017a:	005b      	lsls	r3, r3, #1
 800017c:	68ba      	ldr	r2, [r7, #8]
 800017e:	4413      	add	r3, r2
 8000180:	88ba      	ldrh	r2, [r7, #4]
 8000182:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < POINT_COUNT; i++) {
 8000184:	89fb      	ldrh	r3, [r7, #14]
 8000186:	3301      	adds	r3, #1
 8000188:	81fb      	strh	r3, [r7, #14]
 800018a:	89fb      	ldrh	r3, [r7, #14]
 800018c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000190:	4293      	cmp	r3, r2
 8000192:	d9ef      	bls.n	8000174 <main+0x28>
  }
  /* USER CODE END 2 */
  uint8_t flag = 1;
 8000194:	2301      	movs	r3, #1
 8000196:	71fb      	strb	r3, [r7, #7]
  {
	  //sprintf(strToSend, "\n\r");
	  /*while( != USBD_OK) {

	  }*/
	  CDC_Transmit_FS(data, POINT_COUNT * sizeof(uint16_t));
 8000198:	f242 7110 	movw	r1, #10000	; 0x2710
 800019c:	68b8      	ldr	r0, [r7, #8]
 800019e:	f004 fc07 	bl	80049b0 <CDC_Transmit_FS>
	  isDataSendingFlag = 1;
 80001a2:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <main+0x68>)
 80001a4:	2201      	movs	r2, #1
 80001a6:	701a      	strb	r2, [r3, #0]
	  while(isDataSendingFlag) {}
 80001a8:	bf00      	nop
 80001aa:	4b02      	ldr	r3, [pc, #8]	; (80001b4 <main+0x68>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d1fb      	bne.n	80001aa <main+0x5e>
  {
 80001b2:	e7f1      	b.n	8000198 <main+0x4c>
 80001b4:	20000200 	.word	0x20000200

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b094      	sub	sp, #80	; 0x50
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c2:	2228      	movs	r2, #40	; 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f005 f805 	bl	80051d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	f107 0314 	add.w	r3, r7, #20
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e8:	2301      	movs	r3, #1
 80001ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fa:	2302      	movs	r3, #2
 80001fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000204:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000208:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	4618      	mov	r0, r3
 8000210:	f001 f9b4 	bl	800157c <HAL_RCC_OscConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800021a:	f000 f86d 	bl	80002f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021e:	230f      	movs	r3, #15
 8000220:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	2101      	movs	r1, #1
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fc1e 	bl	8001a7c <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000246:	f000 f857 	bl	80002f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800024a:	2310      	movs	r3, #16
 800024c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800024e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000252:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fd7a 	bl	8001d50 <HAL_RCCEx_PeriphCLKConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000262:	f000 f849 	bl	80002f8 <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3750      	adds	r7, #80	; 0x50
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <MX_GPIO_Init+0x58>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a13      	ldr	r2, [pc, #76]	; (80002c8 <MX_GPIO_Init+0x58>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6193      	str	r3, [r2, #24]
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <MX_GPIO_Init+0x58>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f003 0310 	and.w	r3, r3, #16
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <MX_GPIO_Init+0x58>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <MX_GPIO_Init+0x58>)
 8000294:	f043 0320 	orr.w	r3, r3, #32
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <MX_GPIO_Init+0x58>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0320 	and.w	r3, r3, #32
 80002a2:	60bb      	str	r3, [r7, #8]
 80002a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <MX_GPIO_Init+0x58>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <MX_GPIO_Init+0x58>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <MX_GPIO_Init+0x58>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0304 	and.w	r3, r3, #4
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]

}
 80002be:	bf00      	nop
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <CDC_ReciveCallBack>:

/* USER CODE BEGIN 4 */
char str[4] = "all";
void CDC_ReciveCallBack(uint8_t *buf, uint32_t len)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]

	isDataSendingFlag = memcmp(buf, &str, 3);
 80002d6:	2203      	movs	r2, #3
 80002d8:	4905      	ldr	r1, [pc, #20]	; (80002f0 <CDC_ReciveCallBack+0x24>)
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f004 ff6c 	bl	80051b8 <memcmp>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <CDC_ReciveCallBack+0x28>)
 80002e6:	701a      	strb	r2, [r3, #0]
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000000 	.word	0x20000000
 80002f4:	20000200 	.word	0x20000200

080002f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <HAL_MspInit+0x5c>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a14      	ldr	r2, [pc, #80]	; (8000360 <HAL_MspInit+0x5c>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6193      	str	r3, [r2, #24]
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <HAL_MspInit+0x5c>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <HAL_MspInit+0x5c>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <HAL_MspInit+0x5c>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <HAL_MspInit+0x5c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <HAL_MspInit+0x60>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <HAL_MspInit+0x60>)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000
 8000364:	40010000 	.word	0x40010000

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <HardFault_Handler+0x4>

0800037a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <MemManage_Handler+0x4>

08000380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <BusFault_Handler+0x4>

08000386 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800038a:	e7fe      	b.n	800038a <UsageFault_Handler+0x4>

0800038c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b4:	f000 f8d8 	bl	8000568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}

080003bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003c0:	4802      	ldr	r0, [pc, #8]	; (80003cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003c2:	f000 fb01 	bl	80009c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200010cc 	.word	0x200010cc

080003d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <_sbrk+0x50>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d102      	bne.n	80003e6 <_sbrk+0x16>
		heap_end = &end;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <_sbrk+0x50>)
 80003e2:	4a10      	ldr	r2, [pc, #64]	; (8000424 <_sbrk+0x54>)
 80003e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <_sbrk+0x50>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <_sbrk+0x50>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4413      	add	r3, r2
 80003f4:	466a      	mov	r2, sp
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d907      	bls.n	800040a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80003fa:	f004 feab 	bl	8005154 <__errno>
 80003fe:	4602      	mov	r2, r0
 8000400:	230c      	movs	r3, #12
 8000402:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000404:	f04f 33ff 	mov.w	r3, #4294967295
 8000408:	e006      	b.n	8000418 <_sbrk+0x48>
	}

	heap_end += incr;
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <_sbrk+0x50>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	4a03      	ldr	r2, [pc, #12]	; (8000420 <_sbrk+0x50>)
 8000414:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000416:	68fb      	ldr	r3, [r7, #12]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000204 	.word	0x20000204
 8000424:	20001340 	.word	0x20001340

08000428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x5c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a14      	ldr	r2, [pc, #80]	; (8000484 <SystemInit+0x5c>)
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x5c>)
 800043a:	685a      	ldr	r2, [r3, #4]
 800043c:	4911      	ldr	r1, [pc, #68]	; (8000484 <SystemInit+0x5c>)
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <SystemInit+0x60>)
 8000440:	4013      	ands	r3, r2
 8000442:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x5c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <SystemInit+0x5c>)
 800044a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800044e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000452:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <SystemInit+0x5c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <SystemInit+0x5c>)
 800045a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800045e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <SystemInit+0x5c>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <SystemInit+0x5c>)
 8000466:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800046a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <SystemInit+0x5c>)
 800046e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000472:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <SystemInit+0x64>)
 8000476:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800047a:	609a      	str	r2, [r3, #8]
#endif 
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000
 8000488:	f8ff0000 	.word	0xf8ff0000
 800048c:	e000ed00 	.word	0xe000ed00

08000490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000490:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000492:	e003      	b.n	800049c <LoopCopyDataInit>

08000494 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000494:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000496:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000498:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800049a:	3104      	adds	r1, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800049c:	480a      	ldr	r0, [pc, #40]	; (80004c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004a4:	d3f6      	bcc.n	8000494 <CopyDataInit>
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004a8:	e002      	b.n	80004b0 <LoopFillZerobss>

080004aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004ac:	f842 3b04 	str.w	r3, [r2], #4

080004b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004b4:	d3f9      	bcc.n	80004aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004b6:	f7ff ffb7 	bl	8000428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ba:	f004 fe51 	bl	8005160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f7ff fe45 	bl	800014c <main>
  bx lr
 80004c2:	4770      	bx	lr
  ldr r3, =_sidata
 80004c4:	0800534c 	.word	0x0800534c
  ldr r0, =_sdata
 80004c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004cc:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80004d0:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80004d4:	2000133c 	.word	0x2000133c

080004d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_2_IRQHandler>
	...

080004dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_Init+0x28>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <HAL_Init+0x28>)
 80004e6:	f043 0310 	orr.w	r3, r3, #16
 80004ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 f923 	bl	8000738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 f808 	bl	8000508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f8:	f7ff ff04 	bl	8000304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40022000 	.word	0x40022000

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_InitTick+0x54>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x58>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000522:	fbb2 f3f3 	udiv	r3, r2, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f93b 	bl	80007a2 <HAL_SYSTICK_Config>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
 8000534:	e00e      	b.n	8000554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d80a      	bhi.n	8000552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	f000 f903 	bl	800074e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000548:	4a06      	ldr	r2, [pc, #24]	; (8000564 <HAL_InitTick+0x5c>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800054e:	2300      	movs	r3, #0
 8000550:	e000      	b.n	8000554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000004 	.word	0x20000004
 8000560:	2000000c 	.word	0x2000000c
 8000564:	20000008 	.word	0x20000008

08000568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <HAL_IncTick+0x1c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <HAL_IncTick+0x20>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x20>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	2000000c 	.word	0x2000000c
 8000588:	20000434 	.word	0x20000434

0800058c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return uwTick;
 8000590:	4b02      	ldr	r3, [pc, #8]	; (800059c <HAL_GetTick+0x10>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000434 	.word	0x20000434

080005a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f003 0307 	and.w	r3, r3, #7
 80005ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005bc:	4013      	ands	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005d2:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <__NVIC_SetPriorityGrouping+0x44>)
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	60d3      	str	r3, [r2, #12]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <__NVIC_GetPriorityGrouping+0x18>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	f003 0307 	and.w	r3, r3, #7
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	db0b      	blt.n	800062e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 021f 	and.w	r2, r3, #31
 800061c:	4906      	ldr	r1, [pc, #24]	; (8000638 <__NVIC_EnableIRQ+0x34>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	095b      	lsrs	r3, r3, #5
 8000624:	2001      	movs	r0, #1
 8000626:	fa00 f202 	lsl.w	r2, r0, r2
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100

0800063c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064c:	2b00      	cmp	r3, #0
 800064e:	db0a      	blt.n	8000666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b2da      	uxtb	r2, r3
 8000654:	490c      	ldr	r1, [pc, #48]	; (8000688 <__NVIC_SetPriority+0x4c>)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	0112      	lsls	r2, r2, #4
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	440b      	add	r3, r1
 8000660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000664:	e00a      	b.n	800067c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4908      	ldr	r1, [pc, #32]	; (800068c <__NVIC_SetPriority+0x50>)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	f003 030f 	and.w	r3, r3, #15
 8000672:	3b04      	subs	r3, #4
 8000674:	0112      	lsls	r2, r2, #4
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	440b      	add	r3, r1
 800067a:	761a      	strb	r2, [r3, #24]
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000e100 	.word	0xe000e100
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000690:	b480      	push	{r7}
 8000692:	b089      	sub	sp, #36	; 0x24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	f1c3 0307 	rsb	r3, r3, #7
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	bf28      	it	cs
 80006ae:	2304      	movcs	r3, #4
 80006b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	3304      	adds	r3, #4
 80006b6:	2b06      	cmp	r3, #6
 80006b8:	d902      	bls.n	80006c0 <NVIC_EncodePriority+0x30>
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3b03      	subs	r3, #3
 80006be:	e000      	b.n	80006c2 <NVIC_EncodePriority+0x32>
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	f04f 32ff 	mov.w	r2, #4294967295
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	43da      	mvns	r2, r3
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	401a      	ands	r2, r3
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d8:	f04f 31ff 	mov.w	r1, #4294967295
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	43d9      	mvns	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	4313      	orrs	r3, r2
         );
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3724      	adds	r7, #36	; 0x24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000704:	d301      	bcc.n	800070a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2301      	movs	r3, #1
 8000708:	e00f      	b.n	800072a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <SysTick_Config+0x40>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3b01      	subs	r3, #1
 8000710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000712:	210f      	movs	r1, #15
 8000714:	f04f 30ff 	mov.w	r0, #4294967295
 8000718:	f7ff ff90 	bl	800063c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <SysTick_Config+0x40>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <SysTick_Config+0x40>)
 8000724:	2207      	movs	r2, #7
 8000726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	e000e010 	.word	0xe000e010

08000738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff2d 	bl	80005a0 <__NVIC_SetPriorityGrouping>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000760:	f7ff ff42 	bl	80005e8 <__NVIC_GetPriorityGrouping>
 8000764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	6978      	ldr	r0, [r7, #20]
 800076c:	f7ff ff90 	bl	8000690 <NVIC_EncodePriority>
 8000770:	4602      	mov	r2, r0
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff5f 	bl	800063c <__NVIC_SetPriority>
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff35 	bl	8000604 <__NVIC_EnableIRQ>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffa2 	bl	80006f4 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80007ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007bc:	b08b      	sub	sp, #44	; 0x2c
 80007be:	af06      	add	r7, sp, #24
 80007c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d101      	bne.n	80007cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	e0d3      	b.n	8000974 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d106      	bne.n	80007e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f004 fa19 	bl	8004c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2203      	movs	r2, #3
 80007ea:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fb89 	bl	8001f0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	687e      	ldr	r6, [r7, #4]
 8000800:	466d      	mov	r5, sp
 8000802:	f106 0410 	add.w	r4, r6, #16
 8000806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800080a:	6823      	ldr	r3, [r4, #0]
 800080c:	602b      	str	r3, [r5, #0]
 800080e:	1d33      	adds	r3, r6, #4
 8000810:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000812:	6838      	ldr	r0, [r7, #0]
 8000814:	f001 fb52 	bl	8001ebc <USB_CoreInit>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d005      	beq.n	800082a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2202      	movs	r2, #2
 8000822:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e0a4      	b.n	8000974 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fb86 	bl	8001f42 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e035      	b.n	80008a8 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	015b      	lsls	r3, r3, #5
 8000842:	4413      	add	r3, r2
 8000844:	3329      	adds	r3, #41	; 0x29
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	015b      	lsls	r3, r3, #5
 8000850:	4413      	add	r3, r2
 8000852:	3328      	adds	r3, #40	; 0x28
 8000854:	7bfa      	ldrb	r2, [r7, #15]
 8000856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	7bfa      	ldrb	r2, [r7, #15]
 800085c:	b291      	uxth	r1, r2
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	015b      	lsls	r3, r3, #5
 8000862:	4413      	add	r3, r2
 8000864:	3336      	adds	r3, #54	; 0x36
 8000866:	460a      	mov	r2, r1
 8000868:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	015b      	lsls	r3, r3, #5
 8000870:	4413      	add	r3, r2
 8000872:	332b      	adds	r3, #43	; 0x2b
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	015b      	lsls	r3, r3, #5
 800087e:	4413      	add	r3, r2
 8000880:	3338      	adds	r3, #56	; 0x38
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	015b      	lsls	r3, r3, #5
 800088c:	4413      	add	r3, r2
 800088e:	333c      	adds	r3, #60	; 0x3c
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	3302      	adds	r3, #2
 800089a:	015b      	lsls	r3, r3, #5
 800089c:	4413      	add	r3, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	3301      	adds	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	7bfa      	ldrb	r2, [r7, #15]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d3c4      	bcc.n	800083c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	e031      	b.n	800091c <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	015b      	lsls	r3, r3, #5
 80008be:	4413      	add	r3, r2
 80008c0:	f203 1329 	addw	r3, r3, #297	; 0x129
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	015b      	lsls	r3, r3, #5
 80008ce:	4413      	add	r3, r2
 80008d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	015b      	lsls	r3, r3, #5
 80008de:	4413      	add	r3, r2
 80008e0:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	015b      	lsls	r3, r3, #5
 80008ee:	4413      	add	r3, r2
 80008f0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	015b      	lsls	r3, r3, #5
 80008fe:	4413      	add	r3, r2
 8000900:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	330a      	adds	r3, #10
 800090e:	015b      	lsls	r3, r3, #5
 8000910:	4413      	add	r3, r2
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	3301      	adds	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	7bfa      	ldrb	r2, [r7, #15]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	d3c8      	bcc.n	80008b8 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	687e      	ldr	r6, [r7, #4]
 800092e:	466d      	mov	r5, sp
 8000930:	f106 0410 	add.w	r4, r6, #16
 8000934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	602b      	str	r3, [r5, #0]
 800093c:	1d33      	adds	r3, r6, #4
 800093e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000940:	6838      	ldr	r0, [r7, #0]
 8000942:	f001 fb0a 	bl	8001f5a <USB_DevInit>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d005      	beq.n	8000958 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2202      	movs	r2, #2
 8000950:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	e00d      	b.n	8000974 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2201      	movs	r2, #1
 8000964:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fb48 	bl	8003002 <USB_DevDisconnect>

  return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800097c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800098a:	2b01      	cmp	r3, #1
 800098c:	d101      	bne.n	8000992 <HAL_PCD_Start+0x16>
 800098e:	2302      	movs	r3, #2
 8000990:	e016      	b.n	80009c0 <HAL_PCD_Start+0x44>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2201      	movs	r2, #1
 8000996:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800099a:	2101      	movs	r1, #1
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f004 fba2 	bl	80050e6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 fb21 	bl	8002fee <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fa93 	bl	8001edc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 fb1e 	bl	8003016 <USB_ReadInterrupts>
 80009da:	4603      	mov	r3, r0
 80009dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009e4:	d102      	bne.n	80009ec <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 faf2 	bl	8000fd0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 fb10 	bl	8003016 <USB_ReadInterrupts>
 80009f6:	4603      	mov	r3, r0
 80009f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a00:	d112      	bne.n	8000a28 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a14:	b292      	uxth	r2, r2
 8000a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f004 f971 	bl	8004d02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000a20:	2100      	movs	r1, #0
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f8de 	bl	8000be4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 faf2 	bl	8003016 <USB_ReadInterrupts>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a3c:	d10b      	bne.n	8000a56 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a50:	b292      	uxth	r2, r2
 8000a52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fadb 	bl	8003016 <USB_ReadInterrupts>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a6a:	d10b      	bne.n	8000a84 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fac4 	bl	8003016 <USB_ReadInterrupts>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a98:	d126      	bne.n	8000ae8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f022 0204 	bic.w	r2, r2, #4
 8000aac:	b292      	uxth	r2, r2
 8000aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0208 	bic.w	r2, r2, #8
 8000ac4:	b292      	uxth	r2, r2
 8000ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f004 f952 	bl	8004d74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ae2:	b292      	uxth	r2, r2
 8000ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 fa92 	bl	8003016 <USB_ReadInterrupts>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000afc:	d13d      	bne.n	8000b7a <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f042 0208 	orr.w	r2, r2, #8
 8000b10:	b292      	uxth	r2, r2
 8000b12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b28:	b292      	uxth	r2, r2
 8000b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f042 0204 	orr.w	r2, r2, #4
 8000b40:	b292      	uxth	r2, r2
 8000b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fa63 	bl	8003016 <USB_ReadInterrupts>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b5a:	d10b      	bne.n	8000b74 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b6e:	b292      	uxth	r2, r2
 8000b70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f004 f8e3 	bl	8004d40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fa49 	bl	8003016 <USB_ReadInterrupts>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b8e:	d10e      	bne.n	8000bae <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ba2:	b292      	uxth	r2, r2
 8000ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f004 f89c 	bl	8004ce6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fa2f 	bl	8003016 <USB_ReadInterrupts>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bc2:	d10b      	bne.n	8000bdc <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bd6:	b292      	uxth	r2, r2
 8000bd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d101      	bne.n	8000bfe <HAL_PCD_SetAddress+0x1a>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e013      	b.n	8000c26 <HAL_PCD_SetAddress+0x42>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2201      	movs	r2, #1
 8000c02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	78fa      	ldrb	r2, [r7, #3]
 8000c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	78fa      	ldrb	r2, [r7, #3]
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 f9d6 	bl	8002fc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	4608      	mov	r0, r1
 8000c38:	4611      	mov	r1, r2
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	70fb      	strb	r3, [r7, #3]
 8000c40:	460b      	mov	r3, r1
 8000c42:	803b      	strh	r3, [r7, #0]
 8000c44:	4613      	mov	r3, r2
 8000c46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da0b      	bge.n	8000c6c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	015b      	lsls	r3, r3, #5
 8000c5c:	3328      	adds	r3, #40	; 0x28
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2201      	movs	r2, #1
 8000c68:	705a      	strb	r2, [r3, #1]
 8000c6a:	e00b      	b.n	8000c84 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	015b      	lsls	r3, r3, #5
 8000c74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2200      	movs	r2, #0
 8000c82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c90:	883a      	ldrh	r2, [r7, #0]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	78ba      	ldrb	r2, [r7, #2]
 8000c9a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000cae:	78bb      	ldrb	r3, [r7, #2]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d102      	bne.n	8000cba <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d101      	bne.n	8000cc8 <HAL_PCD_EP_Open+0x9a>
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	e00e      	b.n	8000ce6 <HAL_PCD_EP_Open+0xb8>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	68f9      	ldr	r1, [r7, #12]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 f964 	bl	8001fa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	da0b      	bge.n	8000d1a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d02:	78fb      	ldrb	r3, [r7, #3]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	015b      	lsls	r3, r3, #5
 8000d0a:	3328      	adds	r3, #40	; 0x28
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2201      	movs	r2, #1
 8000d16:	705a      	strb	r2, [r3, #1]
 8000d18:	e00b      	b.n	8000d32 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	015b      	lsls	r3, r3, #5
 8000d22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d101      	bne.n	8000d4c <HAL_PCD_EP_Close+0x5e>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	e00e      	b.n	8000d6a <HAL_PCD_EP_Close+0x7c>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 fc10 	bl	8002580 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	015b      	lsls	r3, r3, #5
 8000d8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2200      	movs	r2, #0
 8000daa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000db8:	7afb      	ldrb	r3, [r7, #11]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d106      	bne.n	8000dd0 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6979      	ldr	r1, [r7, #20]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fd6f 	bl	80028ac <USB_EPStartXfer>
 8000dce:	e005      	b.n	8000ddc <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6979      	ldr	r1, [r7, #20]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fd68 	bl	80028ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	330a      	adds	r3, #10
 8000dfc:	015b      	lsls	r3, r3, #5
 8000dfe:	4413      	add	r3, r2
 8000e00:	3304      	adds	r3, #4
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e1e:	7afb      	ldrb	r3, [r7, #11]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	015b      	lsls	r3, r3, #5
 8000e26:	3328      	adds	r3, #40	; 0x28
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2201      	movs	r2, #1
 8000e44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e46:	7afb      	ldrb	r3, [r7, #11]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e52:	7afb      	ldrb	r3, [r7, #11]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d106      	bne.n	8000e6a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6979      	ldr	r1, [r7, #20]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fd22 	bl	80028ac <USB_EPStartXfer>
 8000e68:	e005      	b.n	8000e76 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6979      	ldr	r1, [r7, #20]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fd1b 	bl	80028ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	f003 0207 	and.w	r2, r3, #7
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d901      	bls.n	8000e9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e046      	b.n	8000f2c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da0b      	bge.n	8000ebe <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	015b      	lsls	r3, r3, #5
 8000eae:	3328      	adds	r3, #40	; 0x28
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	705a      	strb	r2, [r3, #1]
 8000ebc:	e009      	b.n	8000ed2 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	015b      	lsls	r3, r3, #5
 8000ec2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_PCD_EP_SetStall+0x72>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e01c      	b.n	8000f2c <HAL_PCD_EP_SetStall+0xac>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68f9      	ldr	r1, [r7, #12]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 ff8b 	bl	8002e1c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d108      	bne.n	8000f22 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	f002 f889 	bl	8003034 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	f003 020f 	and.w	r2, r3, #15
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d901      	bls.n	8000f52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e03a      	b.n	8000fc8 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	da0b      	bge.n	8000f72 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	015b      	lsls	r3, r3, #5
 8000f62:	3328      	adds	r3, #40	; 0x28
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	705a      	strb	r2, [r3, #1]
 8000f70:	e00b      	b.n	8000f8a <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	015b      	lsls	r3, r3, #5
 8000f7a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <HAL_PCD_EP_ClrStall+0x76>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e00e      	b.n	8000fc8 <HAL_PCD_EP_ClrStall+0x94>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68f9      	ldr	r1, [r7, #12]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 ff71 	bl	8002ea0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000fd8:	e282      	b.n	80014e0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fe2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000fe4:	8afb      	ldrh	r3, [r7, #22]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f003 030f 	and.w	r3, r3, #15
 8000fec:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8000fee:	7d7b      	ldrb	r3, [r7, #21]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f040 8142 	bne.w	800127a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ff6:	8afb      	ldrh	r3, [r7, #22]
 8000ff8:	f003 0310 	and.w	r3, r3, #16
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d151      	bne.n	80010a4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800100c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001010:	b29c      	uxth	r4, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800101a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800101e:	b29b      	uxth	r3, r3
 8001020:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3328      	adds	r3, #40	; 0x28
 8001026:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001030:	b29b      	uxth	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	3302      	adds	r3, #2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	4413      	add	r3, r2
 8001046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	695a      	ldr	r2, [r3, #20]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	441a      	add	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001062:	2100      	movs	r1, #0
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f003 fe27 	bl	8004cb8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8234 	beq.w	80014e0 <PCD_EP_ISR_Handler+0x510>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	2b00      	cmp	r3, #0
 800107e:	f040 822f 	bne.w	80014e0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800108e:	b2da      	uxtb	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b292      	uxth	r2, r2
 8001096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80010a2:	e21d      	b.n	80014e0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010aa:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80010b4:	8a7b      	ldrh	r3, [r7, #18]
 80010b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d033      	beq.n	8001126 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	3306      	adds	r3, #6
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f001 ffe8 	bl	80030d2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	b29a      	uxth	r2, r3
 800110a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800110e:	4013      	ands	r3, r2
 8001110:	b29c      	uxth	r4, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800111a:	b292      	uxth	r2, r2
 800111c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f003 fda0 	bl	8004c64 <HAL_PCD_SetupStageCallback>
 8001124:	e1dc      	b.n	80014e0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001126:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f280 81d8 	bge.w	80014e0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	b29a      	uxth	r2, r3
 8001138:	f640 738f 	movw	r3, #3983	; 0xf8f
 800113c:	4013      	ands	r3, r2
 800113e:	b29c      	uxth	r4, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001148:	b292      	uxth	r2, r2
 800114a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001154:	b29b      	uxth	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4413      	add	r3, r2
 8001160:	3306      	adds	r3, #6
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	4413      	add	r3, r2
 800116a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d019      	beq.n	80011b4 <PCD_EP_ISR_Handler+0x1e4>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d015      	beq.n	80011b4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6959      	ldr	r1, [r3, #20]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001198:	b29b      	uxth	r3, r3
 800119a:	f001 ff9a 	bl	80030d2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	441a      	add	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80011ac:	2100      	movs	r1, #0
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f003 fd6a 	bl	8004c88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	461c      	mov	r4, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	441c      	add	r4, r3
 80011c6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80011ca:	461c      	mov	r4, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10e      	bne.n	80011f2 <PCD_EP_ISR_Handler+0x222>
 80011d4:	8823      	ldrh	r3, [r4, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80011dc:	b29b      	uxth	r3, r3
 80011de:	8023      	strh	r3, [r4, #0]
 80011e0:	8823      	ldrh	r3, [r4, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	8023      	strh	r3, [r4, #0]
 80011f0:	e02d      	b.n	800124e <PCD_EP_ISR_Handler+0x27e>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	2b3e      	cmp	r3, #62	; 0x3e
 80011f8:	d812      	bhi.n	8001220 <PCD_EP_ISR_Handler+0x250>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	085b      	lsrs	r3, r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <PCD_EP_ISR_Handler+0x244>
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	3301      	adds	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	b29b      	uxth	r3, r3
 8001218:	029b      	lsls	r3, r3, #10
 800121a:	b29b      	uxth	r3, r3
 800121c:	8023      	strh	r3, [r4, #0]
 800121e:	e016      	b.n	800124e <PCD_EP_ISR_Handler+0x27e>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	095b      	lsrs	r3, r3, #5
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <PCD_EP_ISR_Handler+0x26a>
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	3b01      	subs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	b29b      	uxth	r3, r3
 800123e:	029b      	lsls	r3, r3, #10
 8001240:	b29b      	uxth	r3, r3
 8001242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800124a:	b29b      	uxth	r3, r3
 800124c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800125a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800125e:	b29c      	uxth	r4, r3
 8001260:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001264:	b29c      	uxth	r4, r3
 8001266:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800126a:	b29c      	uxth	r4, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4ba2      	ldr	r3, [pc, #648]	; (80014fc <PCD_EP_ISR_Handler+0x52c>)
 8001272:	4323      	orrs	r3, r4
 8001274:	b29b      	uxth	r3, r3
 8001276:	8013      	strh	r3, [r2, #0]
 8001278:	e132      	b.n	80014e0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	7d7b      	ldrb	r3, [r7, #21]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800128a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f280 80d1 	bge.w	8001436 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	7d7b      	ldrb	r3, [r7, #21]
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012a8:	4013      	ands	r3, r2
 80012aa:	b29c      	uxth	r4, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	7d7b      	ldrb	r3, [r7, #21]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80012bc:	b292      	uxth	r2, r2
 80012be:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80012c0:	7d7b      	ldrb	r3, [r7, #21]
 80012c2:	015b      	lsls	r3, r3, #5
 80012c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	7b1b      	ldrb	r3, [r3, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d121      	bne.n	800131a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012de:	b29b      	uxth	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4413      	add	r3, r2
 80012ea:	3306      	adds	r3, #6
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012fe:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001300:	8bfb      	ldrh	r3, [r7, #30]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d072      	beq.n	80013ec <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6959      	ldr	r1, [r3, #20]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	88da      	ldrh	r2, [r3, #6]
 8001312:	8bfb      	ldrh	r3, [r7, #30]
 8001314:	f001 fedd 	bl	80030d2 <USB_ReadPMA>
 8001318:	e068      	b.n	80013ec <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d021      	beq.n	8001378 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800133c:	b29b      	uxth	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4413      	add	r3, r2
 8001348:	3302      	adds	r3, #2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	4413      	add	r3, r2
 8001352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800135c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800135e:	8bfb      	ldrh	r3, [r7, #30]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d02a      	beq.n	80013ba <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6959      	ldr	r1, [r3, #20]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	891a      	ldrh	r2, [r3, #8]
 8001370:	8bfb      	ldrh	r3, [r7, #30]
 8001372:	f001 feae 	bl	80030d2 <USB_ReadPMA>
 8001376:	e020      	b.n	80013ba <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001380:	b29b      	uxth	r3, r3
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	3306      	adds	r3, #6
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	4413      	add	r3, r2
 8001396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013a0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80013a2:	8bfb      	ldrh	r3, [r7, #30]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6959      	ldr	r1, [r3, #20]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	895a      	ldrh	r2, [r3, #10]
 80013b4:	8bfb      	ldrh	r3, [r7, #30]
 80013b6:	f001 fe8c 	bl	80030d2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013d4:	b29c      	uxth	r4, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	441a      	add	r2, r3
 80013e4:	4b46      	ldr	r3, [pc, #280]	; (8001500 <PCD_EP_ISR_Handler+0x530>)
 80013e6:	4323      	orrs	r3, r4
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	69da      	ldr	r2, [r3, #28]
 80013f0:	8bfb      	ldrh	r3, [r7, #30]
 80013f2:	441a      	add	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	695a      	ldr	r2, [r3, #20]
 80013fc:	8bfb      	ldrh	r3, [r7, #30]
 80013fe:	441a      	add	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <PCD_EP_ISR_Handler+0x446>
 800140c:	8bfa      	ldrh	r2, [r7, #30]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	429a      	cmp	r2, r3
 8001414:	d206      	bcs.n	8001424 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f003 fc33 	bl	8004c88 <HAL_PCD_DataOutStageCallback>
 8001422:	e008      	b.n	8001436 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	7819      	ldrb	r1, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fc9e 	bl	8000d72 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001436:	8a7b      	ldrh	r3, [r7, #18]
 8001438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143c:	2b00      	cmp	r3, #0
 800143e:	d04f      	beq.n	80014e0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001440:	7d7b      	ldrb	r3, [r7, #21]
 8001442:	015b      	lsls	r3, r3, #5
 8001444:	3328      	adds	r3, #40	; 0x28
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	7d7b      	ldrb	r3, [r7, #21]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001464:	b29c      	uxth	r4, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	441a      	add	r2, r3
 8001472:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800147a:	b29b      	uxth	r3, r3
 800147c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001486:	b29b      	uxth	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	3302      	adds	r3, #2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	4413      	add	r3, r2
 800149c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	441a      	add	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d106      	bne.n	80014ce <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f003 fbf6 	bl	8004cb8 <HAL_PCD_DataInStageCallback>
 80014cc:	e008      	b.n	80014e0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	7819      	ldrb	r1, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fc97 	bl	8000e0e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f6ff ad74 	blt.w	8000fda <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3724      	adds	r7, #36	; 0x24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd90      	pop	{r4, r7, pc}
 80014fc:	ffff8080 	.word	0xffff8080
 8001500:	ffff80c0 	.word	0xffff80c0

08001504 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	817b      	strh	r3, [r7, #10]
 8001512:	4613      	mov	r3, r2
 8001514:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151c:	b29b      	uxth	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001522:	897b      	ldrh	r3, [r7, #10]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	015b      	lsls	r3, r3, #5
 800152a:	3328      	adds	r3, #40	; 0x28
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e006      	b.n	8001542 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001534:	897b      	ldrh	r3, [r7, #10]
 8001536:	015b      	lsls	r3, r3, #5
 8001538:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001542:	893b      	ldrh	r3, [r7, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d107      	bne.n	8001558 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2200      	movs	r2, #0
 800154c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	b29a      	uxth	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	80da      	strh	r2, [r3, #6]
 8001556:	e00b      	b.n	8001570 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2201      	movs	r2, #1
 800155c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	b29a      	uxth	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	b29a      	uxth	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e26c      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8087 	beq.w	80016aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800159c:	4b92      	ldr	r3, [pc, #584]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d00c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a8:	4b8f      	ldr	r3, [pc, #572]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d112      	bne.n	80015da <HAL_RCC_OscConfig+0x5e>
 80015b4:	4b8c      	ldr	r3, [pc, #560]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c0:	d10b      	bne.n	80015da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c2:	4b89      	ldr	r3, [pc, #548]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d06c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x12c>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d168      	bne.n	80016a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e246      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x76>
 80015e4:	4b80      	ldr	r3, [pc, #512]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a7f      	ldr	r2, [pc, #508]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e02e      	b.n	8001650 <HAL_RCC_OscConfig+0xd4>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x98>
 80015fa:	4b7b      	ldr	r3, [pc, #492]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a7a      	ldr	r2, [pc, #488]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b78      	ldr	r3, [pc, #480]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a77      	ldr	r2, [pc, #476]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e01d      	b.n	8001650 <HAL_RCC_OscConfig+0xd4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0xbc>
 800161e:	4b72      	ldr	r3, [pc, #456]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a71      	ldr	r2, [pc, #452]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0xd4>
 8001638:	4b6b      	ldr	r3, [pc, #428]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6a      	ldr	r2, [pc, #424]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b68      	ldr	r3, [pc, #416]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a67      	ldr	r2, [pc, #412]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7fe ff98 	bl	800058c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7fe ff94 	bl	800058c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1fa      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0xe4>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7fe ff84 	bl	800058c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7fe ff80 	bl	800058c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1e6      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	4b53      	ldr	r3, [pc, #332]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x10c>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d063      	beq.n	800177e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b6:	4b4c      	ldr	r3, [pc, #304]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016c2:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d11c      	bne.n	8001708 <HAL_RCC_OscConfig+0x18c>
 80016ce:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d116      	bne.n	8001708 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x176>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e1ba      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4939      	ldr	r1, [pc, #228]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	e03a      	b.n	800177e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7fe ff39 	bl	800058c <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171e:	f7fe ff35 	bl	800058c <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e19b      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4927      	ldr	r1, [pc, #156]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
 8001750:	e015      	b.n	800177e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7fe ff18 	bl	800058c <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001760:	f7fe ff14 	bl	800058c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e17a      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03a      	beq.n	8001800 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d019      	beq.n	80017c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_RCC_OscConfig+0x274>)
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7fe fef8 	bl	800058c <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7fe fef4 	bl	800058c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e15a      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017be:	2001      	movs	r0, #1
 80017c0:	f000 faa8 	bl	8001d14 <RCC_Delay>
 80017c4:	e01c      	b.n	8001800 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_RCC_OscConfig+0x274>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7fe fede 	bl	800058c <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d2:	e00f      	b.n	80017f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7fe feda 	bl	800058c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d908      	bls.n	80017f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e140      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	42420000 	.word	0x42420000
 80017f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b9e      	ldr	r3, [pc, #632]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e9      	bne.n	80017d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a6 	beq.w	800195a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b97      	ldr	r3, [pc, #604]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b94      	ldr	r3, [pc, #592]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a93      	ldr	r2, [pc, #588]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b91      	ldr	r3, [pc, #580]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d118      	bne.n	8001878 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001846:	4b8b      	ldr	r3, [pc, #556]	; (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a8a      	ldr	r2, [pc, #552]	; (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001852:	f7fe fe9b 	bl	800058c <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185a:	f7fe fe97 	bl	800058c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b64      	cmp	r3, #100	; 0x64
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0fd      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	4b81      	ldr	r3, [pc, #516]	; (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x312>
 8001880:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a7a      	ldr	r2, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	e02d      	b.n	80018ea <HAL_RCC_OscConfig+0x36e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x334>
 8001896:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a75      	ldr	r2, [pc, #468]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a72      	ldr	r2, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6213      	str	r3, [r2, #32]
 80018ae:	e01c      	b.n	80018ea <HAL_RCC_OscConfig+0x36e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x356>
 80018b8:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4a6c      	ldr	r2, [pc, #432]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6213      	str	r3, [r2, #32]
 80018c4:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a69      	ldr	r2, [pc, #420]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	e00b      	b.n	80018ea <HAL_RCC_OscConfig+0x36e>
 80018d2:	4b67      	ldr	r3, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a66      	ldr	r2, [pc, #408]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	6213      	str	r3, [r2, #32]
 80018de:	4b64      	ldr	r3, [pc, #400]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a63      	ldr	r2, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d015      	beq.n	800191e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7fe fe4b 	bl	800058c <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7fe fe47 	bl	800058c <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0ab      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0ee      	beq.n	80018fa <HAL_RCC_OscConfig+0x37e>
 800191c:	e014      	b.n	8001948 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7fe fe35 	bl	800058c <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7fe fe31 	bl	800058c <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	; 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e095      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ee      	bne.n	8001926 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d105      	bne.n	800195a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194e:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a47      	ldr	r2, [pc, #284]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8081 	beq.w	8001a66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001964:	4b42      	ldr	r3, [pc, #264]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d061      	beq.n	8001a34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d146      	bne.n	8001a06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0x4fc>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7fe fe05 	bl	800058c <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001986:	f7fe fe01 	bl	800058c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e067      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ac:	d108      	bne.n	80019c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	492d      	ldr	r1, [pc, #180]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a19      	ldr	r1, [r3, #32]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	430b      	orrs	r3, r1
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x4fc>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7fe fdd5 	bl	800058c <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7fe fdd1 	bl	800058c <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e037      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x46a>
 8001a04:	e02f      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_RCC_OscConfig+0x4fc>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7fe fdbe 	bl	800058c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7fe fdba 	bl	800058c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e020      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x498>
 8001a32:	e018      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e013      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40007000 	.word	0x40007000
 8001a78:	42420060 	.word	0x42420060

08001a7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0d0      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d910      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b67      	ldr	r3, [pc, #412]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 0207 	bic.w	r2, r3, #7
 8001aa6:	4965      	ldr	r1, [pc, #404]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0b8      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ae2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001afa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	494d      	ldr	r1, [pc, #308]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d040      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d115      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e07f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e073      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e06b      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f023 0203 	bic.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4936      	ldr	r1, [pc, #216]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b6c:	f7fe fd0e 	bl	800058c <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7fe fd0a 	bl	800058c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e053      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 020c 	and.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1eb      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d210      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 0207 	bic.w	r2, r3, #7
 8001bb2:	4922      	ldr	r1, [pc, #136]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e032      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4916      	ldr	r1, [pc, #88]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	490e      	ldr	r1, [pc, #56]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c0a:	f000 f821 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8001c0e:	4601      	mov	r1, r0
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1cc>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1d0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc6c 	bl	8000508 <HAL_InitTick>

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08005334 	.word	0x08005334
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	20000008 	.word	0x20000008

08001c50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c50:	b490      	push	{r4, r7}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c58:	1d3c      	adds	r4, r7, #4
 8001c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c60:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d002      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x40>
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x46>
 8001c8e:	e02d      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c92:	623b      	str	r3, [r7, #32]
      break;
 8001c94:	e02d      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	0c9b      	lsrs	r3, r3, #18
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ca8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	0c5b      	lsrs	r3, r3, #17
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cce:	fb02 f203 	mul.w	r2, r2, r3
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cda:	e004      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	623b      	str	r3, [r7, #32]
      break;
 8001cea:	e002      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cee:	623b      	str	r3, [r7, #32]
      break;
 8001cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc90      	pop	{r4, r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	080052d8 	.word	0x080052d8
 8001d04:	080052e8 	.word	0x080052e8
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	007a1200 	.word	0x007a1200
 8001d10:	003d0900 	.word	0x003d0900

08001d14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <RCC_Delay+0x34>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <RCC_Delay+0x38>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0a5b      	lsrs	r3, r3, #9
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d30:	bf00      	nop
  }
  while (Delay --);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	60fa      	str	r2, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f9      	bne.n	8001d30 <RCC_Delay+0x1c>
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000004 	.word	0x20000004
 8001d4c:	10624dd3 	.word	0x10624dd3

08001d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d07d      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10d      	bne.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	4a4b      	ldr	r2, [pc, #300]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d86:	61d3      	str	r3, [r2, #28]
 8001d88:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d94:	2301      	movs	r3, #1
 8001d96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d118      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a42      	ldr	r2, [pc, #264]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db0:	f7fe fbec 	bl	800058c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	e008      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db8:	f7fe fbe8 	bl	800058c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e06d      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d02e      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d027      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e04:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e0a:	4a29      	ldr	r2, [pc, #164]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d014      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe fbb7 	bl	800058c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe fbb3 	bl	800058c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e036      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ee      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4917      	ldr	r1, [pc, #92]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	490b      	ldr	r1, [pc, #44]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	4904      	ldr	r1, [pc, #16]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	42420440 	.word	0x42420440

08001ebc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	f107 0014 	add.w	r0, r7, #20
 8001eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	b004      	add	sp, #16
 8001eda:	4770      	bx	lr

08001edc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8001ee4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8001ee8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	89fb      	ldrh	r3, [r7, #14]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8001f12:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8001f16:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	f107 0014 	add.w	r0, r7, #20
 8001f68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ffa5 	bl	8001edc <USB_EnableGlobalInt>

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f9e:	b004      	add	sp, #16
 8001fa0:	4770      	bx	lr
	...

08001fa4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001fa4:	b490      	push	{r4, r7}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	78db      	ldrb	r3, [r3, #3]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d819      	bhi.n	8002006 <USB_ActivateEndpoint+0x62>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <USB_ActivateEndpoint+0x34>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08001ffd 	.word	0x08001ffd
 8001fe0:	0800200d 	.word	0x0800200d
 8001fe4:	08001ff3 	.word	0x08001ff3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8001fe8:	89bb      	ldrh	r3, [r7, #12]
 8001fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fee:	81bb      	strh	r3, [r7, #12]
      break;
 8001ff0:	e00d      	b.n	800200e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8001ff2:	89bb      	ldrh	r3, [r7, #12]
 8001ff4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001ff8:	81bb      	strh	r3, [r7, #12]
      break;
 8001ffa:	e008      	b.n	800200e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8001ffc:	89bb      	ldrh	r3, [r7, #12]
 8001ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002002:	81bb      	strh	r3, [r7, #12]
      break;
 8002004:	e003      	b.n	800200e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
      break;
 800200a:	e000      	b.n	800200e <USB_ActivateEndpoint+0x6a>
      break;
 800200c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	441a      	add	r2, r3
 8002018:	89bb      	ldrh	r3, [r7, #12]
 800201a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800201e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202a:	b29b      	uxth	r3, r3
 800202c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002044:	b29a      	uxth	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4313      	orrs	r3, r2
 800204e:	b29c      	uxth	r4, r3
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	441a      	add	r2, r3
 800205a:	4b8a      	ldr	r3, [pc, #552]	; (8002284 <USB_ActivateEndpoint+0x2e0>)
 800205c:	4323      	orrs	r3, r4
 800205e:	b29b      	uxth	r3, r3
 8002060:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	7b1b      	ldrb	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 8112 	bne.w	8002290 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d067      	beq.n	8002144 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002074:	687c      	ldr	r4, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800207c:	b29b      	uxth	r3, r3
 800207e:	441c      	add	r4, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	4423      	add	r3, r4
 8002088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800208c:	461c      	mov	r4, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	88db      	ldrh	r3, [r3, #6]
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	b29b      	uxth	r3, r3
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	b29b      	uxth	r3, r3
 800209a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b29c      	uxth	r4, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d014      	beq.n	80020de <USB_ActivateEndpoint+0x13a>
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ca:	b29c      	uxth	r4, r3
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	441a      	add	r2, r3
 80020d6:	4b6c      	ldr	r3, [pc, #432]	; (8002288 <USB_ActivateEndpoint+0x2e4>)
 80020d8:	4323      	orrs	r3, r4
 80020da:	b29b      	uxth	r3, r3
 80020dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	78db      	ldrb	r3, [r3, #3]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d018      	beq.n	8002118 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020fc:	b29c      	uxth	r4, r3
 80020fe:	f084 0320 	eor.w	r3, r4, #32
 8002102:	b29c      	uxth	r4, r3
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	441a      	add	r2, r3
 800210e:	4b5d      	ldr	r3, [pc, #372]	; (8002284 <USB_ActivateEndpoint+0x2e0>)
 8002110:	4323      	orrs	r3, r4
 8002112:	b29b      	uxth	r3, r3
 8002114:	8013      	strh	r3, [r2, #0]
 8002116:	e22b      	b.n	8002570 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800212a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800212e:	b29c      	uxth	r4, r3
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	441a      	add	r2, r3
 800213a:	4b52      	ldr	r3, [pc, #328]	; (8002284 <USB_ActivateEndpoint+0x2e0>)
 800213c:	4323      	orrs	r3, r4
 800213e:	b29b      	uxth	r3, r3
 8002140:	8013      	strh	r3, [r2, #0]
 8002142:	e215      	b.n	8002570 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002144:	687c      	ldr	r4, [r7, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214c:	b29b      	uxth	r3, r3
 800214e:	441c      	add	r4, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	4423      	add	r3, r4
 8002158:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800215c:	461c      	mov	r4, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	88db      	ldrh	r3, [r3, #6]
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	b29b      	uxth	r3, r3
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	b29b      	uxth	r3, r3
 800216a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800216c:	687c      	ldr	r4, [r7, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002174:	b29b      	uxth	r3, r3
 8002176:	441c      	add	r4, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4423      	add	r3, r4
 8002180:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002184:	461c      	mov	r4, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10e      	bne.n	80021ac <USB_ActivateEndpoint+0x208>
 800218e:	8823      	ldrh	r3, [r4, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002196:	b29b      	uxth	r3, r3
 8002198:	8023      	strh	r3, [r4, #0]
 800219a:	8823      	ldrh	r3, [r4, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	8023      	strh	r3, [r4, #0]
 80021aa:	e02d      	b.n	8002208 <USB_ActivateEndpoint+0x264>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b3e      	cmp	r3, #62	; 0x3e
 80021b2:	d812      	bhi.n	80021da <USB_ActivateEndpoint+0x236>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <USB_ActivateEndpoint+0x22a>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	029b      	lsls	r3, r3, #10
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	8023      	strh	r3, [r4, #0]
 80021d8:	e016      	b.n	8002208 <USB_ActivateEndpoint+0x264>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <USB_ActivateEndpoint+0x250>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	029b      	lsls	r3, r3, #10
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002204:	b29b      	uxth	r3, r3
 8002206:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29c      	uxth	r4, r3
 8002216:	4623      	mov	r3, r4
 8002218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d014      	beq.n	800224a <USB_ActivateEndpoint+0x2a6>
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	b29b      	uxth	r3, r3
 800222e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002236:	b29c      	uxth	r4, r3
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <USB_ActivateEndpoint+0x2e8>)
 8002244:	4323      	orrs	r3, r4
 8002246:	b29b      	uxth	r3, r3
 8002248:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800225c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002260:	b29c      	uxth	r4, r3
 8002262:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002266:	b29c      	uxth	r4, r3
 8002268:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800226c:	b29c      	uxth	r4, r3
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	441a      	add	r2, r3
 8002278:	4b02      	ldr	r3, [pc, #8]	; (8002284 <USB_ActivateEndpoint+0x2e0>)
 800227a:	4323      	orrs	r3, r4
 800227c:	b29b      	uxth	r3, r3
 800227e:	8013      	strh	r3, [r2, #0]
 8002280:	e176      	b.n	8002570 <USB_ActivateEndpoint+0x5cc>
 8002282:	bf00      	nop
 8002284:	ffff8080 	.word	0xffff8080
 8002288:	ffff80c0 	.word	0xffff80c0
 800228c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a6:	b29c      	uxth	r4, r3
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	4b96      	ldr	r3, [pc, #600]	; (800250c <USB_ActivateEndpoint+0x568>)
 80022b4:	4323      	orrs	r3, r4
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80022ba:	687c      	ldr	r4, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	441c      	add	r4, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	4423      	add	r3, r4
 80022ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d2:	461c      	mov	r4, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	891b      	ldrh	r3, [r3, #8]
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	b29b      	uxth	r3, r3
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	b29b      	uxth	r3, r3
 80022e0:	8023      	strh	r3, [r4, #0]
 80022e2:	687c      	ldr	r4, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	441c      	add	r4, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4423      	add	r3, r4
 80022f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80022fa:	461c      	mov	r4, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	895b      	ldrh	r3, [r3, #10]
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	b29b      	uxth	r3, r3
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	b29b      	uxth	r3, r3
 8002308:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	785b      	ldrb	r3, [r3, #1]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 8088 	bne.w	8002424 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29c      	uxth	r4, r3
 8002322:	4623      	mov	r3, r4
 8002324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d014      	beq.n	8002356 <USB_ActivateEndpoint+0x3b2>
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	b29c      	uxth	r4, r3
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	441a      	add	r2, r3
 800234e:	4b70      	ldr	r3, [pc, #448]	; (8002510 <USB_ActivateEndpoint+0x56c>)
 8002350:	4323      	orrs	r3, r4
 8002352:	b29b      	uxth	r3, r3
 8002354:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29c      	uxth	r4, r3
 8002364:	4623      	mov	r3, r4
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d014      	beq.n	8002398 <USB_ActivateEndpoint+0x3f4>
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002384:	b29c      	uxth	r4, r3
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	441a      	add	r2, r3
 8002390:	4b60      	ldr	r3, [pc, #384]	; (8002514 <USB_ActivateEndpoint+0x570>)
 8002392:	4323      	orrs	r3, r4
 8002394:	b29b      	uxth	r3, r3
 8002396:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ae:	b29c      	uxth	r4, r3
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	441a      	add	r2, r3
 80023ba:	4b56      	ldr	r3, [pc, #344]	; (8002514 <USB_ActivateEndpoint+0x570>)
 80023bc:	4323      	orrs	r3, r4
 80023be:	b29b      	uxth	r3, r3
 80023c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d8:	b29c      	uxth	r4, r3
 80023da:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80023de:	b29c      	uxth	r4, r3
 80023e0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80023e4:	b29c      	uxth	r4, r3
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	441a      	add	r2, r3
 80023f0:	4b49      	ldr	r3, [pc, #292]	; (8002518 <USB_ActivateEndpoint+0x574>)
 80023f2:	4323      	orrs	r3, r4
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800240e:	b29c      	uxth	r4, r3
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <USB_ActivateEndpoint+0x574>)
 800241c:	4323      	orrs	r3, r4
 800241e:	b29b      	uxth	r3, r3
 8002420:	8013      	strh	r3, [r2, #0]
 8002422:	e0a5      	b.n	8002570 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29c      	uxth	r4, r3
 8002432:	4623      	mov	r3, r4
 8002434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d014      	beq.n	8002466 <USB_ActivateEndpoint+0x4c2>
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800244e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002452:	b29c      	uxth	r4, r3
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <USB_ActivateEndpoint+0x56c>)
 8002460:	4323      	orrs	r3, r4
 8002462:	b29b      	uxth	r3, r3
 8002464:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29c      	uxth	r4, r3
 8002474:	4623      	mov	r3, r4
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d014      	beq.n	80024a8 <USB_ActivateEndpoint+0x504>
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002494:	b29c      	uxth	r4, r3
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	441a      	add	r2, r3
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <USB_ActivateEndpoint+0x570>)
 80024a2:	4323      	orrs	r3, r4
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	b29c      	uxth	r4, r3
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	441a      	add	r2, r3
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <USB_ActivateEndpoint+0x56c>)
 80024cc:	4323      	orrs	r3, r4
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	78db      	ldrb	r3, [r3, #3]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d020      	beq.n	800251c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f0:	b29c      	uxth	r4, r3
 80024f2:	f084 0320 	eor.w	r3, r4, #32
 80024f6:	b29c      	uxth	r4, r3
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	441a      	add	r2, r3
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <USB_ActivateEndpoint+0x574>)
 8002504:	4323      	orrs	r3, r4
 8002506:	b29b      	uxth	r3, r3
 8002508:	8013      	strh	r3, [r2, #0]
 800250a:	e01c      	b.n	8002546 <USB_ActivateEndpoint+0x5a2>
 800250c:	ffff8180 	.word	0xffff8180
 8002510:	ffffc080 	.word	0xffffc080
 8002514:	ffff80c0 	.word	0xffff80c0
 8002518:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002532:	b29c      	uxth	r4, r3
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	441a      	add	r2, r3
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <USB_ActivateEndpoint+0x5d8>)
 8002540:	4323      	orrs	r3, r4
 8002542:	b29b      	uxth	r3, r3
 8002544:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255c:	b29c      	uxth	r4, r3
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	441a      	add	r2, r3
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <USB_ActivateEndpoint+0x5d8>)
 800256a:	4323      	orrs	r3, r4
 800256c:	b29b      	uxth	r3, r3
 800256e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bc90      	pop	{r4, r7}
 800257a:	4770      	bx	lr
 800257c:	ffff8080 	.word	0xffff8080

08002580 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002580:	b490      	push	{r4, r7}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	7b1b      	ldrb	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d171      	bne.n	8002676 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d036      	beq.n	8002608 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b29c      	uxth	r4, r3
 80025a8:	4623      	mov	r3, r4
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d014      	beq.n	80025dc <USB_DeactivateEndpoint+0x5c>
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c8:	b29c      	uxth	r4, r3
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <USB_DeactivateEndpoint+0x204>)
 80025d6:	4323      	orrs	r3, r4
 80025d8:	b29b      	uxth	r3, r3
 80025da:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f2:	b29c      	uxth	r4, r3
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	441a      	add	r2, r3
 80025fe:	4b62      	ldr	r3, [pc, #392]	; (8002788 <USB_DeactivateEndpoint+0x208>)
 8002600:	4323      	orrs	r3, r4
 8002602:	b29b      	uxth	r3, r3
 8002604:	8013      	strh	r3, [r2, #0]
 8002606:	e144      	b.n	8002892 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b29c      	uxth	r4, r3
 8002616:	4623      	mov	r3, r4
 8002618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d014      	beq.n	800264a <USB_DeactivateEndpoint+0xca>
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	b29c      	uxth	r4, r3
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	4b52      	ldr	r3, [pc, #328]	; (800278c <USB_DeactivateEndpoint+0x20c>)
 8002644:	4323      	orrs	r3, r4
 8002646:	b29b      	uxth	r3, r3
 8002648:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800265c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002660:	b29c      	uxth	r4, r3
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	441a      	add	r2, r3
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <USB_DeactivateEndpoint+0x208>)
 800266e:	4323      	orrs	r3, r4
 8002670:	b29b      	uxth	r3, r3
 8002672:	8013      	strh	r3, [r2, #0]
 8002674:	e10d      	b.n	8002892 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	785b      	ldrb	r3, [r3, #1]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 8088 	bne.w	8002790 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29c      	uxth	r4, r3
 800268e:	4623      	mov	r3, r4
 8002690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d014      	beq.n	80026c2 <USB_DeactivateEndpoint+0x142>
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	b29c      	uxth	r4, r3
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	441a      	add	r2, r3
 80026ba:	4b34      	ldr	r3, [pc, #208]	; (800278c <USB_DeactivateEndpoint+0x20c>)
 80026bc:	4323      	orrs	r3, r4
 80026be:	b29b      	uxth	r3, r3
 80026c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29c      	uxth	r4, r3
 80026d0:	4623      	mov	r3, r4
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d014      	beq.n	8002704 <USB_DeactivateEndpoint+0x184>
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f0:	b29c      	uxth	r4, r3
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	441a      	add	r2, r3
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <USB_DeactivateEndpoint+0x204>)
 80026fe:	4323      	orrs	r3, r4
 8002700:	b29b      	uxth	r3, r3
 8002702:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	b29c      	uxth	r4, r3
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	441a      	add	r2, r3
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <USB_DeactivateEndpoint+0x204>)
 8002728:	4323      	orrs	r3, r4
 800272a:	b29b      	uxth	r3, r3
 800272c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002744:	b29c      	uxth	r4, r3
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	441a      	add	r2, r3
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <USB_DeactivateEndpoint+0x208>)
 8002752:	4323      	orrs	r3, r4
 8002754:	b29b      	uxth	r3, r3
 8002756:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800276a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800276e:	b29c      	uxth	r4, r3
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	4b03      	ldr	r3, [pc, #12]	; (8002788 <USB_DeactivateEndpoint+0x208>)
 800277c:	4323      	orrs	r3, r4
 800277e:	b29b      	uxth	r3, r3
 8002780:	8013      	strh	r3, [r2, #0]
 8002782:	e086      	b.n	8002892 <USB_DeactivateEndpoint+0x312>
 8002784:	ffff80c0 	.word	0xffff80c0
 8002788:	ffff8080 	.word	0xffff8080
 800278c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29c      	uxth	r4, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d014      	beq.n	80027d2 <USB_DeactivateEndpoint+0x252>
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	b29c      	uxth	r4, r3
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	441a      	add	r2, r3
 80027ca:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <USB_DeactivateEndpoint+0x320>)
 80027cc:	4323      	orrs	r3, r4
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29c      	uxth	r4, r3
 80027e0:	4623      	mov	r3, r4
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d014      	beq.n	8002814 <USB_DeactivateEndpoint+0x294>
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002800:	b29c      	uxth	r4, r3
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	441a      	add	r2, r3
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <USB_DeactivateEndpoint+0x324>)
 800280e:	4323      	orrs	r3, r4
 8002810:	b29b      	uxth	r3, r3
 8002812:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282a:	b29c      	uxth	r4, r3
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	441a      	add	r2, r3
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <USB_DeactivateEndpoint+0x320>)
 8002838:	4323      	orrs	r3, r4
 800283a:	b29b      	uxth	r3, r3
 800283c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002854:	b29c      	uxth	r4, r3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	441a      	add	r2, r3
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <USB_DeactivateEndpoint+0x328>)
 8002862:	4323      	orrs	r3, r4
 8002864:	b29b      	uxth	r3, r3
 8002866:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	b29c      	uxth	r4, r3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	441a      	add	r2, r3
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <USB_DeactivateEndpoint+0x328>)
 800288c:	4323      	orrs	r3, r4
 800288e:	b29b      	uxth	r3, r3
 8002890:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bc90      	pop	{r4, r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	ffffc080 	.word	0xffffc080
 80028a4:	ffff80c0 	.word	0xffff80c0
 80028a8:	ffff8080 	.word	0xffff8080

080028ac <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b08d      	sub	sp, #52	; 0x34
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	f040 8160 	bne.w	8002b80 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d909      	bls.n	80028e0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	1ad2      	subs	r2, r2, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	619a      	str	r2, [r3, #24]
 80028de:	e005      	b.n	80028ec <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	7b1b      	ldrb	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d119      	bne.n	8002928 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6959      	ldr	r1, [r3, #20]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	88da      	ldrh	r2, [r3, #6]
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	b29b      	uxth	r3, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fba2 	bl	800304a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002906:	687c      	ldr	r4, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290e:	b29b      	uxth	r3, r3
 8002910:	441c      	add	r4, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	4423      	add	r3, r4
 800291a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800291e:	461c      	mov	r4, r3
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	b29b      	uxth	r3, r3
 8002924:	8023      	strh	r3, [r4, #0]
 8002926:	e10f      	b.n	8002b48 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d065      	beq.n	8002a0a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800293e:	687c      	ldr	r4, [r7, #4]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	785b      	ldrb	r3, [r3, #1]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d148      	bne.n	80029da <USB_EPStartXfer+0x12e>
 8002948:	687c      	ldr	r4, [r7, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002950:	b29b      	uxth	r3, r3
 8002952:	441c      	add	r4, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	4423      	add	r3, r4
 800295c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002960:	461c      	mov	r4, r3
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10e      	bne.n	8002986 <USB_EPStartXfer+0xda>
 8002968:	8823      	ldrh	r3, [r4, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002970:	b29b      	uxth	r3, r3
 8002972:	8023      	strh	r3, [r4, #0]
 8002974:	8823      	ldrh	r3, [r4, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002980:	b29b      	uxth	r3, r3
 8002982:	8023      	strh	r3, [r4, #0]
 8002984:	e03d      	b.n	8002a02 <USB_EPStartXfer+0x156>
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	2b3e      	cmp	r3, #62	; 0x3e
 800298a:	d810      	bhi.n	80029ae <USB_EPStartXfer+0x102>
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <USB_EPStartXfer+0xf6>
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	3301      	adds	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	8023      	strh	r3, [r4, #0]
 80029ac:	e029      	b.n	8002a02 <USB_EPStartXfer+0x156>
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
 80029b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <USB_EPStartXfer+0x118>
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	3b01      	subs	r3, #1
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	8023      	strh	r3, [r4, #0]
 80029d8:	e013      	b.n	8002a02 <USB_EPStartXfer+0x156>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	785b      	ldrb	r3, [r3, #1]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10f      	bne.n	8002a02 <USB_EPStartXfer+0x156>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	441c      	add	r4, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	4423      	add	r3, r4
 80029f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	895b      	ldrh	r3, [r3, #10]
 8002a06:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002a08:	e063      	b.n	8002ad2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d148      	bne.n	8002aa4 <USB_EPStartXfer+0x1f8>
 8002a12:	687c      	ldr	r4, [r7, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	441c      	add	r4, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	4423      	add	r3, r4
 8002a26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a2a:	461c      	mov	r4, r3
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10e      	bne.n	8002a50 <USB_EPStartXfer+0x1a4>
 8002a32:	8823      	ldrh	r3, [r4, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	8023      	strh	r3, [r4, #0]
 8002a3e:	8823      	ldrh	r3, [r4, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	8023      	strh	r3, [r4, #0]
 8002a4e:	e03d      	b.n	8002acc <USB_EPStartXfer+0x220>
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	2b3e      	cmp	r3, #62	; 0x3e
 8002a54:	d810      	bhi.n	8002a78 <USB_EPStartXfer+0x1cc>
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <USB_EPStartXfer+0x1c0>
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	623b      	str	r3, [r7, #32]
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	029b      	lsls	r3, r3, #10
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	8023      	strh	r3, [r4, #0]
 8002a76:	e029      	b.n	8002acc <USB_EPStartXfer+0x220>
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	623b      	str	r3, [r7, #32]
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <USB_EPStartXfer+0x1e2>
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	623b      	str	r3, [r7, #32]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	029b      	lsls	r3, r3, #10
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8023      	strh	r3, [r4, #0]
 8002aa2:	e013      	b.n	8002acc <USB_EPStartXfer+0x220>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d10f      	bne.n	8002acc <USB_EPStartXfer+0x220>
 8002aac:	687c      	ldr	r4, [r7, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	441c      	add	r4, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	4423      	add	r3, r4
 8002ac0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ac4:	461c      	mov	r4, r3
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	891b      	ldrh	r3, [r3, #8]
 8002ad0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6959      	ldr	r1, [r3, #20]
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fab4 	bl	800304a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d115      	bne.n	8002b16 <USB_EPStartXfer+0x26a>
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b00:	b29c      	uxth	r4, r3
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	4b9a      	ldr	r3, [pc, #616]	; (8002d78 <USB_EPStartXfer+0x4cc>)
 8002b0e:	4323      	orrs	r3, r4
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	8013      	strh	r3, [r2, #0]
 8002b14:	e018      	b.n	8002b48 <USB_EPStartXfer+0x29c>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d114      	bne.n	8002b48 <USB_EPStartXfer+0x29c>
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b34:	b29c      	uxth	r4, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	4b8e      	ldr	r3, [pc, #568]	; (8002d7c <USB_EPStartXfer+0x4d0>)
 8002b42:	4323      	orrs	r3, r4
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b5e:	b29c      	uxth	r4, r3
 8002b60:	f084 0310 	eor.w	r3, r4, #16
 8002b64:	b29c      	uxth	r4, r3
 8002b66:	f084 0320 	eor.w	r3, r4, #32
 8002b6a:	b29c      	uxth	r4, r3
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	4b82      	ldr	r3, [pc, #520]	; (8002d80 <USB_EPStartXfer+0x4d4>)
 8002b78:	4323      	orrs	r3, r4
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	8013      	strh	r3, [r2, #0]
 8002b7e:	e146      	b.n	8002e0e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d909      	bls.n	8002ba0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	1ad2      	subs	r2, r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	619a      	str	r2, [r3, #24]
 8002b9e:	e005      	b.n	8002bac <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	7b1b      	ldrb	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d148      	bne.n	8002c46 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002bb4:	687c      	ldr	r4, [r7, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	441c      	add	r4, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	4423      	add	r3, r4
 8002bc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bcc:	461c      	mov	r4, r3
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10e      	bne.n	8002bf2 <USB_EPStartXfer+0x346>
 8002bd4:	8823      	ldrh	r3, [r4, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	8023      	strh	r3, [r4, #0]
 8002be0:	8823      	ldrh	r3, [r4, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	8023      	strh	r3, [r4, #0]
 8002bf0:	e0f2      	b.n	8002dd8 <USB_EPStartXfer+0x52c>
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8002bf6:	d810      	bhi.n	8002c1a <USB_EPStartXfer+0x36e>
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <USB_EPStartXfer+0x362>
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	029b      	lsls	r3, r3, #10
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	8023      	strh	r3, [r4, #0]
 8002c18:	e0de      	b.n	8002dd8 <USB_EPStartXfer+0x52c>
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <USB_EPStartXfer+0x384>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	8023      	strh	r3, [r4, #0]
 8002c44:	e0c8      	b.n	8002dd8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	785b      	ldrb	r3, [r3, #1]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d148      	bne.n	8002ce0 <USB_EPStartXfer+0x434>
 8002c4e:	687c      	ldr	r4, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	441c      	add	r4, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	4423      	add	r3, r4
 8002c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c66:	461c      	mov	r4, r3
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10e      	bne.n	8002c8c <USB_EPStartXfer+0x3e0>
 8002c6e:	8823      	ldrh	r3, [r4, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	8023      	strh	r3, [r4, #0]
 8002c7a:	8823      	ldrh	r3, [r4, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	8023      	strh	r3, [r4, #0]
 8002c8a:	e03d      	b.n	8002d08 <USB_EPStartXfer+0x45c>
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c90:	d810      	bhi.n	8002cb4 <USB_EPStartXfer+0x408>
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <USB_EPStartXfer+0x3fc>
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	029b      	lsls	r3, r3, #10
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	8023      	strh	r3, [r4, #0]
 8002cb2:	e029      	b.n	8002d08 <USB_EPStartXfer+0x45c>
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <USB_EPStartXfer+0x41e>
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	029b      	lsls	r3, r3, #10
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	8023      	strh	r3, [r4, #0]
 8002cde:	e013      	b.n	8002d08 <USB_EPStartXfer+0x45c>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d10f      	bne.n	8002d08 <USB_EPStartXfer+0x45c>
 8002ce8:	687c      	ldr	r4, [r7, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	441c      	add	r4, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	4423      	add	r3, r4
 8002cfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d00:	461c      	mov	r4, r3
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	8023      	strh	r3, [r4, #0]
 8002d08:	687c      	ldr	r4, [r7, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	785b      	ldrb	r3, [r3, #1]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d14e      	bne.n	8002db0 <USB_EPStartXfer+0x504>
 8002d12:	687c      	ldr	r4, [r7, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	441c      	add	r4, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	4423      	add	r3, r4
 8002d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d2a:	461c      	mov	r4, r3
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10e      	bne.n	8002d50 <USB_EPStartXfer+0x4a4>
 8002d32:	8823      	ldrh	r3, [r4, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	8023      	strh	r3, [r4, #0]
 8002d3e:	8823      	ldrh	r3, [r4, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	8023      	strh	r3, [r4, #0]
 8002d4e:	e043      	b.n	8002dd8 <USB_EPStartXfer+0x52c>
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	2b3e      	cmp	r3, #62	; 0x3e
 8002d54:	d816      	bhi.n	8002d84 <USB_EPStartXfer+0x4d8>
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <USB_EPStartXfer+0x4c0>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	029b      	lsls	r3, r3, #10
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	8023      	strh	r3, [r4, #0]
 8002d76:	e02f      	b.n	8002dd8 <USB_EPStartXfer+0x52c>
 8002d78:	ffff80c0 	.word	0xffff80c0
 8002d7c:	ffffc080 	.word	0xffffc080
 8002d80:	ffff8080 	.word	0xffff8080
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d102      	bne.n	8002d9a <USB_EPStartXfer+0x4ee>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	029b      	lsls	r3, r3, #10
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	8023      	strh	r3, [r4, #0]
 8002dae:	e013      	b.n	8002dd8 <USB_EPStartXfer+0x52c>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10f      	bne.n	8002dd8 <USB_EPStartXfer+0x52c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	441c      	add	r4, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	4423      	add	r3, r4
 8002dca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dee:	b29c      	uxth	r4, r3
 8002df0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002df4:	b29c      	uxth	r4, r3
 8002df6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002dfa:	b29c      	uxth	r4, r3
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <USB_EPStartXfer+0x56c>)
 8002e08:	4323      	orrs	r3, r4
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3734      	adds	r7, #52	; 0x34
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	ffff8080 	.word	0xffff8080

08002e1c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e1c:	b490      	push	{r4, r7}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	785b      	ldrb	r3, [r3, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d018      	beq.n	8002e60 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e44:	b29c      	uxth	r4, r3
 8002e46:	f084 0310 	eor.w	r3, r4, #16
 8002e4a:	b29c      	uxth	r4, r3
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <USB_EPSetStall+0x80>)
 8002e58:	4323      	orrs	r3, r4
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	8013      	strh	r3, [r2, #0]
 8002e5e:	e017      	b.n	8002e90 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	b29c      	uxth	r4, r3
 8002e78:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002e7c:	b29c      	uxth	r4, r3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	441a      	add	r2, r3
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <USB_EPSetStall+0x80>)
 8002e8a:	4323      	orrs	r3, r4
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc90      	pop	{r4, r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	ffff8080 	.word	0xffff8080

08002ea0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ea0:	b490      	push	{r4, r7}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	7b1b      	ldrb	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d17d      	bne.n	8002fae <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	785b      	ldrb	r3, [r3, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d03d      	beq.n	8002f36 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29c      	uxth	r4, r3
 8002ec8:	4623      	mov	r3, r4
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d014      	beq.n	8002efc <USB_EPClearStall+0x5c>
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee8:	b29c      	uxth	r4, r3
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	441a      	add	r2, r3
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <USB_EPClearStall+0x11c>)
 8002ef6:	4323      	orrs	r3, r4
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	78db      	ldrb	r3, [r3, #3]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d054      	beq.n	8002fae <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1a:	b29c      	uxth	r4, r3
 8002f1c:	f084 0320 	eor.w	r3, r4, #32
 8002f20:	b29c      	uxth	r4, r3
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	441a      	add	r2, r3
 8002f2c:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <USB_EPClearStall+0x120>)
 8002f2e:	4323      	orrs	r3, r4
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	8013      	strh	r3, [r2, #0]
 8002f34:	e03b      	b.n	8002fae <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29c      	uxth	r4, r3
 8002f44:	4623      	mov	r3, r4
 8002f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d014      	beq.n	8002f78 <USB_EPClearStall+0xd8>
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f64:	b29c      	uxth	r4, r3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	441a      	add	r2, r3
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <USB_EPClearStall+0x124>)
 8002f72:	4323      	orrs	r3, r4
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	b29c      	uxth	r4, r3
 8002f90:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002f94:	b29c      	uxth	r4, r3
 8002f96:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002f9a:	b29c      	uxth	r4, r3
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <USB_EPClearStall+0x120>)
 8002fa8:	4323      	orrs	r3, r4
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc90      	pop	{r4, r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	ffff80c0 	.word	0xffff80c0
 8002fc0:	ffff8080 	.word	0xffff8080
 8002fc4:	ffffc080 	.word	0xffffc080

08002fc8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003024:	b29b      	uxth	r3, r3
 8003026:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003028:	68fb      	ldr	r3, [r7, #12]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800304a:	b480      	push	{r7}
 800304c:	b08d      	sub	sp, #52	; 0x34
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	4611      	mov	r1, r2
 8003056:	461a      	mov	r2, r3
 8003058:	460b      	mov	r3, r1
 800305a:	80fb      	strh	r3, [r7, #6]
 800305c:	4613      	mov	r3, r2
 800305e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003060:	88bb      	ldrh	r3, [r7, #4]
 8003062:	3301      	adds	r3, #1
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	005a      	lsls	r2, r3, #1
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003082:	e01e      	b.n	80030c2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	3301      	adds	r3, #1
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	3302      	adds	r3, #2
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	3302      	adds	r3, #2
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	3301      	adds	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	3b01      	subs	r3, #1
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1dd      	bne.n	8003084 <USB_WritePMA+0x3a>
  }
}
 80030c8:	bf00      	nop
 80030ca:	3734      	adds	r7, #52	; 0x34
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b08b      	sub	sp, #44	; 0x2c
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	4611      	mov	r1, r2
 80030de:	461a      	mov	r2, r3
 80030e0:	460b      	mov	r3, r1
 80030e2:	80fb      	strh	r3, [r7, #6]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80030e8:	88bb      	ldrh	r3, [r7, #4]
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	005a      	lsls	r2, r3, #1
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003104:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	e01b      	b.n	8003144 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	3302      	adds	r3, #2
 8003118:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3301      	adds	r3, #1
 8003126:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	b2da      	uxtb	r2, r3
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3301      	adds	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	3302      	adds	r3, #2
 800313c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	3b01      	subs	r3, #1
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e0      	bne.n	800310c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800314a:	88bb      	ldrh	r3, [r7, #4]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	701a      	strb	r2, [r3, #0]
  }
}
 8003166:	bf00      	nop
 8003168:	372c      	adds	r7, #44	; 0x2c
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7c1b      	ldrb	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d115      	bne.n	80031b4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800318c:	2202      	movs	r2, #2
 800318e:	2181      	movs	r1, #129	; 0x81
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f001 fe72 	bl	8004e7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800319c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a0:	2202      	movs	r2, #2
 80031a2:	2101      	movs	r1, #1
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f001 fe68 	bl	8004e7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80031b2:	e012      	b.n	80031da <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80031b4:	2340      	movs	r3, #64	; 0x40
 80031b6:	2202      	movs	r2, #2
 80031b8:	2181      	movs	r1, #129	; 0x81
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f001 fe5d 	bl	8004e7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80031c6:	2340      	movs	r3, #64	; 0x40
 80031c8:	2202      	movs	r2, #2
 80031ca:	2101      	movs	r1, #1
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f001 fe54 	bl	8004e7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80031da:	2308      	movs	r3, #8
 80031dc:	2203      	movs	r2, #3
 80031de:	2182      	movs	r1, #130	; 0x82
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f001 fe4a 	bl	8004e7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80031ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80031f0:	f001 ff64 	bl	80050bc <USBD_static_malloc>
 80031f4:	4602      	mov	r2, r0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	e026      	b.n	800325a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003212:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2200      	movs	r2, #0
 8003222:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2200      	movs	r2, #0
 800322a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7c1b      	ldrb	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800323c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003240:	2101      	movs	r1, #1
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f001 ff03 	bl	800504e <USBD_LL_PrepareReceive>
 8003248:	e007      	b.n	800325a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003250:	2340      	movs	r3, #64	; 0x40
 8003252:	2101      	movs	r1, #1
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f001 fefa 	bl	800504e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003274:	2181      	movs	r1, #129	; 0x81
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f001 fe25 	bl	8004ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003282:	2101      	movs	r1, #1
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f001 fe1e 	bl	8004ec6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003292:	2182      	movs	r1, #130	; 0x82
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f001 fe16 	bl	8004ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00e      	beq.n	80032c8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 ff0a 	bl	80050d4 <USBD_static_free>
    pdev->pClassData = NULL;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80032e2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d039      	beq.n	8003370 <USBD_CDC_Setup+0x9e>
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d17c      	bne.n	80033fa <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	88db      	ldrh	r3, [r3, #6]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d029      	beq.n	800335c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b25b      	sxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	da11      	bge.n	8003336 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800331e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	88d2      	ldrh	r2, [r2, #6]
 8003324:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003326:	6939      	ldr	r1, [r7, #16]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	88db      	ldrh	r3, [r3, #6]
 800332c:	461a      	mov	r2, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f001 f9f6 	bl	8004720 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003334:	e068      	b.n	8003408 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	785a      	ldrb	r2, [r3, #1]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	88db      	ldrh	r3, [r3, #6]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800334c:	6939      	ldr	r1, [r7, #16]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	88db      	ldrh	r3, [r3, #6]
 8003352:	461a      	mov	r2, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f001 fa11 	bl	800477c <USBD_CtlPrepareRx>
      break;
 800335a:	e055      	b.n	8003408 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	7850      	ldrb	r0, [r2, #1]
 8003368:	2200      	movs	r2, #0
 800336a:	6839      	ldr	r1, [r7, #0]
 800336c:	4798      	blx	r3
      break;
 800336e:	e04b      	b.n	8003408 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	2b0a      	cmp	r3, #10
 8003376:	d017      	beq.n	80033a8 <USBD_CDC_Setup+0xd6>
 8003378:	2b0b      	cmp	r3, #11
 800337a:	d029      	beq.n	80033d0 <USBD_CDC_Setup+0xfe>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d133      	bne.n	80033e8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003386:	2b03      	cmp	r3, #3
 8003388:	d107      	bne.n	800339a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	2202      	movs	r2, #2
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f001 f9c4 	bl	8004720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003398:	e02e      	b.n	80033f8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800339a:	6839      	ldr	r1, [r7, #0]
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f001 f955 	bl	800464c <USBD_CtlError>
            ret = USBD_FAIL;
 80033a2:	2302      	movs	r3, #2
 80033a4:	75fb      	strb	r3, [r7, #23]
          break;
 80033a6:	e027      	b.n	80033f8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d107      	bne.n	80033c2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80033b2:	f107 030f 	add.w	r3, r7, #15
 80033b6:	2201      	movs	r2, #1
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f001 f9b0 	bl	8004720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80033c0:	e01a      	b.n	80033f8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80033c2:	6839      	ldr	r1, [r7, #0]
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f001 f941 	bl	800464c <USBD_CtlError>
            ret = USBD_FAIL;
 80033ca:	2302      	movs	r3, #2
 80033cc:	75fb      	strb	r3, [r7, #23]
          break;
 80033ce:	e013      	b.n	80033f8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d00d      	beq.n	80033f6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80033da:	6839      	ldr	r1, [r7, #0]
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f001 f935 	bl	800464c <USBD_CtlError>
            ret = USBD_FAIL;
 80033e2:	2302      	movs	r3, #2
 80033e4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80033e6:	e006      	b.n	80033f6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f001 f92e 	bl	800464c <USBD_CtlError>
          ret = USBD_FAIL;
 80033f0:	2302      	movs	r3, #2
 80033f2:	75fb      	strb	r3, [r7, #23]
          break;
 80033f4:	e000      	b.n	80033f8 <USBD_CDC_Setup+0x126>
          break;
 80033f6:	bf00      	nop
      }
      break;
 80033f8:	e006      	b.n	8003408 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f001 f925 	bl	800464c <USBD_CtlError>
      ret = USBD_FAIL;
 8003402:	2302      	movs	r3, #2
 8003404:	75fb      	strb	r3, [r7, #23]
      break;
 8003406:	bf00      	nop
  }

  return ret;
 8003408:	7dfb      	ldrb	r3, [r7, #23]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003424:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800342c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d037      	beq.n	80034a8 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	331c      	adds	r3, #28
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d026      	beq.n	800349c <USBD_CDC_DataIn+0x8a>
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	331c      	adds	r3, #28
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	0152      	lsls	r2, r2, #5
 8003466:	440a      	add	r2, r1
 8003468:	3238      	adds	r2, #56	; 0x38
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003470:	fb02 f201 	mul.w	r2, r2, r1
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d110      	bne.n	800349c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	331c      	adds	r3, #28
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800348e:	78f9      	ldrb	r1, [r7, #3]
 8003490:	2300      	movs	r3, #0
 8003492:	2200      	movs	r2, #0
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f001 fdb7 	bl	8005008 <USBD_LL_Transmit>
 800349a:	e003      	b.n	80034a4 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e000      	b.n	80034aa <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80034a8:	2302      	movs	r3, #2
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f001 fde2 	bl	8005094 <USBD_LL_GetRxDataSize>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00d      	beq.n	80034fe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80034f6:	4611      	mov	r1, r2
 80034f8:	4798      	blx	r3

    return USBD_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80034fe:	2302      	movs	r3, #2
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003516:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800351e:	2b00      	cmp	r3, #0
 8003520:	d015      	beq.n	800354e <USBD_CDC_EP0_RxReady+0x46>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003528:	2bff      	cmp	r3, #255	; 0xff
 800352a:	d010      	beq.n	800354e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800353a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003542:	b292      	uxth	r2, r2
 8003544:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	22ff      	movs	r2, #255	; 0xff
 800354a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2243      	movs	r2, #67	; 0x43
 8003564:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003566:	4b03      	ldr	r3, [pc, #12]	; (8003574 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000098 	.word	0x20000098

08003578 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2243      	movs	r2, #67	; 0x43
 8003584:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8003586:	4b03      	ldr	r3, [pc, #12]	; (8003594 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000054 	.word	0x20000054

08003598 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2243      	movs	r2, #67	; 0x43
 80035a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80035a6:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	200000dc 	.word	0x200000dc

080035b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	220a      	movs	r2, #10
 80035c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80035c6:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000010 	.word	0x20000010

080035d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80035e2:	2302      	movs	r3, #2
 80035e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003618:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003646:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800366a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01c      	beq.n	80036b0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800367c:	2b00      	cmp	r3, #0
 800367e:	d115      	bne.n	80036ac <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2181      	movs	r1, #129	; 0x81
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f001 fcb0 	bl	8005008 <USBD_LL_Transmit>

      return USBD_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e002      	b.n	80036b2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80036b0:	2302      	movs	r3, #2
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d017      	beq.n	8003704 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7c1b      	ldrb	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036e6:	2101      	movs	r1, #1
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f001 fcb0 	bl	800504e <USBD_LL_PrepareReceive>
 80036ee:	e007      	b.n	8003700 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036f6:	2340      	movs	r3, #64	; 0x40
 80036f8:	2101      	movs	r1, #1
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f001 fca7 	bl	800504e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	4613      	mov	r3, r2
 800371a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003722:	2302      	movs	r3, #2
 8003724:	e01a      	b.n	800375c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	79fa      	ldrb	r2, [r7, #7]
 8003752:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f001 fb1b 	bl	8004d90 <USBD_LL_Init>

  return USBD_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d006      	beq.n	8003786 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e001      	b.n	800378a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003786:	2302      	movs	r3, #2
 8003788:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f001 fb50 	bl	8004e44 <USBD_LL_Start>

  return USBD_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	460b      	mov	r3, r1
 80037cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80037ce:	2302      	movs	r3, #2
 80037d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	4611      	mov	r1, r2
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	4611      	mov	r1, r2
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3

  return USBD_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003836:	6839      	ldr	r1, [r7, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fecb 	bl	80045d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800384c:	461a      	mov	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2b01      	cmp	r3, #1
 8003860:	d00c      	beq.n	800387c <USBD_LL_SetupStage+0x56>
 8003862:	2b01      	cmp	r3, #1
 8003864:	d302      	bcc.n	800386c <USBD_LL_SetupStage+0x46>
 8003866:	2b02      	cmp	r3, #2
 8003868:	d010      	beq.n	800388c <USBD_LL_SetupStage+0x66>
 800386a:	e017      	b.n	800389c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f9cb 	bl	8003c10 <USBD_StdDevReq>
      break;
 800387a:	e01a      	b.n	80038b2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fa2d 	bl	8003ce4 <USBD_StdItfReq>
      break;
 800388a:	e012      	b.n	80038b2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003892:	4619      	mov	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fa6b 	bl	8003d70 <USBD_StdEPReq>
      break;
 800389a:	e00a      	b.n	80038b2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	4619      	mov	r1, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f001 fb2a 	bl	8004f04 <USBD_LL_StallEP>
      break;
 80038b0:	bf00      	nop
  }

  return USBD_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	460b      	mov	r3, r1
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80038ca:	7afb      	ldrb	r3, [r7, #11]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d14b      	bne.n	8003968 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80038d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d134      	bne.n	800394c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d919      	bls.n	8003922 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	1ad2      	subs	r2, r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003904:	429a      	cmp	r2, r3
 8003906:	d203      	bcs.n	8003910 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800390c:	b29b      	uxth	r3, r3
 800390e:	e002      	b.n	8003916 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003914:	b29b      	uxth	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 ff4c 	bl	80047b8 <USBD_CtlContinueRx>
 8003920:	e038      	b.n	8003994 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003934:	2b03      	cmp	r3, #3
 8003936:	d105      	bne.n	8003944 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 ff49 	bl	80047dc <USBD_CtlSendStatus>
 800394a:	e023      	b.n	8003994 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003952:	2b05      	cmp	r3, #5
 8003954:	d11e      	bne.n	8003994 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800395e:	2100      	movs	r1, #0
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f001 facf 	bl	8004f04 <USBD_LL_StallEP>
 8003966:	e015      	b.n	8003994 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800397a:	2b03      	cmp	r3, #3
 800397c:	d108      	bne.n	8003990 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	7afa      	ldrb	r2, [r7, #11]
 8003988:	4611      	mov	r1, r2
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	4798      	blx	r3
 800398e:	e001      	b.n	8003994 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003990:	2302      	movs	r3, #2
 8003992:	e000      	b.n	8003996 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	460b      	mov	r3, r1
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80039ac:	7afb      	ldrb	r3, [r7, #11]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d17f      	bne.n	8003ab2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3314      	adds	r3, #20
 80039b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d15c      	bne.n	8003a7c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d915      	bls.n	80039fa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	1ad2      	subs	r2, r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 feb6 	bl	8004758 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80039ec:	2300      	movs	r3, #0
 80039ee:	2200      	movs	r2, #0
 80039f0:	2100      	movs	r1, #0
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f001 fb2b 	bl	800504e <USBD_LL_PrepareReceive>
 80039f8:	e04e      	b.n	8003a98 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	6912      	ldr	r2, [r2, #16]
 8003a02:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a06:	fb02 f201 	mul.w	r2, r2, r1
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11c      	bne.n	8003a4a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d316      	bcc.n	8003a4a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d20f      	bcs.n	8003a4a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fe92 	bl	8004758 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2100      	movs	r1, #0
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f001 fb03 	bl	800504e <USBD_LL_PrepareReceive>
 8003a48:	e026      	b.n	8003a98 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d105      	bne.n	8003a6c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003a6c:	2180      	movs	r1, #128	; 0x80
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f001 fa48 	bl	8004f04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fec4 	bl	8004802 <USBD_CtlReceiveStatus>
 8003a7a:	e00d      	b.n	8003a98 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d004      	beq.n	8003a90 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f001 fa36 	bl	8004f04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d11d      	bne.n	8003ade <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff fe83 	bl	80037ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8003ab0:	e015      	b.n	8003ade <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d108      	bne.n	8003ada <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	7afa      	ldrb	r2, [r7, #11]
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	4798      	blx	r3
 8003ad8:	e001      	b.n	8003ade <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003ada:	2302      	movs	r3, #2
 8003adc:	e000      	b.n	8003ae0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003af0:	2340      	movs	r3, #64	; 0x40
 8003af2:	2200      	movs	r2, #0
 8003af4:	2100      	movs	r1, #0
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f001 f9bf 	bl	8004e7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003b0c:	2340      	movs	r3, #64	; 0x40
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f001 f9b1 	bl	8004e7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2240      	movs	r2, #64	; 0x40
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6852      	ldr	r2, [r2, #4]
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
  }

  return USBD_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d105      	bne.n	8003bce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d10b      	bne.n	8003c04 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d004      	beq.n	8003c34 <USBD_StdDevReq+0x24>
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d002      	beq.n	8003c34 <USBD_StdDevReq+0x24>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <USBD_StdDevReq+0x34>
 8003c32:	e04c      	b.n	8003cce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	6839      	ldr	r1, [r7, #0]
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
      break;
 8003c42:	e049      	b.n	8003cd8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	2b09      	cmp	r3, #9
 8003c4a:	d83a      	bhi.n	8003cc2 <USBD_StdDevReq+0xb2>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <USBD_StdDevReq+0x44>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003ca5 	.word	0x08003ca5
 8003c58:	08003cb9 	.word	0x08003cb9
 8003c5c:	08003cc3 	.word	0x08003cc3
 8003c60:	08003caf 	.word	0x08003caf
 8003c64:	08003cc3 	.word	0x08003cc3
 8003c68:	08003c87 	.word	0x08003c87
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003cc3 	.word	0x08003cc3
 8003c74:	08003c9b 	.word	0x08003c9b
 8003c78:	08003c91 	.word	0x08003c91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003c7c:	6839      	ldr	r1, [r7, #0]
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9d4 	bl	800402c <USBD_GetDescriptor>
          break;
 8003c84:	e022      	b.n	8003ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003c86:	6839      	ldr	r1, [r7, #0]
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fb37 	bl	80042fc <USBD_SetAddress>
          break;
 8003c8e:	e01d      	b.n	8003ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fb74 	bl	8004380 <USBD_SetConfig>
          break;
 8003c98:	e018      	b.n	8003ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003c9a:	6839      	ldr	r1, [r7, #0]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fbfd 	bl	800449c <USBD_GetConfig>
          break;
 8003ca2:	e013      	b.n	8003ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8003ca4:	6839      	ldr	r1, [r7, #0]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fc2c 	bl	8004504 <USBD_GetStatus>
          break;
 8003cac:	e00e      	b.n	8003ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8003cae:	6839      	ldr	r1, [r7, #0]
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fc5a 	bl	800456a <USBD_SetFeature>
          break;
 8003cb6:	e009      	b.n	8003ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fc69 	bl	8004592 <USBD_ClrFeature>
          break;
 8003cc0:	e004      	b.n	8003ccc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8003cc2:	6839      	ldr	r1, [r7, #0]
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fcc1 	bl	800464c <USBD_CtlError>
          break;
 8003cca:	bf00      	nop
      }
      break;
 8003ccc:	e004      	b.n	8003cd8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8003cce:	6839      	ldr	r1, [r7, #0]
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fcbb 	bl	800464c <USBD_CtlError>
      break;
 8003cd6:	bf00      	nop
  }

  return ret;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop

08003ce4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d003      	beq.n	8003d06 <USBD_StdItfReq+0x22>
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d001      	beq.n	8003d06 <USBD_StdItfReq+0x22>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d12a      	bne.n	8003d5c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d81d      	bhi.n	8003d4e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	889b      	ldrh	r3, [r3, #4]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d813      	bhi.n	8003d44 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	6839      	ldr	r1, [r7, #0]
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	4798      	blx	r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	88db      	ldrh	r3, [r3, #6]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d110      	bne.n	8003d58 <USBD_StdItfReq+0x74>
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fd4d 	bl	80047dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8003d42:	e009      	b.n	8003d58 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8003d44:	6839      	ldr	r1, [r7, #0]
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fc80 	bl	800464c <USBD_CtlError>
          break;
 8003d4c:	e004      	b.n	8003d58 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8003d4e:	6839      	ldr	r1, [r7, #0]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fc7b 	bl	800464c <USBD_CtlError>
          break;
 8003d56:	e000      	b.n	8003d5a <USBD_StdItfReq+0x76>
          break;
 8003d58:	bf00      	nop
      }
      break;
 8003d5a:	e004      	b.n	8003d66 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8003d5c:	6839      	ldr	r1, [r7, #0]
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fc74 	bl	800464c <USBD_CtlError>
      break;
 8003d64:	bf00      	nop
  }

  return USBD_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	889b      	ldrh	r3, [r3, #4]
 8003d82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d004      	beq.n	8003d9a <USBD_StdEPReq+0x2a>
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d002      	beq.n	8003d9a <USBD_StdEPReq+0x2a>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <USBD_StdEPReq+0x3a>
 8003d98:	e13d      	b.n	8004016 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
      break;
 8003da8:	e13a      	b.n	8004020 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d10a      	bne.n	8003dcc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	6839      	ldr	r1, [r7, #0]
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	e12a      	b.n	8004022 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d03e      	beq.n	8003e52 <USBD_StdEPReq+0xe2>
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d002      	beq.n	8003dde <USBD_StdEPReq+0x6e>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d070      	beq.n	8003ebe <USBD_StdEPReq+0x14e>
 8003ddc:	e115      	b.n	800400a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d002      	beq.n	8003dee <USBD_StdEPReq+0x7e>
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d015      	beq.n	8003e18 <USBD_StdEPReq+0xa8>
 8003dec:	e02b      	b.n	8003e46 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003dee:	7bbb      	ldrb	r3, [r7, #14]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00c      	beq.n	8003e0e <USBD_StdEPReq+0x9e>
 8003df4:	7bbb      	ldrb	r3, [r7, #14]
 8003df6:	2b80      	cmp	r3, #128	; 0x80
 8003df8:	d009      	beq.n	8003e0e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8003dfa:	7bbb      	ldrb	r3, [r7, #14]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f001 f880 	bl	8004f04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f001 f87c 	bl	8004f04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003e0c:	e020      	b.n	8003e50 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fc1b 	bl	800464c <USBD_CtlError>
              break;
 8003e16:	e01b      	b.n	8003e50 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	885b      	ldrh	r3, [r3, #2]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10e      	bne.n	8003e3e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8003e20:	7bbb      	ldrb	r3, [r7, #14]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <USBD_StdEPReq+0xce>
 8003e26:	7bbb      	ldrb	r3, [r7, #14]
 8003e28:	2b80      	cmp	r3, #128	; 0x80
 8003e2a:	d008      	beq.n	8003e3e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	88db      	ldrh	r3, [r3, #6]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8003e34:	7bbb      	ldrb	r3, [r7, #14]
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f001 f863 	bl	8004f04 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fccc 	bl	80047dc <USBD_CtlSendStatus>

              break;
 8003e44:	e004      	b.n	8003e50 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fbff 	bl	800464c <USBD_CtlError>
              break;
 8003e4e:	bf00      	nop
          }
          break;
 8003e50:	e0e0      	b.n	8004014 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d002      	beq.n	8003e62 <USBD_StdEPReq+0xf2>
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d015      	beq.n	8003e8c <USBD_StdEPReq+0x11c>
 8003e60:	e026      	b.n	8003eb0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003e62:	7bbb      	ldrb	r3, [r7, #14]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00c      	beq.n	8003e82 <USBD_StdEPReq+0x112>
 8003e68:	7bbb      	ldrb	r3, [r7, #14]
 8003e6a:	2b80      	cmp	r3, #128	; 0x80
 8003e6c:	d009      	beq.n	8003e82 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8003e6e:	7bbb      	ldrb	r3, [r7, #14]
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f001 f846 	bl	8004f04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f001 f842 	bl	8004f04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003e80:	e01c      	b.n	8003ebc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8003e82:	6839      	ldr	r1, [r7, #0]
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fbe1 	bl	800464c <USBD_CtlError>
              break;
 8003e8a:	e017      	b.n	8003ebc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	885b      	ldrh	r3, [r3, #2]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d112      	bne.n	8003eba <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8003e94:	7bbb      	ldrb	r3, [r7, #14]
 8003e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003e9e:	7bbb      	ldrb	r3, [r7, #14]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f001 f84d 	bl	8004f42 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fc97 	bl	80047dc <USBD_CtlSendStatus>
              }
              break;
 8003eae:	e004      	b.n	8003eba <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fbca 	bl	800464c <USBD_CtlError>
              break;
 8003eb8:	e000      	b.n	8003ebc <USBD_StdEPReq+0x14c>
              break;
 8003eba:	bf00      	nop
          }
          break;
 8003ebc:	e0aa      	b.n	8004014 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d002      	beq.n	8003ece <USBD_StdEPReq+0x15e>
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d032      	beq.n	8003f32 <USBD_StdEPReq+0x1c2>
 8003ecc:	e097      	b.n	8003ffe <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003ece:	7bbb      	ldrb	r3, [r7, #14]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <USBD_StdEPReq+0x174>
 8003ed4:	7bbb      	ldrb	r3, [r7, #14]
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d004      	beq.n	8003ee4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fbb5 	bl	800464c <USBD_CtlError>
                break;
 8003ee2:	e091      	b.n	8004008 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	da0b      	bge.n	8003f04 <USBD_StdEPReq+0x194>
 8003eec:	7bbb      	ldrb	r3, [r7, #14]
 8003eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	3310      	adds	r3, #16
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	3304      	adds	r3, #4
 8003f02:	e00b      	b.n	8003f1c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003f04:	7bbb      	ldrb	r3, [r7, #14]
 8003f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2202      	movs	r2, #2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fbf8 	bl	8004720 <USBD_CtlSendData>
              break;
 8003f30:	e06a      	b.n	8004008 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8003f32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	da11      	bge.n	8003f5e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003f3a:	7bbb      	ldrb	r3, [r7, #14]
 8003f3c:	f003 020f 	and.w	r2, r3, #15
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	3318      	adds	r3, #24
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d117      	bne.n	8003f84 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8003f54:	6839      	ldr	r1, [r7, #0]
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fb78 	bl	800464c <USBD_CtlError>
                  break;
 8003f5c:	e054      	b.n	8004008 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003f5e:	7bbb      	ldrb	r3, [r7, #14]
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d104      	bne.n	8003f84 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8003f7a:	6839      	ldr	r1, [r7, #0]
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fb65 	bl	800464c <USBD_CtlError>
                  break;
 8003f82:	e041      	b.n	8004008 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	da0b      	bge.n	8003fa4 <USBD_StdEPReq+0x234>
 8003f8c:	7bbb      	ldrb	r3, [r7, #14]
 8003f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	3310      	adds	r3, #16
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	e00b      	b.n	8003fbc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003fa4:	7bbb      	ldrb	r3, [r7, #14]
 8003fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3304      	adds	r3, #4
 8003fbc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003fbe:	7bbb      	ldrb	r3, [r7, #14]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <USBD_StdEPReq+0x25a>
 8003fc4:	7bbb      	ldrb	r3, [r7, #14]
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d103      	bne.n	8003fd2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e00e      	b.n	8003ff0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003fd2:	7bbb      	ldrb	r3, [r7, #14]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 ffd2 	bl	8004f80 <USBD_LL_IsStallEP>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e002      	b.n	8003ff0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fb92 	bl	8004720 <USBD_CtlSendData>
              break;
 8003ffc:	e004      	b.n	8004008 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fb23 	bl	800464c <USBD_CtlError>
              break;
 8004006:	bf00      	nop
          }
          break;
 8004008:	e004      	b.n	8004014 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800400a:	6839      	ldr	r1, [r7, #0]
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fb1d 	bl	800464c <USBD_CtlError>
          break;
 8004012:	bf00      	nop
      }
      break;
 8004014:	e004      	b.n	8004020 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004016:	6839      	ldr	r1, [r7, #0]
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fb17 	bl	800464c <USBD_CtlError>
      break;
 800401e:	bf00      	nop
  }

  return ret;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	885b      	ldrh	r3, [r3, #2]
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	2b06      	cmp	r3, #6
 800404e:	f200 8128 	bhi.w	80042a2 <USBD_GetDescriptor+0x276>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <USBD_GetDescriptor+0x2c>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	08004075 	.word	0x08004075
 800405c:	0800408d 	.word	0x0800408d
 8004060:	080040cd 	.word	0x080040cd
 8004064:	080042a3 	.word	0x080042a3
 8004068:	080042a3 	.word	0x080042a3
 800406c:	08004243 	.word	0x08004243
 8004070:	0800426f 	.word	0x0800426f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	7c12      	ldrb	r2, [r2, #16]
 8004080:	f107 0108 	add.w	r1, r7, #8
 8004084:	4610      	mov	r0, r2
 8004086:	4798      	blx	r3
 8004088:	60f8      	str	r0, [r7, #12]
      break;
 800408a:	e112      	b.n	80042b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	7c1b      	ldrb	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f107 0208 	add.w	r2, r7, #8
 80040a0:	4610      	mov	r0, r2
 80040a2:	4798      	blx	r3
 80040a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3301      	adds	r3, #1
 80040aa:	2202      	movs	r2, #2
 80040ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80040ae:	e100      	b.n	80042b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	f107 0208 	add.w	r2, r7, #8
 80040bc:	4610      	mov	r0, r2
 80040be:	4798      	blx	r3
 80040c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3301      	adds	r3, #1
 80040c6:	2202      	movs	r2, #2
 80040c8:	701a      	strb	r2, [r3, #0]
      break;
 80040ca:	e0f2      	b.n	80042b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	885b      	ldrh	r3, [r3, #2]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	f200 80ac 	bhi.w	8004230 <USBD_GetDescriptor+0x204>
 80040d8:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <USBD_GetDescriptor+0xb4>)
 80040da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040de:	bf00      	nop
 80040e0:	080040f9 	.word	0x080040f9
 80040e4:	0800412d 	.word	0x0800412d
 80040e8:	08004161 	.word	0x08004161
 80040ec:	08004195 	.word	0x08004195
 80040f0:	080041c9 	.word	0x080041c9
 80040f4:	080041fd 	.word	0x080041fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00b      	beq.n	800411c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	7c12      	ldrb	r2, [r2, #16]
 8004110:	f107 0108 	add.w	r1, r7, #8
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
 8004118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800411a:	e091      	b.n	8004240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa94 	bl	800464c <USBD_CtlError>
            err++;
 8004124:	7afb      	ldrb	r3, [r7, #11]
 8004126:	3301      	adds	r3, #1
 8004128:	72fb      	strb	r3, [r7, #11]
          break;
 800412a:	e089      	b.n	8004240 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	7c12      	ldrb	r2, [r2, #16]
 8004144:	f107 0108 	add.w	r1, r7, #8
 8004148:	4610      	mov	r0, r2
 800414a:	4798      	blx	r3
 800414c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800414e:	e077      	b.n	8004240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fa7a 	bl	800464c <USBD_CtlError>
            err++;
 8004158:	7afb      	ldrb	r3, [r7, #11]
 800415a:	3301      	adds	r3, #1
 800415c:	72fb      	strb	r3, [r7, #11]
          break;
 800415e:	e06f      	b.n	8004240 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	7c12      	ldrb	r2, [r2, #16]
 8004178:	f107 0108 	add.w	r1, r7, #8
 800417c:	4610      	mov	r0, r2
 800417e:	4798      	blx	r3
 8004180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004182:	e05d      	b.n	8004240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004184:	6839      	ldr	r1, [r7, #0]
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fa60 	bl	800464c <USBD_CtlError>
            err++;
 800418c:	7afb      	ldrb	r3, [r7, #11]
 800418e:	3301      	adds	r3, #1
 8004190:	72fb      	strb	r3, [r7, #11]
          break;
 8004192:	e055      	b.n	8004240 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	7c12      	ldrb	r2, [r2, #16]
 80041ac:	f107 0108 	add.w	r1, r7, #8
 80041b0:	4610      	mov	r0, r2
 80041b2:	4798      	blx	r3
 80041b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80041b6:	e043      	b.n	8004240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80041b8:	6839      	ldr	r1, [r7, #0]
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fa46 	bl	800464c <USBD_CtlError>
            err++;
 80041c0:	7afb      	ldrb	r3, [r7, #11]
 80041c2:	3301      	adds	r3, #1
 80041c4:	72fb      	strb	r3, [r7, #11]
          break;
 80041c6:	e03b      	b.n	8004240 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	7c12      	ldrb	r2, [r2, #16]
 80041e0:	f107 0108 	add.w	r1, r7, #8
 80041e4:	4610      	mov	r0, r2
 80041e6:	4798      	blx	r3
 80041e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80041ea:	e029      	b.n	8004240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa2c 	bl	800464c <USBD_CtlError>
            err++;
 80041f4:	7afb      	ldrb	r3, [r7, #11]
 80041f6:	3301      	adds	r3, #1
 80041f8:	72fb      	strb	r3, [r7, #11]
          break;
 80041fa:	e021      	b.n	8004240 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	7c12      	ldrb	r2, [r2, #16]
 8004214:	f107 0108 	add.w	r1, r7, #8
 8004218:	4610      	mov	r0, r2
 800421a:	4798      	blx	r3
 800421c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800421e:	e00f      	b.n	8004240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa12 	bl	800464c <USBD_CtlError>
            err++;
 8004228:	7afb      	ldrb	r3, [r7, #11]
 800422a:	3301      	adds	r3, #1
 800422c:	72fb      	strb	r3, [r7, #11]
          break;
 800422e:	e007      	b.n	8004240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004230:	6839      	ldr	r1, [r7, #0]
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fa0a 	bl	800464c <USBD_CtlError>
          err++;
 8004238:	7afb      	ldrb	r3, [r7, #11]
 800423a:	3301      	adds	r3, #1
 800423c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800423e:	e038      	b.n	80042b2 <USBD_GetDescriptor+0x286>
 8004240:	e037      	b.n	80042b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	7c1b      	ldrb	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004252:	f107 0208 	add.w	r2, r7, #8
 8004256:	4610      	mov	r0, r2
 8004258:	4798      	blx	r3
 800425a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800425c:	e029      	b.n	80042b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800425e:	6839      	ldr	r1, [r7, #0]
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f9f3 	bl	800464c <USBD_CtlError>
        err++;
 8004266:	7afb      	ldrb	r3, [r7, #11]
 8004268:	3301      	adds	r3, #1
 800426a:	72fb      	strb	r3, [r7, #11]
      break;
 800426c:	e021      	b.n	80042b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7c1b      	ldrb	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10d      	bne.n	8004292 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f107 0208 	add.w	r2, r7, #8
 8004282:	4610      	mov	r0, r2
 8004284:	4798      	blx	r3
 8004286:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3301      	adds	r3, #1
 800428c:	2207      	movs	r2, #7
 800428e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004290:	e00f      	b.n	80042b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004292:	6839      	ldr	r1, [r7, #0]
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f9d9 	bl	800464c <USBD_CtlError>
        err++;
 800429a:	7afb      	ldrb	r3, [r7, #11]
 800429c:	3301      	adds	r3, #1
 800429e:	72fb      	strb	r3, [r7, #11]
      break;
 80042a0:	e007      	b.n	80042b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f9d1 	bl	800464c <USBD_CtlError>
      err++;
 80042aa:	7afb      	ldrb	r3, [r7, #11]
 80042ac:	3301      	adds	r3, #1
 80042ae:	72fb      	strb	r3, [r7, #11]
      break;
 80042b0:	bf00      	nop
  }

  if (err != 0U)
 80042b2:	7afb      	ldrb	r3, [r7, #11]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d11c      	bne.n	80042f2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80042b8:	893b      	ldrh	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d011      	beq.n	80042e2 <USBD_GetDescriptor+0x2b6>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	88db      	ldrh	r3, [r3, #6]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00d      	beq.n	80042e2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	88da      	ldrh	r2, [r3, #6]
 80042ca:	893b      	ldrh	r3, [r7, #8]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	bf28      	it	cs
 80042d0:	4613      	movcs	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80042d6:	893b      	ldrh	r3, [r7, #8]
 80042d8:	461a      	mov	r2, r3
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fa1f 	bl	8004720 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	88db      	ldrh	r3, [r3, #6]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fa76 	bl	80047dc <USBD_CtlSendStatus>
 80042f0:	e000      	b.n	80042f4 <USBD_GetDescriptor+0x2c8>
    return;
 80042f2:	bf00      	nop
    }
  }
}
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop

080042fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	889b      	ldrh	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d130      	bne.n	8004370 <USBD_SetAddress+0x74>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	88db      	ldrh	r3, [r3, #6]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d12c      	bne.n	8004370 <USBD_SetAddress+0x74>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	885b      	ldrh	r3, [r3, #2]
 800431a:	2b7f      	cmp	r3, #127	; 0x7f
 800431c:	d828      	bhi.n	8004370 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	885b      	ldrh	r3, [r3, #2]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004328:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004330:	2b03      	cmp	r3, #3
 8004332:	d104      	bne.n	800433e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f988 	bl	800464c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800433c:	e01c      	b.n	8004378 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fe3d 	bl	8004fca <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fa43 	bl	80047dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004364:	e008      	b.n	8004378 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800436e:	e003      	b.n	8004378 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004370:	6839      	ldr	r1, [r7, #0]
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f96a 	bl	800464c <USBD_CtlError>
  }
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	885b      	ldrh	r3, [r3, #2]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	4b41      	ldr	r3, [pc, #260]	; (8004498 <USBD_SetConfig+0x118>)
 8004392:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004394:	4b40      	ldr	r3, [pc, #256]	; (8004498 <USBD_SetConfig+0x118>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d904      	bls.n	80043a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f954 	bl	800464c <USBD_CtlError>
 80043a4:	e075      	b.n	8004492 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d002      	beq.n	80043b6 <USBD_SetConfig+0x36>
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d023      	beq.n	80043fc <USBD_SetConfig+0x7c>
 80043b4:	e062      	b.n	800447c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80043b6:	4b38      	ldr	r3, [pc, #224]	; (8004498 <USBD_SetConfig+0x118>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01a      	beq.n	80043f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80043be:	4b36      	ldr	r3, [pc, #216]	; (8004498 <USBD_SetConfig+0x118>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2203      	movs	r2, #3
 80043cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80043d0:	4b31      	ldr	r3, [pc, #196]	; (8004498 <USBD_SetConfig+0x118>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff f9f3 	bl	80037c2 <USBD_SetClassConfig>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d104      	bne.n	80043ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80043e2:	6839      	ldr	r1, [r7, #0]
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f931 	bl	800464c <USBD_CtlError>
            return;
 80043ea:	e052      	b.n	8004492 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f9f5 	bl	80047dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80043f2:	e04e      	b.n	8004492 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f9f1 	bl	80047dc <USBD_CtlSendStatus>
        break;
 80043fa:	e04a      	b.n	8004492 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80043fc:	4b26      	ldr	r3, [pc, #152]	; (8004498 <USBD_SetConfig+0x118>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d112      	bne.n	800442a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800440c:	4b22      	ldr	r3, [pc, #136]	; (8004498 <USBD_SetConfig+0x118>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <USBD_SetConfig+0x118>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff f9ef 	bl	8003800 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9da 	bl	80047dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004428:	e033      	b.n	8004492 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800442a:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <USBD_SetConfig+0x118>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d01d      	beq.n	8004474 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	4619      	mov	r1, r3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff f9dd 	bl	8003800 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <USBD_SetConfig+0x118>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <USBD_SetConfig+0x118>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff f9b3 	bl	80037c2 <USBD_SetClassConfig>
 800445c:	4603      	mov	r3, r0
 800445e:	2b02      	cmp	r3, #2
 8004460:	d104      	bne.n	800446c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f8f1 	bl	800464c <USBD_CtlError>
            return;
 800446a:	e012      	b.n	8004492 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f9b5 	bl	80047dc <USBD_CtlSendStatus>
        break;
 8004472:	e00e      	b.n	8004492 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f9b1 	bl	80047dc <USBD_CtlSendStatus>
        break;
 800447a:	e00a      	b.n	8004492 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800447c:	6839      	ldr	r1, [r7, #0]
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8e4 	bl	800464c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <USBD_SetConfig+0x118>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff f9b8 	bl	8003800 <USBD_ClrClassConfig>
        break;
 8004490:	bf00      	nop
    }
  }
}
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000208 	.word	0x20000208

0800449c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	88db      	ldrh	r3, [r3, #6]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d004      	beq.n	80044b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80044ae:	6839      	ldr	r1, [r7, #0]
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f8cb 	bl	800464c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80044b6:	e021      	b.n	80044fc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044be:	2b01      	cmp	r3, #1
 80044c0:	db17      	blt.n	80044f2 <USBD_GetConfig+0x56>
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	dd02      	ble.n	80044cc <USBD_GetConfig+0x30>
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d00b      	beq.n	80044e2 <USBD_GetConfig+0x46>
 80044ca:	e012      	b.n	80044f2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3308      	adds	r3, #8
 80044d6:	2201      	movs	r2, #1
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f920 	bl	8004720 <USBD_CtlSendData>
        break;
 80044e0:	e00c      	b.n	80044fc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3304      	adds	r3, #4
 80044e6:	2201      	movs	r2, #1
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f918 	bl	8004720 <USBD_CtlSendData>
        break;
 80044f0:	e004      	b.n	80044fc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80044f2:	6839      	ldr	r1, [r7, #0]
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f8a9 	bl	800464c <USBD_CtlError>
        break;
 80044fa:	bf00      	nop
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004514:	3b01      	subs	r3, #1
 8004516:	2b02      	cmp	r3, #2
 8004518:	d81e      	bhi.n	8004558 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	88db      	ldrh	r3, [r3, #6]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d004      	beq.n	800452c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004522:	6839      	ldr	r1, [r7, #0]
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f891 	bl	800464c <USBD_CtlError>
        break;
 800452a:	e01a      	b.n	8004562 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f043 0202 	orr.w	r2, r3, #2
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	330c      	adds	r3, #12
 800454c:	2202      	movs	r2, #2
 800454e:	4619      	mov	r1, r3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f8e5 	bl	8004720 <USBD_CtlSendData>
      break;
 8004556:	e004      	b.n	8004562 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004558:	6839      	ldr	r1, [r7, #0]
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f876 	bl	800464c <USBD_CtlError>
      break;
 8004560:	bf00      	nop
  }
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	885b      	ldrh	r3, [r3, #2]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d106      	bne.n	800458a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f929 	bl	80047dc <USBD_CtlSendStatus>
  }
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045a2:	3b01      	subs	r3, #1
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d80b      	bhi.n	80045c0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	885b      	ldrh	r3, [r3, #2]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10c      	bne.n	80045ca <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f90f 	bl	80047dc <USBD_CtlSendStatus>
      }
      break;
 80045be:	e004      	b.n	80045ca <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80045c0:	6839      	ldr	r1, [r7, #0]
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f842 	bl	800464c <USBD_CtlError>
      break;
 80045c8:	e000      	b.n	80045cc <USBD_ClrFeature+0x3a>
      break;
 80045ca:	bf00      	nop
  }
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	785a      	ldrb	r2, [r3, #1]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	3302      	adds	r3, #2
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	3303      	adds	r3, #3
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	b29b      	uxth	r3, r3
 8004602:	4413      	add	r3, r2
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	3304      	adds	r3, #4
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b29a      	uxth	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	3305      	adds	r3, #5
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	b29b      	uxth	r3, r3
 800461e:	4413      	add	r3, r2
 8004620:	b29a      	uxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	3306      	adds	r3, #6
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	b29a      	uxth	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	3307      	adds	r3, #7
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	b29b      	uxth	r3, r3
 800463a:	4413      	add	r3, r2
 800463c:	b29a      	uxth	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	80da      	strh	r2, [r3, #6]

}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr

0800464c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004656:	2180      	movs	r1, #128	; 0x80
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fc53 	bl	8004f04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800465e:	2100      	movs	r1, #0
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fc4f 	bl	8004f04 <USBD_LL_StallEP>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b086      	sub	sp, #24
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d032      	beq.n	80046ea <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f834 	bl	80046f2 <USBD_GetLen>
 800468a:	4603      	mov	r3, r0
 800468c:	3301      	adds	r3, #1
 800468e:	b29b      	uxth	r3, r3
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	75fa      	strb	r2, [r7, #23]
 800469e:	461a      	mov	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4413      	add	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	7812      	ldrb	r2, [r2, #0]
 80046a8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	75fa      	strb	r2, [r7, #23]
 80046b0:	461a      	mov	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4413      	add	r3, r2
 80046b6:	2203      	movs	r2, #3
 80046b8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80046ba:	e012      	b.n	80046e2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	60fa      	str	r2, [r7, #12]
 80046c2:	7dfa      	ldrb	r2, [r7, #23]
 80046c4:	1c51      	adds	r1, r2, #1
 80046c6:	75f9      	strb	r1, [r7, #23]
 80046c8:	4611      	mov	r1, r2
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	440a      	add	r2, r1
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	75fa      	strb	r2, [r7, #23]
 80046d8:	461a      	mov	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4413      	add	r3, r2
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e8      	bne.n	80046bc <USBD_GetString+0x4e>
    }
  }
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80046fe:	e005      	b.n	800470c <USBD_GetLen+0x1a>
  {
    len++;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	3301      	adds	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
    buf++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3301      	adds	r3, #1
 800470a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f5      	bne.n	8004700 <USBD_GetLen+0xe>
  }

  return len;
 8004714:	7bfb      	ldrb	r3, [r7, #15]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2202      	movs	r2, #2
 8004732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	2100      	movs	r1, #0
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fc5d 	bl	8005008 <USBD_LL_Transmit>

  return USBD_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	2100      	movs	r1, #0
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fc4b 	bl	8005008 <USBD_LL_Transmit>

  return USBD_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2203      	movs	r2, #3
 800478e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	2100      	movs	r1, #0
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fc50 	bl	800504e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	2100      	movs	r1, #0
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fc3e 	bl	800504e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2204      	movs	r2, #4
 80047e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80047ec:	2300      	movs	r3, #0
 80047ee:	2200      	movs	r2, #0
 80047f0:	2100      	movs	r1, #0
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fc08 	bl	8005008 <USBD_LL_Transmit>

  return USBD_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2205      	movs	r2, #5
 800480e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004812:	2300      	movs	r3, #0
 8004814:	2200      	movs	r2, #0
 8004816:	2100      	movs	r1, #0
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fc18 	bl	800504e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800482c:	2200      	movs	r2, #0
 800482e:	4912      	ldr	r1, [pc, #72]	; (8004878 <MX_USB_DEVICE_Init+0x50>)
 8004830:	4812      	ldr	r0, [pc, #72]	; (800487c <MX_USB_DEVICE_Init+0x54>)
 8004832:	f7fe ff6c 	bl	800370e <USBD_Init>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800483c:	f7fb fd5c 	bl	80002f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004840:	490f      	ldr	r1, [pc, #60]	; (8004880 <MX_USB_DEVICE_Init+0x58>)
 8004842:	480e      	ldr	r0, [pc, #56]	; (800487c <MX_USB_DEVICE_Init+0x54>)
 8004844:	f7fe ff8e 	bl	8003764 <USBD_RegisterClass>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800484e:	f7fb fd53 	bl	80002f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004852:	490c      	ldr	r1, [pc, #48]	; (8004884 <MX_USB_DEVICE_Init+0x5c>)
 8004854:	4809      	ldr	r0, [pc, #36]	; (800487c <MX_USB_DEVICE_Init+0x54>)
 8004856:	f7fe febf 	bl	80035d8 <USBD_CDC_RegisterInterface>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8004860:	f7fb fd4a 	bl	80002f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004864:	4805      	ldr	r0, [pc, #20]	; (800487c <MX_USB_DEVICE_Init+0x54>)
 8004866:	f7fe ff96 	bl	8003796 <USBD_Start>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8004870:	f7fb fd42 	bl	80002f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004874:	bf00      	nop
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000130 	.word	0x20000130
 800487c:	20000438 	.word	0x20000438
 8004880:	2000001c 	.word	0x2000001c
 8004884:	20000120 	.word	0x20000120

08004888 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800488c:	2200      	movs	r2, #0
 800488e:	4905      	ldr	r1, [pc, #20]	; (80048a4 <CDC_Init_FS+0x1c>)
 8004890:	4805      	ldr	r0, [pc, #20]	; (80048a8 <CDC_Init_FS+0x20>)
 8004892:	f7fe feb7 	bl	8003604 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004896:	4905      	ldr	r1, [pc, #20]	; (80048ac <CDC_Init_FS+0x24>)
 8004898:	4803      	ldr	r0, [pc, #12]	; (80048a8 <CDC_Init_FS+0x20>)
 800489a:	f7fe fecc 	bl	8003636 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800489e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000ae4 	.word	0x20000ae4
 80048a8:	20000438 	.word	0x20000438
 80048ac:	200006fc 	.word	0x200006fc

080048b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80048b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr
	...

080048c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	6039      	str	r1, [r7, #0]
 80048ca:	71fb      	strb	r3, [r7, #7]
 80048cc:	4613      	mov	r3, r2
 80048ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	2b23      	cmp	r3, #35	; 0x23
 80048d4:	d84a      	bhi.n	800496c <CDC_Control_FS+0xac>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <CDC_Control_FS+0x1c>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	0800496d 	.word	0x0800496d
 80048e0:	0800496d 	.word	0x0800496d
 80048e4:	0800496d 	.word	0x0800496d
 80048e8:	0800496d 	.word	0x0800496d
 80048ec:	0800496d 	.word	0x0800496d
 80048f0:	0800496d 	.word	0x0800496d
 80048f4:	0800496d 	.word	0x0800496d
 80048f8:	0800496d 	.word	0x0800496d
 80048fc:	0800496d 	.word	0x0800496d
 8004900:	0800496d 	.word	0x0800496d
 8004904:	0800496d 	.word	0x0800496d
 8004908:	0800496d 	.word	0x0800496d
 800490c:	0800496d 	.word	0x0800496d
 8004910:	0800496d 	.word	0x0800496d
 8004914:	0800496d 	.word	0x0800496d
 8004918:	0800496d 	.word	0x0800496d
 800491c:	0800496d 	.word	0x0800496d
 8004920:	0800496d 	.word	0x0800496d
 8004924:	0800496d 	.word	0x0800496d
 8004928:	0800496d 	.word	0x0800496d
 800492c:	0800496d 	.word	0x0800496d
 8004930:	0800496d 	.word	0x0800496d
 8004934:	0800496d 	.word	0x0800496d
 8004938:	0800496d 	.word	0x0800496d
 800493c:	0800496d 	.word	0x0800496d
 8004940:	0800496d 	.word	0x0800496d
 8004944:	0800496d 	.word	0x0800496d
 8004948:	0800496d 	.word	0x0800496d
 800494c:	0800496d 	.word	0x0800496d
 8004950:	0800496d 	.word	0x0800496d
 8004954:	0800496d 	.word	0x0800496d
 8004958:	0800496d 	.word	0x0800496d
 800495c:	0800496d 	.word	0x0800496d
 8004960:	0800496d 	.word	0x0800496d
 8004964:	0800496d 	.word	0x0800496d
 8004968:	0800496d 	.word	0x0800496d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800496c:	bf00      	nop
  }

  return (USBD_OK);
 800496e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop

0800497c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4808      	ldr	r0, [pc, #32]	; (80049ac <CDC_Receive_FS+0x30>)
 800498a:	f7fe fe54 	bl	8003636 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800498e:	4807      	ldr	r0, [pc, #28]	; (80049ac <CDC_Receive_FS+0x30>)
 8004990:	f7fe fe93 	bl	80036ba <USBD_CDC_ReceivePacket>
  CDC_ReciveCallBack(Buf, Len[0]);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fb fc96 	bl	80002cc <CDC_ReciveCallBack>
  return (USBD_OK);
 80049a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000438 	.word	0x20000438

080049b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80049c0:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <CDC_Transmit_FS+0x48>)
 80049c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e00b      	b.n	80049ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80049d6:	887b      	ldrh	r3, [r7, #2]
 80049d8:	461a      	mov	r2, r3
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4806      	ldr	r0, [pc, #24]	; (80049f8 <CDC_Transmit_FS+0x48>)
 80049de:	f7fe fe11 	bl	8003604 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80049e2:	4805      	ldr	r0, [pc, #20]	; (80049f8 <CDC_Transmit_FS+0x48>)
 80049e4:	f7fe fe3a 	bl	800365c <USBD_CDC_TransmitPacket>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000438 	.word	0x20000438

080049fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2212      	movs	r2, #18
 8004a0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8004a0e:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	2000014c 	.word	0x2000014c

08004a20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004a32:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000160 	.word	0x20000160

08004a44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	6039      	str	r1, [r7, #0]
 8004a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	4907      	ldr	r1, [pc, #28]	; (8004a78 <USBD_FS_ProductStrDescriptor+0x34>)
 8004a5a:	4808      	ldr	r0, [pc, #32]	; (8004a7c <USBD_FS_ProductStrDescriptor+0x38>)
 8004a5c:	f7ff fe07 	bl	800466e <USBD_GetString>
 8004a60:	e004      	b.n	8004a6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	4904      	ldr	r1, [pc, #16]	; (8004a78 <USBD_FS_ProductStrDescriptor+0x34>)
 8004a66:	4805      	ldr	r0, [pc, #20]	; (8004a7c <USBD_FS_ProductStrDescriptor+0x38>)
 8004a68:	f7ff fe01 	bl	800466e <USBD_GetString>
  }
  return USBD_StrDesc;
 8004a6c:	4b02      	ldr	r3, [pc, #8]	; (8004a78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000ecc 	.word	0x20000ecc
 8004a7c:	080052ec 	.word	0x080052ec

08004a80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	6039      	str	r1, [r7, #0]
 8004a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	4904      	ldr	r1, [pc, #16]	; (8004aa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004a90:	4804      	ldr	r0, [pc, #16]	; (8004aa4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8004a92:	f7ff fdec 	bl	800466e <USBD_GetString>
  return USBD_StrDesc;
 8004a96:	4b02      	ldr	r3, [pc, #8]	; (8004aa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000ecc 	.word	0x20000ecc
 8004aa4:	08005304 	.word	0x08005304

08004aa8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	6039      	str	r1, [r7, #0]
 8004ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	221a      	movs	r2, #26
 8004ab8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004aba:	f000 f843 	bl	8004b44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8004abe:	4b02      	ldr	r3, [pc, #8]	; (8004ac8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000164 	.word	0x20000164

08004acc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	6039      	str	r1, [r7, #0]
 8004ad6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	4907      	ldr	r1, [pc, #28]	; (8004b00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8004ae2:	4808      	ldr	r0, [pc, #32]	; (8004b04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004ae4:	f7ff fdc3 	bl	800466e <USBD_GetString>
 8004ae8:	e004      	b.n	8004af4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	4904      	ldr	r1, [pc, #16]	; (8004b00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8004aee:	4805      	ldr	r0, [pc, #20]	; (8004b04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004af0:	f7ff fdbd 	bl	800466e <USBD_GetString>
  }
  return USBD_StrDesc;
 8004af4:	4b02      	ldr	r3, [pc, #8]	; (8004b00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000ecc 	.word	0x20000ecc
 8004b04:	08005318 	.word	0x08005318

08004b08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	6039      	str	r1, [r7, #0]
 8004b12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	4907      	ldr	r1, [pc, #28]	; (8004b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004b1e:	4808      	ldr	r0, [pc, #32]	; (8004b40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004b20:	f7ff fda5 	bl	800466e <USBD_GetString>
 8004b24:	e004      	b.n	8004b30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	4904      	ldr	r1, [pc, #16]	; (8004b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004b2a:	4805      	ldr	r0, [pc, #20]	; (8004b40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004b2c:	f7ff fd9f 	bl	800466e <USBD_GetString>
  }
  return USBD_StrDesc;
 8004b30:	4b02      	ldr	r3, [pc, #8]	; (8004b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000ecc 	.word	0x20000ecc
 8004b40:	08005324 	.word	0x08005324

08004b44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004b4a:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <Get_SerialNum+0x44>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004b50:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <Get_SerialNum+0x48>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004b56:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <Get_SerialNum+0x4c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	4909      	ldr	r1, [pc, #36]	; (8004b94 <Get_SerialNum+0x50>)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f814 	bl	8004b9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004b74:	2204      	movs	r2, #4
 8004b76:	4908      	ldr	r1, [pc, #32]	; (8004b98 <Get_SerialNum+0x54>)
 8004b78:	68b8      	ldr	r0, [r7, #8]
 8004b7a:	f000 f80f 	bl	8004b9c <IntToUnicode>
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	1ffff7e8 	.word	0x1ffff7e8
 8004b8c:	1ffff7ec 	.word	0x1ffff7ec
 8004b90:	1ffff7f0 	.word	0x1ffff7f0
 8004b94:	20000166 	.word	0x20000166
 8004b98:	20000176 	.word	0x20000176

08004b9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]
 8004bb2:	e027      	b.n	8004c04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	0f1b      	lsrs	r3, r3, #28
 8004bb8:	2b09      	cmp	r3, #9
 8004bba:	d80b      	bhi.n	8004bd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	0f1b      	lsrs	r3, r3, #28
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	440b      	add	r3, r1
 8004bcc:	3230      	adds	r2, #48	; 0x30
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e00a      	b.n	8004bea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	0f1b      	lsrs	r3, r3, #28
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4619      	mov	r1, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	440b      	add	r3, r1
 8004be4:	3237      	adds	r2, #55	; 0x37
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	3301      	adds	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
 8004c04:	7dfa      	ldrb	r2, [r7, #23]
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3d3      	bcc.n	8004bb4 <IntToUnicode+0x18>
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <HAL_PCD_MspInit+0x44>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d113      	bne.n	8004c52 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_PCD_MspInit+0x48>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <HAL_PCD_MspInit+0x48>)
 8004c30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c34:	61d3      	str	r3, [r2, #28]
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_PCD_MspInit+0x48>)
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004c42:	2200      	movs	r2, #0
 8004c44:	2100      	movs	r1, #0
 8004c46:	2014      	movs	r0, #20
 8004c48:	f7fb fd81 	bl	800074e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004c4c:	2014      	movs	r0, #20
 8004c4e:	f7fb fd9a 	bl	8000786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40005c00 	.word	0x40005c00
 8004c60:	40021000 	.word	0x40021000

08004c64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7fe fdd3 	bl	8003826 <USBD_LL_SetupStage>
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	015b      	lsls	r3, r3, #5
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	4619      	mov	r1, r3
 8004cac:	f7fe fe06 	bl	80038bc <USBD_LL_DataOutStage>
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	015b      	lsls	r3, r3, #5
 8004cd0:	4413      	add	r3, r2
 8004cd2:	333c      	adds	r3, #60	; 0x3c
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f7fe fe60 	bl	800399e <USBD_LL_DataInStage>
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fe ff70 	bl	8003bda <USBD_LL_SOF>
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d001      	beq.n	8004d1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8004d16:	f7fb faef 	bl	80002f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d20:	7bfa      	ldrb	r2, [r7, #15]
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe ff20 	bl	8003b6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe fed9 	bl	8003ae8 <USBD_LL_Reset>
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe ff1a 	bl	8003b88 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004d5c:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <HAL_PCD_SuspendCallback+0x30>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	4a03      	ldr	r2, [pc, #12]	; (8004d70 <HAL_PCD_SuspendCallback+0x30>)
 8004d62:	f043 0306 	orr.w	r3, r3, #6
 8004d66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe ff14 	bl	8003bb0 <USBD_LL_Resume>
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8004d98:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <USBD_LL_Init+0xac>)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a26      	ldr	r2, [pc, #152]	; (8004e3c <USBD_LL_Init+0xac>)
 8004da4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8004da8:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <USBD_LL_Init+0xac>)
 8004daa:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <USBD_LL_Init+0xb0>)
 8004dac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004dae:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <USBD_LL_Init+0xac>)
 8004db0:	2208      	movs	r2, #8
 8004db2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004db4:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <USBD_LL_Init+0xac>)
 8004db6:	2202      	movs	r2, #2
 8004db8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <USBD_LL_Init+0xac>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <USBD_LL_Init+0xac>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <USBD_LL_Init+0xac>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004dcc:	481b      	ldr	r0, [pc, #108]	; (8004e3c <USBD_LL_Init+0xac>)
 8004dce:	f7fb fcf4 	bl	80007ba <HAL_PCD_Init>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8004dd8:	f7fb fa8e 	bl	80002f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004de2:	2318      	movs	r3, #24
 8004de4:	2200      	movs	r2, #0
 8004de6:	2100      	movs	r1, #0
 8004de8:	f7fc fb8c 	bl	8001504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004df2:	2358      	movs	r3, #88	; 0x58
 8004df4:	2200      	movs	r2, #0
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	f7fc fb84 	bl	8001504 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004e02:	23c0      	movs	r3, #192	; 0xc0
 8004e04:	2200      	movs	r2, #0
 8004e06:	2181      	movs	r1, #129	; 0x81
 8004e08:	f7fc fb7c 	bl	8001504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004e12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004e16:	2200      	movs	r2, #0
 8004e18:	2101      	movs	r1, #1
 8004e1a:	f7fc fb73 	bl	8001504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2182      	movs	r1, #130	; 0x82
 8004e2c:	f7fc fb6a 	bl	8001504 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200010cc 	.word	0x200010cc
 8004e40:	40005c00 	.word	0x40005c00

08004e44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb fd8e 	bl	800097c <HAL_PCD_Start>
 8004e60:	4603      	mov	r3, r0
 8004e62:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 f948 	bl	80050fc <USBD_Get_USB_Status>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	4608      	mov	r0, r1
 8004e84:	4611      	mov	r1, r2
 8004e86:	461a      	mov	r2, r3
 8004e88:	4603      	mov	r3, r0
 8004e8a:	70fb      	strb	r3, [r7, #3]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70bb      	strb	r3, [r7, #2]
 8004e90:	4613      	mov	r3, r2
 8004e92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004ea2:	78bb      	ldrb	r3, [r7, #2]
 8004ea4:	883a      	ldrh	r2, [r7, #0]
 8004ea6:	78f9      	ldrb	r1, [r7, #3]
 8004ea8:	f7fb fec1 	bl	8000c2e <HAL_PCD_EP_Open>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f922 	bl	80050fc <USBD_Get_USB_Status>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8004ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fb ff02 	bl	8000cee <HAL_PCD_EP_Close>
 8004eea:	4603      	mov	r3, r0
 8004eec:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f903 	bl	80050fc <USBD_Get_USB_Status>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8004efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fb ffac 	bl	8000e80 <HAL_PCD_EP_SetStall>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f8e4 	bl	80050fc <USBD_Get_USB_Status>
 8004f34:	4603      	mov	r3, r0
 8004f36:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8004f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fb ffe7 	bl	8000f34 <HAL_PCD_EP_ClrStall>
 8004f66:	4603      	mov	r3, r0
 8004f68:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f8c5 	bl	80050fc <USBD_Get_USB_Status>
 8004f72:	4603      	mov	r3, r0
 8004f74:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8004f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f92:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8004f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	da08      	bge.n	8004fae <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	015b      	lsls	r3, r3, #5
 8004fa6:	4413      	add	r3, r2
 8004fa8:	332a      	adds	r3, #42	; 0x2a
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	e008      	b.n	8004fc0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	015b      	lsls	r3, r3, #5
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8004fbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fb fdfb 	bl	8000be4 <HAL_PCD_SetAddress>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f881 	bl	80050fc <USBD_Get_USB_Status>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	461a      	mov	r2, r3
 8005014:	460b      	mov	r3, r1
 8005016:	72fb      	strb	r3, [r7, #11]
 8005018:	4613      	mov	r3, r2
 800501a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800502a:	893b      	ldrh	r3, [r7, #8]
 800502c:	7af9      	ldrb	r1, [r7, #11]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	f7fb feed 	bl	8000e0e <HAL_PCD_EP_Transmit>
 8005034:	4603      	mov	r3, r0
 8005036:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005038:	7dfb      	ldrb	r3, [r7, #23]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f85e 	bl	80050fc <USBD_Get_USB_Status>
 8005040:	4603      	mov	r3, r0
 8005042:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005044:	7dbb      	ldrb	r3, [r7, #22]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	461a      	mov	r2, r3
 800505a:	460b      	mov	r3, r1
 800505c:	72fb      	strb	r3, [r7, #11]
 800505e:	4613      	mov	r3, r2
 8005060:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005070:	893b      	ldrh	r3, [r7, #8]
 8005072:	7af9      	ldrb	r1, [r7, #11]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	f7fb fe7c 	bl	8000d72 <HAL_PCD_EP_Receive>
 800507a:	4603      	mov	r3, r0
 800507c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f83b 	bl	80050fc <USBD_Get_USB_Status>
 8005086:	4603      	mov	r3, r0
 8005088:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800508a:	7dbb      	ldrb	r3, [r7, #22]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fb fe9b 	bl	8000de6 <HAL_PCD_EP_GetRxCount>
 80050b0:	4603      	mov	r3, r0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80050c4:	4b02      	ldr	r3, [pc, #8]	; (80050d0 <USBD_static_malloc+0x14>)
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr
 80050d0:	2000020c 	.word	0x2000020c

080050d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]

}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr

080050e6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d817      	bhi.n	8005140 <USBD_Get_USB_Status+0x44>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <USBD_Get_USB_Status+0x1c>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	08005129 	.word	0x08005129
 800511c:	0800512f 	.word	0x0800512f
 8005120:	08005135 	.word	0x08005135
 8005124:	0800513b 	.word	0x0800513b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	73fb      	strb	r3, [r7, #15]
    break;
 800512c:	e00b      	b.n	8005146 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800512e:	2302      	movs	r3, #2
 8005130:	73fb      	strb	r3, [r7, #15]
    break;
 8005132:	e008      	b.n	8005146 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
    break;
 8005138:	e005      	b.n	8005146 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800513a:	2302      	movs	r3, #2
 800513c:	73fb      	strb	r3, [r7, #15]
    break;
 800513e:	e002      	b.n	8005146 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005140:	2302      	movs	r3, #2
 8005142:	73fb      	strb	r3, [r7, #15]
    break;
 8005144:	bf00      	nop
  }
  return usb_status;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop

08005154 <__errno>:
 8005154:	4b01      	ldr	r3, [pc, #4]	; (800515c <__errno+0x8>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000180 	.word	0x20000180

08005160 <__libc_init_array>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	2500      	movs	r5, #0
 8005164:	4e0c      	ldr	r6, [pc, #48]	; (8005198 <__libc_init_array+0x38>)
 8005166:	4c0d      	ldr	r4, [pc, #52]	; (800519c <__libc_init_array+0x3c>)
 8005168:	1ba4      	subs	r4, r4, r6
 800516a:	10a4      	asrs	r4, r4, #2
 800516c:	42a5      	cmp	r5, r4
 800516e:	d109      	bne.n	8005184 <__libc_init_array+0x24>
 8005170:	f000 f8a6 	bl	80052c0 <_init>
 8005174:	2500      	movs	r5, #0
 8005176:	4e0a      	ldr	r6, [pc, #40]	; (80051a0 <__libc_init_array+0x40>)
 8005178:	4c0a      	ldr	r4, [pc, #40]	; (80051a4 <__libc_init_array+0x44>)
 800517a:	1ba4      	subs	r4, r4, r6
 800517c:	10a4      	asrs	r4, r4, #2
 800517e:	42a5      	cmp	r5, r4
 8005180:	d105      	bne.n	800518e <__libc_init_array+0x2e>
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005188:	4798      	blx	r3
 800518a:	3501      	adds	r5, #1
 800518c:	e7ee      	b.n	800516c <__libc_init_array+0xc>
 800518e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005192:	4798      	blx	r3
 8005194:	3501      	adds	r5, #1
 8005196:	e7f2      	b.n	800517e <__libc_init_array+0x1e>
 8005198:	08005344 	.word	0x08005344
 800519c:	08005344 	.word	0x08005344
 80051a0:	08005344 	.word	0x08005344
 80051a4:	08005348 	.word	0x08005348

080051a8 <malloc>:
 80051a8:	4b02      	ldr	r3, [pc, #8]	; (80051b4 <malloc+0xc>)
 80051aa:	4601      	mov	r1, r0
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	f000 b81b 	b.w	80051e8 <_malloc_r>
 80051b2:	bf00      	nop
 80051b4:	20000180 	.word	0x20000180

080051b8 <memcmp>:
 80051b8:	b530      	push	{r4, r5, lr}
 80051ba:	2400      	movs	r4, #0
 80051bc:	42a2      	cmp	r2, r4
 80051be:	d101      	bne.n	80051c4 <memcmp+0xc>
 80051c0:	2000      	movs	r0, #0
 80051c2:	e007      	b.n	80051d4 <memcmp+0x1c>
 80051c4:	5d03      	ldrb	r3, [r0, r4]
 80051c6:	3401      	adds	r4, #1
 80051c8:	190d      	adds	r5, r1, r4
 80051ca:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80051ce:	42ab      	cmp	r3, r5
 80051d0:	d0f4      	beq.n	80051bc <memcmp+0x4>
 80051d2:	1b58      	subs	r0, r3, r5
 80051d4:	bd30      	pop	{r4, r5, pc}

080051d6 <memset>:
 80051d6:	4603      	mov	r3, r0
 80051d8:	4402      	add	r2, r0
 80051da:	4293      	cmp	r3, r2
 80051dc:	d100      	bne.n	80051e0 <memset+0xa>
 80051de:	4770      	bx	lr
 80051e0:	f803 1b01 	strb.w	r1, [r3], #1
 80051e4:	e7f9      	b.n	80051da <memset+0x4>
	...

080051e8 <_malloc_r>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	1ccd      	adds	r5, r1, #3
 80051ec:	f025 0503 	bic.w	r5, r5, #3
 80051f0:	3508      	adds	r5, #8
 80051f2:	2d0c      	cmp	r5, #12
 80051f4:	bf38      	it	cc
 80051f6:	250c      	movcc	r5, #12
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	4606      	mov	r6, r0
 80051fc:	db01      	blt.n	8005202 <_malloc_r+0x1a>
 80051fe:	42a9      	cmp	r1, r5
 8005200:	d903      	bls.n	800520a <_malloc_r+0x22>
 8005202:	230c      	movs	r3, #12
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	2000      	movs	r0, #0
 8005208:	bd70      	pop	{r4, r5, r6, pc}
 800520a:	f000 f857 	bl	80052bc <__malloc_lock>
 800520e:	4a21      	ldr	r2, [pc, #132]	; (8005294 <_malloc_r+0xac>)
 8005210:	6814      	ldr	r4, [r2, #0]
 8005212:	4621      	mov	r1, r4
 8005214:	b991      	cbnz	r1, 800523c <_malloc_r+0x54>
 8005216:	4c20      	ldr	r4, [pc, #128]	; (8005298 <_malloc_r+0xb0>)
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	b91b      	cbnz	r3, 8005224 <_malloc_r+0x3c>
 800521c:	4630      	mov	r0, r6
 800521e:	f000 f83d 	bl	800529c <_sbrk_r>
 8005222:	6020      	str	r0, [r4, #0]
 8005224:	4629      	mov	r1, r5
 8005226:	4630      	mov	r0, r6
 8005228:	f000 f838 	bl	800529c <_sbrk_r>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d124      	bne.n	800527a <_malloc_r+0x92>
 8005230:	230c      	movs	r3, #12
 8005232:	4630      	mov	r0, r6
 8005234:	6033      	str	r3, [r6, #0]
 8005236:	f000 f842 	bl	80052be <__malloc_unlock>
 800523a:	e7e4      	b.n	8005206 <_malloc_r+0x1e>
 800523c:	680b      	ldr	r3, [r1, #0]
 800523e:	1b5b      	subs	r3, r3, r5
 8005240:	d418      	bmi.n	8005274 <_malloc_r+0x8c>
 8005242:	2b0b      	cmp	r3, #11
 8005244:	d90f      	bls.n	8005266 <_malloc_r+0x7e>
 8005246:	600b      	str	r3, [r1, #0]
 8005248:	18cc      	adds	r4, r1, r3
 800524a:	50cd      	str	r5, [r1, r3]
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f836 	bl	80052be <__malloc_unlock>
 8005252:	f104 000b 	add.w	r0, r4, #11
 8005256:	1d23      	adds	r3, r4, #4
 8005258:	f020 0007 	bic.w	r0, r0, #7
 800525c:	1ac3      	subs	r3, r0, r3
 800525e:	d0d3      	beq.n	8005208 <_malloc_r+0x20>
 8005260:	425a      	negs	r2, r3
 8005262:	50e2      	str	r2, [r4, r3]
 8005264:	e7d0      	b.n	8005208 <_malloc_r+0x20>
 8005266:	684b      	ldr	r3, [r1, #4]
 8005268:	428c      	cmp	r4, r1
 800526a:	bf16      	itet	ne
 800526c:	6063      	strne	r3, [r4, #4]
 800526e:	6013      	streq	r3, [r2, #0]
 8005270:	460c      	movne	r4, r1
 8005272:	e7eb      	b.n	800524c <_malloc_r+0x64>
 8005274:	460c      	mov	r4, r1
 8005276:	6849      	ldr	r1, [r1, #4]
 8005278:	e7cc      	b.n	8005214 <_malloc_r+0x2c>
 800527a:	1cc4      	adds	r4, r0, #3
 800527c:	f024 0403 	bic.w	r4, r4, #3
 8005280:	42a0      	cmp	r0, r4
 8005282:	d005      	beq.n	8005290 <_malloc_r+0xa8>
 8005284:	1a21      	subs	r1, r4, r0
 8005286:	4630      	mov	r0, r6
 8005288:	f000 f808 	bl	800529c <_sbrk_r>
 800528c:	3001      	adds	r0, #1
 800528e:	d0cf      	beq.n	8005230 <_malloc_r+0x48>
 8005290:	6025      	str	r5, [r4, #0]
 8005292:	e7db      	b.n	800524c <_malloc_r+0x64>
 8005294:	2000042c 	.word	0x2000042c
 8005298:	20000430 	.word	0x20000430

0800529c <_sbrk_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	2300      	movs	r3, #0
 80052a0:	4c05      	ldr	r4, [pc, #20]	; (80052b8 <_sbrk_r+0x1c>)
 80052a2:	4605      	mov	r5, r0
 80052a4:	4608      	mov	r0, r1
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	f7fb f892 	bl	80003d0 <_sbrk>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_sbrk_r+0x1a>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_sbrk_r+0x1a>
 80052b4:	602b      	str	r3, [r5, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	20001338 	.word	0x20001338

080052bc <__malloc_lock>:
 80052bc:	4770      	bx	lr

080052be <__malloc_unlock>:
 80052be:	4770      	bx	lr

080052c0 <_init>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	bf00      	nop
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr

080052cc <_fini>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr
