
remapping_spi_f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef0  08005ef0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005ef0  08005ef0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ef0  08005ef0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ac  200001e0  080060d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000138c  080060d8  0002138c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001265c  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d99  00000000  00000000  00032865  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  00035600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  00036268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000168a0  00000000  00000000  00036d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cdeb  00000000  00000000  0004d608  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f103  00000000  00000000  0005a3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c94f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  000c9574  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e6c 	.word	0x08005e6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08005e6c 	.word	0x08005e6c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa55 	bl	8000600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f829 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8bb 	bl	80002d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f881 	bl	8000264 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000162:	f005 f94d 	bl	8005400 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint16_t* data;
  uint8_t* data_to_transmit = (uint8_t*)malloc(sizeof(uint8_t) * 2);
 8000166:	2002      	movs	r0, #2
 8000168:	f005 fe04 	bl	8005d74 <malloc>
 800016c:	4603      	mov	r3, r0
 800016e:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000170:	2201      	movs	r2, #1
 8000172:	2140      	movs	r1, #64	; 0x40
 8000174:	480b      	ldr	r0, [pc, #44]	; (80001a4 <main+0x58>)
 8000176:	f000 fd0d 	bl	8000b94 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, data, 1, 0);
 800017a:	2300      	movs	r3, #0
 800017c:	2201      	movs	r2, #1
 800017e:	6839      	ldr	r1, [r7, #0]
 8000180:	4809      	ldr	r0, [pc, #36]	; (80001a8 <main+0x5c>)
 8000182:	f002 f902 	bl	800238a <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	2140      	movs	r1, #64	; 0x40
 800018a:	4806      	ldr	r0, [pc, #24]	; (80001a4 <main+0x58>)
 800018c:	f000 fd02 	bl	8000b94 <HAL_GPIO_WritePin>
	  memcpy(data_to_transmit, data, sizeof(data));
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	461a      	mov	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	601a      	str	r2, [r3, #0]
	  CDC_Transmit_FS(data_to_transmit, sizeof(data_to_transmit));
 800019a:	2104      	movs	r1, #4
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f005 f9ed 	bl	800557c <CDC_Transmit_FS>
  {
 80001a2:	e7e5      	b.n	8000170 <main+0x24>
 80001a4:	40010c00 	.word	0x40010c00
 80001a8:	2000042c 	.word	0x2000042c

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b094      	sub	sp, #80	; 0x50
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f005 fde2 	bl	8005d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	f107 0314 	add.w	r3, r7, #20
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
 80001ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001dc:	2301      	movs	r3, #1
 80001de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ee:	2302      	movs	r3, #2
 80001f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fbc0 	bl	8001988 <HAL_RCC_OscConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800020e:	f000 f8b7 	bl	8000380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000212:	230f      	movs	r3, #15
 8000214:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000222:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000228:	f107 0314 	add.w	r3, r7, #20
 800022c:	2101      	movs	r1, #1
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fe2a 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800023a:	f000 f8a1 	bl	8000380 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800023e:	2310      	movs	r3, #16
 8000240:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000246:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4618      	mov	r0, r3
 800024c:	f001 ff86 	bl	800215c <HAL_RCCEx_PeriphCLKConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000256:	f000 f893 	bl	8000380 <Error_Handler>
  }
}
 800025a:	bf00      	nop
 800025c:	3750      	adds	r7, #80	; 0x50
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <MX_SPI1_Init+0x68>)
 800026a:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <MX_SPI1_Init+0x6c>)
 800026c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800026e:	4b17      	ldr	r3, [pc, #92]	; (80002cc <MX_SPI1_Init+0x68>)
 8000270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <MX_SPI1_Init+0x68>)
 8000278:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800027c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800027e:	4b13      	ldr	r3, [pc, #76]	; (80002cc <MX_SPI1_Init+0x68>)
 8000280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000284:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <MX_SPI1_Init+0x68>)
 8000288:	2200      	movs	r2, #0
 800028a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <MX_SPI1_Init+0x68>)
 800028e:	2200      	movs	r2, #0
 8000290:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <MX_SPI1_Init+0x68>)
 8000294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000298:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800029a:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <MX_SPI1_Init+0x68>)
 800029c:	2208      	movs	r2, #8
 800029e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <MX_SPI1_Init+0x68>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <MX_SPI1_Init+0x68>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <MX_SPI1_Init+0x68>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <MX_SPI1_Init+0x68>)
 80002b4:	220a      	movs	r2, #10
 80002b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <MX_SPI1_Init+0x68>)
 80002ba:	f002 f805 	bl	80022c8 <HAL_SPI_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80002c4:	f000 f85c 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	2000042c 	.word	0x2000042c
 80002d0:	40013000 	.word	0x40013000

080002d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002da:	f107 0310 	add.w	r3, r7, #16
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e8:	4b23      	ldr	r3, [pc, #140]	; (8000378 <MX_GPIO_Init+0xa4>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a22      	ldr	r2, [pc, #136]	; (8000378 <MX_GPIO_Init+0xa4>)
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b20      	ldr	r3, [pc, #128]	; (8000378 <MX_GPIO_Init+0xa4>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0310 	and.w	r3, r3, #16
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000300:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <MX_GPIO_Init+0xa4>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a1c      	ldr	r2, [pc, #112]	; (8000378 <MX_GPIO_Init+0xa4>)
 8000306:	f043 0320 	orr.w	r3, r3, #32
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_GPIO_Init+0xa4>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0320 	and.w	r3, r3, #32
 8000314:	60bb      	str	r3, [r7, #8]
 8000316:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <MX_GPIO_Init+0xa4>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a16      	ldr	r2, [pc, #88]	; (8000378 <MX_GPIO_Init+0xa4>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_GPIO_Init+0xa4>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0304 	and.w	r3, r3, #4
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_GPIO_Init+0xa4>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a10      	ldr	r2, [pc, #64]	; (8000378 <MX_GPIO_Init+0xa4>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_GPIO_Init+0xa4>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0308 	and.w	r3, r3, #8
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2140      	movs	r1, #64	; 0x40
 800034c:	480b      	ldr	r0, [pc, #44]	; (800037c <MX_GPIO_Init+0xa8>)
 800034e:	f000 fc21 	bl	8000b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000352:	2340      	movs	r3, #64	; 0x40
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2302      	movs	r3, #2
 8000360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0xa8>)
 800036a:	f000 fab9 	bl	80008e0 <HAL_GPIO_Init>

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <HAL_MspInit+0x5c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <HAL_MspInit+0x60>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_MspInit+0x60>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08a      	sub	sp, #40	; 0x28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <HAL_SPI_MspInit+0x8c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d131      	bne.n	8000474 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <HAL_SPI_MspInit+0x90>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1a      	ldr	r2, [pc, #104]	; (8000480 <HAL_SPI_MspInit+0x90>)
 8000416:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_SPI_MspInit+0x90>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000424:	613b      	str	r3, [r7, #16]
 8000426:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_SPI_MspInit+0x90>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a14      	ldr	r2, [pc, #80]	; (8000480 <HAL_SPI_MspInit+0x90>)
 800042e:	f043 0308 	orr.w	r3, r3, #8
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_SPI_MspInit+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0308 	and.w	r3, r3, #8
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000440:	2338      	movs	r3, #56	; 0x38
 8000442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000444:	2302      	movs	r3, #2
 8000446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000448:	2303      	movs	r3, #3
 800044a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	4619      	mov	r1, r3
 8000452:	480c      	ldr	r0, [pc, #48]	; (8000484 <HAL_SPI_MspInit+0x94>)
 8000454:	f000 fa44 	bl	80008e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <HAL_SPI_MspInit+0x98>)
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
 800045e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000460:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
 8000466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
 800046e:	4a06      	ldr	r2, [pc, #24]	; (8000488 <HAL_SPI_MspInit+0x98>)
 8000470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000472:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000474:	bf00      	nop
 8000476:	3728      	adds	r7, #40	; 0x28
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40013000 	.word	0x40013000
 8000480:	40021000 	.word	0x40021000
 8000484:	40010c00 	.word	0x40010c00
 8000488:	40010000 	.word	0x40010000

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <HardFault_Handler+0x4>

0800049e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <MemManage_Handler+0x4>

080004a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <BusFault_Handler+0x4>

080004aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <UsageFault_Handler+0x4>

080004b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d8:	f000 f8d8 	bl	800068c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004e6:	f000 fc74 	bl	8000dd2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	2000111c 	.word	0x2000111c

080004f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <_sbrk+0x50>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d102      	bne.n	800050a <_sbrk+0x16>
		heap_end = &end;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <_sbrk+0x50>)
 8000506:	4a10      	ldr	r2, [pc, #64]	; (8000548 <_sbrk+0x54>)
 8000508:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <_sbrk+0x50>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <_sbrk+0x50>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4413      	add	r3, r2
 8000518:	466a      	mov	r2, sp
 800051a:	4293      	cmp	r3, r2
 800051c:	d907      	bls.n	800052e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800051e:	f005 fbff 	bl	8005d20 <__errno>
 8000522:	4602      	mov	r2, r0
 8000524:	230c      	movs	r3, #12
 8000526:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	e006      	b.n	800053c <_sbrk+0x48>
	}

	heap_end += incr;
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <_sbrk+0x50>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	4a03      	ldr	r2, [pc, #12]	; (8000544 <_sbrk+0x50>)
 8000538:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200001fc 	.word	0x200001fc
 8000548:	20001390 	.word	0x20001390

0800054c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <SystemInit+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <SystemInit+0x5c>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <SystemInit+0x5c>)
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	4911      	ldr	r1, [pc, #68]	; (80005a8 <SystemInit+0x5c>)
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <SystemInit+0x60>)
 8000564:	4013      	ands	r3, r2
 8000566:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <SystemInit+0x5c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <SystemInit+0x5c>)
 800056e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000576:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <SystemInit+0x5c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <SystemInit+0x5c>)
 800057e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000582:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <SystemInit+0x5c>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <SystemInit+0x5c>)
 800058a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800058e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <SystemInit+0x5c>)
 8000592:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000596:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <SystemInit+0x64>)
 800059a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800059e:	609a      	str	r2, [r3, #8]
#endif 
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	40021000 	.word	0x40021000
 80005ac:	f8ff0000 	.word	0xf8ff0000
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005b6:	e003      	b.n	80005c0 <LoopCopyDataInit>

080005b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005be:	3104      	adds	r1, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005c8:	d3f6      	bcc.n	80005b8 <CopyDataInit>
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005cc:	e002      	b.n	80005d4 <LoopFillZerobss>

080005ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005d0:	f842 3b04 	str.w	r3, [r2], #4

080005d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005d8:	d3f9      	bcc.n	80005ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005da:	f7ff ffb7 	bl	800054c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005de:	f005 fba5 	bl	8005d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fdb3 	bl	800014c <main>
  bx lr
 80005e6:	4770      	bx	lr
  ldr r3, =_sidata
 80005e8:	08005ef8 	.word	0x08005ef8
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005f0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80005f4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80005f8:	2000138c 	.word	0x2000138c

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_Init+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_Init+0x28>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f923 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000616:	2000      	movs	r0, #0
 8000618:	f000 f808 	bl	800062c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800061c:	f7ff feb6 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40022000 	.word	0x40022000

0800062c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_InitTick+0x54>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_InitTick+0x58>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000642:	fbb3 f3f1 	udiv	r3, r3, r1
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f93b 	bl	80008c6 <HAL_SYSTICK_Config>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	e00e      	b.n	8000678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b0f      	cmp	r3, #15
 800065e:	d80a      	bhi.n	8000676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000660:	2200      	movs	r2, #0
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	f04f 30ff 	mov.w	r0, #4294967295
 8000668:	f000 f903 	bl	8000872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <HAL_InitTick+0x5c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	20000008 	.word	0x20000008
 8000688:	20000004 	.word	0x20000004

0800068c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_IncTick+0x1c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_IncTick+0x20>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4a03      	ldr	r2, [pc, #12]	; (80006ac <HAL_IncTick+0x20>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000484 	.word	0x20000484

080006b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;
 80006b4:	4b02      	ldr	r3, [pc, #8]	; (80006c0 <HAL_GetTick+0x10>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	20000484 	.word	0x20000484

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 021f 	and.w	r2, r3, #31
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <__NVIC_EnableIRQ+0x34>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000828:	d301      	bcc.n	800082e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082a:	2301      	movs	r3, #1
 800082c:	e00f      	b.n	800084e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <SysTick_Config+0x40>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000836:	210f      	movs	r1, #15
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f7ff ff90 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SysTick_Config+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <SysTick_Config+0x40>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff2d 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000884:	f7ff ff42 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6978      	ldr	r0, [r7, #20]
 8000890:	f7ff ff90 	bl	80007b4 <NVIC_EncodePriority>
 8000894:	4602      	mov	r2, r0
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff5f 	bl	8000760 <__NVIC_SetPriority>
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff35 	bl	8000728 <__NVIC_EnableIRQ>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffa2 	bl	8000818 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b08b      	sub	sp, #44	; 0x2c
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f2:	e127      	b.n	8000b44 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f4:	2201      	movs	r2, #1
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	429a      	cmp	r2, r3
 800090e:	f040 8116 	bne.w	8000b3e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b12      	cmp	r3, #18
 8000918:	d034      	beq.n	8000984 <HAL_GPIO_Init+0xa4>
 800091a:	2b12      	cmp	r3, #18
 800091c:	d80d      	bhi.n	800093a <HAL_GPIO_Init+0x5a>
 800091e:	2b02      	cmp	r3, #2
 8000920:	d02b      	beq.n	800097a <HAL_GPIO_Init+0x9a>
 8000922:	2b02      	cmp	r3, #2
 8000924:	d804      	bhi.n	8000930 <HAL_GPIO_Init+0x50>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d031      	beq.n	800098e <HAL_GPIO_Init+0xae>
 800092a:	2b01      	cmp	r3, #1
 800092c:	d01c      	beq.n	8000968 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092e:	e048      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000930:	2b03      	cmp	r3, #3
 8000932:	d043      	beq.n	80009bc <HAL_GPIO_Init+0xdc>
 8000934:	2b11      	cmp	r3, #17
 8000936:	d01b      	beq.n	8000970 <HAL_GPIO_Init+0x90>
          break;
 8000938:	e043      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800093a:	4a89      	ldr	r2, [pc, #548]	; (8000b60 <HAL_GPIO_Init+0x280>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d026      	beq.n	800098e <HAL_GPIO_Init+0xae>
 8000940:	4a87      	ldr	r2, [pc, #540]	; (8000b60 <HAL_GPIO_Init+0x280>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d806      	bhi.n	8000954 <HAL_GPIO_Init+0x74>
 8000946:	4a87      	ldr	r2, [pc, #540]	; (8000b64 <HAL_GPIO_Init+0x284>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d020      	beq.n	800098e <HAL_GPIO_Init+0xae>
 800094c:	4a86      	ldr	r2, [pc, #536]	; (8000b68 <HAL_GPIO_Init+0x288>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d01d      	beq.n	800098e <HAL_GPIO_Init+0xae>
          break;
 8000952:	e036      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000954:	4a85      	ldr	r2, [pc, #532]	; (8000b6c <HAL_GPIO_Init+0x28c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d019      	beq.n	800098e <HAL_GPIO_Init+0xae>
 800095a:	4a85      	ldr	r2, [pc, #532]	; (8000b70 <HAL_GPIO_Init+0x290>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d016      	beq.n	800098e <HAL_GPIO_Init+0xae>
 8000960:	4a84      	ldr	r2, [pc, #528]	; (8000b74 <HAL_GPIO_Init+0x294>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0xae>
          break;
 8000966:	e02c      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	623b      	str	r3, [r7, #32]
          break;
 800096e:	e028      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	3304      	adds	r3, #4
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e023      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	3308      	adds	r3, #8
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e01e      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	330c      	adds	r3, #12
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e019      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d102      	bne.n	800099c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000996:	2304      	movs	r3, #4
 8000998:	623b      	str	r3, [r7, #32]
          break;
 800099a:	e012      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d105      	bne.n	80009b0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a4:	2308      	movs	r3, #8
 80009a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	611a      	str	r2, [r3, #16]
          break;
 80009ae:	e008      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b0:	2308      	movs	r3, #8
 80009b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	615a      	str	r2, [r3, #20]
          break;
 80009ba:	e002      	b.n	80009c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
          break;
 80009c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	2bff      	cmp	r3, #255	; 0xff
 80009c6:	d801      	bhi.n	80009cc <HAL_GPIO_Init+0xec>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	e001      	b.n	80009d0 <HAL_GPIO_Init+0xf0>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3304      	adds	r3, #4
 80009d0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	2bff      	cmp	r3, #255	; 0xff
 80009d6:	d802      	bhi.n	80009de <HAL_GPIO_Init+0xfe>
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x104>
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	3b08      	subs	r3, #8
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	210f      	movs	r1, #15
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	401a      	ands	r2, r3
 80009f6:	6a39      	ldr	r1, [r7, #32]
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	431a      	orrs	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f000 8096 	beq.w	8000b3e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a12:	4b59      	ldr	r3, [pc, #356]	; (8000b78 <HAL_GPIO_Init+0x298>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4a58      	ldr	r2, [pc, #352]	; (8000b78 <HAL_GPIO_Init+0x298>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6193      	str	r3, [r2, #24]
 8000a1e:	4b56      	ldr	r3, [pc, #344]	; (8000b78 <HAL_GPIO_Init+0x298>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a2a:	4a54      	ldr	r2, [pc, #336]	; (8000b7c <HAL_GPIO_Init+0x29c>)
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a36:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	220f      	movs	r2, #15
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4b      	ldr	r2, [pc, #300]	; (8000b80 <HAL_GPIO_Init+0x2a0>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d013      	beq.n	8000a7e <HAL_GPIO_Init+0x19e>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4a      	ldr	r2, [pc, #296]	; (8000b84 <HAL_GPIO_Init+0x2a4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d00d      	beq.n	8000a7a <HAL_GPIO_Init+0x19a>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a49      	ldr	r2, [pc, #292]	; (8000b88 <HAL_GPIO_Init+0x2a8>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d007      	beq.n	8000a76 <HAL_GPIO_Init+0x196>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a48      	ldr	r2, [pc, #288]	; (8000b8c <HAL_GPIO_Init+0x2ac>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_GPIO_Init+0x192>
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x1a0>
 8000a72:	2304      	movs	r3, #4
 8000a74:	e004      	b.n	8000a80 <HAL_GPIO_Init+0x1a0>
 8000a76:	2302      	movs	r3, #2
 8000a78:	e002      	b.n	8000a80 <HAL_GPIO_Init+0x1a0>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <HAL_GPIO_Init+0x1a0>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a82:	f002 0203 	and.w	r2, r2, #3
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4093      	lsls	r3, r2
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a90:	493a      	ldr	r1, [pc, #232]	; (8000b7c <HAL_GPIO_Init+0x29c>)
 8000a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d006      	beq.n	8000ab8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4938      	ldr	r1, [pc, #224]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	600b      	str	r3, [r1, #0]
 8000ab6:	e006      	b.n	8000ac6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ab8:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	4933      	ldr	r1, [pc, #204]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	492e      	ldr	r1, [pc, #184]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	604b      	str	r3, [r1, #4]
 8000ade:	e006      	b.n	8000aee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	4929      	ldr	r1, [pc, #164]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000afa:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	4924      	ldr	r1, [pc, #144]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	608b      	str	r3, [r1, #8]
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	491f      	ldr	r1, [pc, #124]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000b12:	4013      	ands	r3, r2
 8000b14:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d006      	beq.n	8000b30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	491a      	ldr	r1, [pc, #104]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	60cb      	str	r3, [r1, #12]
 8000b2e:	e006      	b.n	8000b3e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4915      	ldr	r1, [pc, #84]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	3301      	adds	r3, #1
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f47f aed0 	bne.w	80008f4 <HAL_GPIO_Init+0x14>
  }
}
 8000b54:	bf00      	nop
 8000b56:	372c      	adds	r7, #44	; 0x2c
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	10210000 	.word	0x10210000
 8000b64:	10110000 	.word	0x10110000
 8000b68:	10120000 	.word	0x10120000
 8000b6c:	10310000 	.word	0x10310000
 8000b70:	10320000 	.word	0x10320000
 8000b74:	10220000 	.word	0x10220000
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	40010800 	.word	0x40010800
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	40011000 	.word	0x40011000
 8000b8c:	40011400 	.word	0x40011400
 8000b90:	40010400 	.word	0x40010400

08000b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	807b      	strh	r3, [r7, #2]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ba4:	787b      	ldrb	r3, [r7, #1]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bb0:	e003      	b.n	8000bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	041a      	lsls	r2, r3, #16
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	b08b      	sub	sp, #44	; 0x2c
 8000bc8:	af06      	add	r7, sp, #24
 8000bca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e0d3      	b.n	8000d7e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d106      	bne.n	8000bf0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f004 fdfa 	bl	80057e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 ff70 	bl	8002ae2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	687e      	ldr	r6, [r7, #4]
 8000c0a:	466d      	mov	r5, sp
 8000c0c:	f106 0410 	add.w	r4, r6, #16
 8000c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	602b      	str	r3, [r5, #0]
 8000c18:	1d33      	adds	r3, r6, #4
 8000c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c1c:	6838      	ldr	r0, [r7, #0]
 8000c1e:	f001 ff39 	bl	8002a94 <USB_CoreInit>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e0a4      	b.n	8000d7e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 ff6d 	bl	8002b1a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e035      	b.n	8000cb2 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	015b      	lsls	r3, r3, #5
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3329      	adds	r3, #41	; 0x29
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	015b      	lsls	r3, r3, #5
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3328      	adds	r3, #40	; 0x28
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	7bfa      	ldrb	r2, [r7, #15]
 8000c66:	b291      	uxth	r1, r2
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	015b      	lsls	r3, r3, #5
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3336      	adds	r3, #54	; 0x36
 8000c70:	460a      	mov	r2, r1
 8000c72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	015b      	lsls	r3, r3, #5
 8000c7a:	4413      	add	r3, r2
 8000c7c:	332b      	adds	r3, #43	; 0x2b
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	015b      	lsls	r3, r3, #5
 8000c88:	4413      	add	r3, r2
 8000c8a:	3338      	adds	r3, #56	; 0x38
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	015b      	lsls	r3, r3, #5
 8000c96:	4413      	add	r3, r2
 8000c98:	333c      	adds	r3, #60	; 0x3c
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	015b      	lsls	r3, r3, #5
 8000ca6:	4413      	add	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3c4      	bcc.n	8000c46 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e031      	b.n	8000d26 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	015b      	lsls	r3, r3, #5
 8000cc8:	4413      	add	r3, r2
 8000cca:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	015b      	lsls	r3, r3, #5
 8000cd8:	4413      	add	r3, r2
 8000cda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	015b      	lsls	r3, r3, #5
 8000ce8:	4413      	add	r3, r2
 8000cea:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	015b      	lsls	r3, r3, #5
 8000cf8:	4413      	add	r3, r2
 8000cfa:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	015b      	lsls	r3, r3, #5
 8000d08:	4413      	add	r3, r2
 8000d0a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	330a      	adds	r3, #10
 8000d18:	015b      	lsls	r3, r3, #5
 8000d1a:	4413      	add	r3, r2
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	3301      	adds	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d3c8      	bcc.n	8000cc2 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	687e      	ldr	r6, [r7, #4]
 8000d38:	466d      	mov	r5, sp
 8000d3a:	f106 0410 	add.w	r4, r6, #16
 8000d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	602b      	str	r3, [r5, #0]
 8000d46:	1d33      	adds	r3, r6, #4
 8000d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d4a:	6838      	ldr	r0, [r7, #0]
 8000d4c:	f001 fef1 	bl	8002b32 <USB_DevInit>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d005      	beq.n	8000d62 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00d      	b.n	8000d7e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 ff2f 	bl	8003bda <USB_DevDisconnect>

  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d101      	bne.n	8000d9c <HAL_PCD_Start+0x16>
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e016      	b.n	8000dca <HAL_PCD_Start+0x44>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000da4:	2101      	movs	r1, #1
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f004 ff83 	bl	8005cb2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 ff08 	bl	8003bc6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fe7a 	bl	8002ab4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 ff05 	bl	8003bee <USB_ReadInterrupts>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dee:	d102      	bne.n	8000df6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 faf3 	bl	80013dc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fef7 	bl	8003bee <USB_ReadInterrupts>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0a:	d112      	bne.n	8000e32 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e1e:	b292      	uxth	r2, r2
 8000e20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f004 fd52 	bl	80058ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f8de 	bl	8000fee <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fed9 	bl	8003bee <USB_ReadInterrupts>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e46:	d10b      	bne.n	8000e60 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e5a:	b292      	uxth	r2, r2
 8000e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fec2 	bl	8003bee <USB_ReadInterrupts>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e74:	d10b      	bne.n	8000e8e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e88:	b292      	uxth	r2, r2
 8000e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 feab 	bl	8003bee <USB_ReadInterrupts>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ea2:	d126      	bne.n	8000ef2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0204 	bic.w	r2, r2, #4
 8000eb6:	b292      	uxth	r2, r2
 8000eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0208 	bic.w	r2, r2, #8
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f004 fd33 	bl	8005940 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eec:	b292      	uxth	r2, r2
 8000eee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 fe79 	bl	8003bee <USB_ReadInterrupts>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f06:	d13d      	bne.n	8000f84 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0208 	orr.w	r2, r2, #8
 8000f1a:	b292      	uxth	r2, r2
 8000f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f32:	b292      	uxth	r2, r2
 8000f34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0204 	orr.w	r2, r2, #4
 8000f4a:	b292      	uxth	r2, r2
 8000f4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fe4a 	bl	8003bee <USB_ReadInterrupts>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f64:	d10b      	bne.n	8000f7e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f78:	b292      	uxth	r2, r2
 8000f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f004 fcc4 	bl	800590c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 fe30 	bl	8003bee <USB_ReadInterrupts>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f98:	d10e      	bne.n	8000fb8 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fac:	b292      	uxth	r2, r2
 8000fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f004 fc7d 	bl	80058b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 fe16 	bl	8003bee <USB_ReadInterrupts>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fe0:	b292      	uxth	r2, r2
 8000fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <HAL_PCD_SetAddress+0x1a>
 8001004:	2302      	movs	r3, #2
 8001006:	e013      	b.n	8001030 <HAL_PCD_SetAddress+0x42>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	78fa      	ldrb	r2, [r7, #3]
 8001014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fdbd 	bl	8003ba0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	4608      	mov	r0, r1
 8001042:	4611      	mov	r1, r2
 8001044:	461a      	mov	r2, r3
 8001046:	4603      	mov	r3, r0
 8001048:	70fb      	strb	r3, [r7, #3]
 800104a:	460b      	mov	r3, r1
 800104c:	803b      	strh	r3, [r7, #0]
 800104e:	4613      	mov	r3, r2
 8001050:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800105a:	2b00      	cmp	r3, #0
 800105c:	da0b      	bge.n	8001076 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	015b      	lsls	r3, r3, #5
 8001066:	3328      	adds	r3, #40	; 0x28
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2201      	movs	r2, #1
 8001072:	705a      	strb	r2, [r3, #1]
 8001074:	e00b      	b.n	800108e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	015b      	lsls	r3, r3, #5
 800107e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2200      	movs	r2, #0
 800108c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	b2da      	uxtb	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800109a:	883a      	ldrh	r2, [r7, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	78ba      	ldrb	r2, [r7, #2]
 80010a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d004      	beq.n	80010b8 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010b8:	78bb      	ldrb	r3, [r7, #2]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d102      	bne.n	80010c4 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_PCD_EP_Open+0x9a>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e00e      	b.n	80010f0 <HAL_PCD_EP_Open+0xb8>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68f9      	ldr	r1, [r7, #12]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fd4b 	bl	8002b7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80010ee:	7afb      	ldrb	r3, [r7, #11]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001108:	2b00      	cmp	r3, #0
 800110a:	da0b      	bge.n	8001124 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	015b      	lsls	r3, r3, #5
 8001114:	3328      	adds	r3, #40	; 0x28
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2201      	movs	r2, #1
 8001120:	705a      	strb	r2, [r3, #1]
 8001122:	e00b      	b.n	800113c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	015b      	lsls	r3, r3, #5
 800112c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	b2da      	uxtb	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_PCD_EP_Close+0x5e>
 8001152:	2302      	movs	r3, #2
 8001154:	e00e      	b.n	8001174 <HAL_PCD_EP_Close+0x7c>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68f9      	ldr	r1, [r7, #12]
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fff7 	bl	8003158 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	460b      	mov	r3, r1
 800118a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800118c:	7afb      	ldrb	r3, [r7, #11]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	015b      	lsls	r3, r3, #5
 8001194:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2200      	movs	r2, #0
 80011b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d106      	bne.n	80011da <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6979      	ldr	r1, [r7, #20]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 f956 	bl	8003484 <USB_EPStartXfer>
 80011d8:	e005      	b.n	80011e6 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6979      	ldr	r1, [r7, #20]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 f94f 	bl	8003484 <USB_EPStartXfer>
  }

  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	330a      	adds	r3, #10
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	4413      	add	r3, r2
 800120a:	3304      	adds	r3, #4
 800120c:	681b      	ldr	r3, [r3, #0]
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	460b      	mov	r3, r1
 8001226:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001228:	7afb      	ldrb	r3, [r7, #11]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	015b      	lsls	r3, r3, #5
 8001230:	3328      	adds	r3, #40	; 0x28
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	4413      	add	r3, r2
 8001236:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2201      	movs	r2, #1
 800124e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	b2da      	uxtb	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	2b00      	cmp	r3, #0
 8001264:	d106      	bne.n	8001274 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6979      	ldr	r1, [r7, #20]
 800126c:	4618      	mov	r0, r3
 800126e:	f002 f909 	bl	8003484 <USB_EPStartXfer>
 8001272:	e005      	b.n	8001280 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6979      	ldr	r1, [r7, #20]
 800127a:	4618      	mov	r0, r3
 800127c:	f002 f902 	bl	8003484 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	f003 0207 	and.w	r2, r3, #7
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d901      	bls.n	80012a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e046      	b.n	8001336 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	da0b      	bge.n	80012c8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	015b      	lsls	r3, r3, #5
 80012b8:	3328      	adds	r3, #40	; 0x28
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2201      	movs	r2, #1
 80012c4:	705a      	strb	r2, [r3, #1]
 80012c6:	e009      	b.n	80012dc <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	015b      	lsls	r3, r3, #5
 80012cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_PCD_EP_SetStall+0x72>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e01c      	b.n	8001336 <HAL_PCD_EP_SetStall+0xac>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	4618      	mov	r0, r3
 800130c:	f002 fb72 	bl	80039f4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	2b00      	cmp	r3, #0
 8001318:	d108      	bne.n	800132c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001324:	4619      	mov	r1, r3
 8001326:	4610      	mov	r0, r2
 8001328:	f002 fc70 	bl	8003c0c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	f003 020f 	and.w	r2, r3, #15
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	d901      	bls.n	800135c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e03a      	b.n	80013d2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800135c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001360:	2b00      	cmp	r3, #0
 8001362:	da0b      	bge.n	800137c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	015b      	lsls	r3, r3, #5
 800136c:	3328      	adds	r3, #40	; 0x28
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	705a      	strb	r2, [r3, #1]
 800137a:	e00b      	b.n	8001394 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	015b      	lsls	r3, r3, #5
 8001384:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_PCD_EP_ClrStall+0x76>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e00e      	b.n	80013d2 <HAL_PCD_EP_ClrStall+0x94>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68f9      	ldr	r1, [r7, #12]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fb58 	bl	8003a78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013e4:	e282      	b.n	80018ec <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ee:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80013f0:	8afb      	ldrh	r3, [r7, #22]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80013fa:	7d7b      	ldrb	r3, [r7, #21]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f040 8142 	bne.w	8001686 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001402:	8afb      	ldrh	r3, [r7, #22]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	2b00      	cmp	r3, #0
 800140a:	d151      	bne.n	80014b0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800141c:	b29c      	uxth	r4, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800142a:	b29b      	uxth	r3, r3
 800142c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3328      	adds	r3, #40	; 0x28
 8001432:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800143c:	b29b      	uxth	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	3302      	adds	r3, #2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	4413      	add	r3, r2
 8001452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	441a      	add	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800146e:	2100      	movs	r1, #0
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f004 fa07 	bl	8005884 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8234 	beq.w	80018ec <PCD_EP_ISR_Handler+0x510>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f040 822f 	bne.w	80018ec <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800149a:	b2da      	uxtb	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	b292      	uxth	r2, r2
 80014a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80014ae:	e21d      	b.n	80018ec <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014b6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014c0:	8a7b      	ldrh	r3, [r7, #18]
 80014c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d033      	beq.n	8001532 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4413      	add	r3, r2
 80014de:	3306      	adds	r3, #6
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001508:	b29b      	uxth	r3, r3
 800150a:	f002 fbce 	bl	8003caa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b29a      	uxth	r2, r3
 8001516:	f640 738f 	movw	r3, #3983	; 0xf8f
 800151a:	4013      	ands	r3, r2
 800151c:	b29c      	uxth	r4, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001526:	b292      	uxth	r2, r2
 8001528:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f004 f980 	bl	8005830 <HAL_PCD_SetupStageCallback>
 8001530:	e1dc      	b.n	80018ec <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001532:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f280 81d8 	bge.w	80018ec <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	b29a      	uxth	r2, r3
 8001544:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001548:	4013      	ands	r3, r2
 800154a:	b29c      	uxth	r4, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001554:	b292      	uxth	r2, r2
 8001556:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001560:	b29b      	uxth	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	3306      	adds	r3, #6
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	4413      	add	r3, r2
 8001576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d019      	beq.n	80015c0 <PCD_EP_ISR_Handler+0x1e4>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d015      	beq.n	80015c0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6959      	ldr	r1, [r3, #20]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f002 fb80 	bl	8003caa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	441a      	add	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80015b8:	2100      	movs	r1, #0
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f004 f94a 	bl	8005854 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	461c      	mov	r4, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	441c      	add	r4, r3
 80015d2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80015d6:	461c      	mov	r4, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10e      	bne.n	80015fe <PCD_EP_ISR_Handler+0x222>
 80015e0:	8823      	ldrh	r3, [r4, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	8023      	strh	r3, [r4, #0]
 80015ec:	8823      	ldrh	r3, [r4, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	8023      	strh	r3, [r4, #0]
 80015fc:	e02d      	b.n	800165a <PCD_EP_ISR_Handler+0x27e>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b3e      	cmp	r3, #62	; 0x3e
 8001604:	d812      	bhi.n	800162c <PCD_EP_ISR_Handler+0x250>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <PCD_EP_ISR_Handler+0x244>
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	3301      	adds	r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	b29b      	uxth	r3, r3
 8001624:	029b      	lsls	r3, r3, #10
 8001626:	b29b      	uxth	r3, r3
 8001628:	8023      	strh	r3, [r4, #0]
 800162a:	e016      	b.n	800165a <PCD_EP_ISR_Handler+0x27e>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	095b      	lsrs	r3, r3, #5
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <PCD_EP_ISR_Handler+0x26a>
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	3b01      	subs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	b29b      	uxth	r3, r3
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	b29b      	uxth	r3, r3
 800164e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001656:	b29b      	uxth	r3, r3
 8001658:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800166a:	b29c      	uxth	r4, r3
 800166c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001670:	b29c      	uxth	r4, r3
 8001672:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001676:	b29c      	uxth	r4, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4ba2      	ldr	r3, [pc, #648]	; (8001908 <PCD_EP_ISR_Handler+0x52c>)
 800167e:	4323      	orrs	r3, r4
 8001680:	b29b      	uxth	r3, r3
 8001682:	8013      	strh	r3, [r2, #0]
 8001684:	e132      	b.n	80018ec <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	7d7b      	ldrb	r3, [r7, #21]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001696:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f280 80d1 	bge.w	8001842 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	7d7b      	ldrb	r3, [r7, #21]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016b4:	4013      	ands	r3, r2
 80016b6:	b29c      	uxth	r4, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	7d7b      	ldrb	r3, [r7, #21]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80016c8:	b292      	uxth	r2, r2
 80016ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016cc:	7d7b      	ldrb	r3, [r7, #21]
 80016ce:	015b      	lsls	r3, r3, #5
 80016d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	7b1b      	ldrb	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d121      	bne.n	8001726 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4413      	add	r3, r2
 80016f6:	3306      	adds	r3, #6
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800170a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800170c:	8bfb      	ldrh	r3, [r7, #30]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d072      	beq.n	80017f8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6959      	ldr	r1, [r3, #20]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	88da      	ldrh	r2, [r3, #6]
 800171e:	8bfb      	ldrh	r3, [r7, #30]
 8001720:	f002 fac3 	bl	8003caa <USB_ReadPMA>
 8001724:	e068      	b.n	80017f8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d021      	beq.n	8001784 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001748:	b29b      	uxth	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4413      	add	r3, r2
 8001754:	3302      	adds	r3, #2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001768:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800176a:	8bfb      	ldrh	r3, [r7, #30]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d02a      	beq.n	80017c6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6959      	ldr	r1, [r3, #20]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	891a      	ldrh	r2, [r3, #8]
 800177c:	8bfb      	ldrh	r3, [r7, #30]
 800177e:	f002 fa94 	bl	8003caa <USB_ReadPMA>
 8001782:	e020      	b.n	80017c6 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800178c:	b29b      	uxth	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	3306      	adds	r3, #6
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017ac:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80017ae:	8bfb      	ldrh	r3, [r7, #30]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6959      	ldr	r1, [r3, #20]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	895a      	ldrh	r2, [r3, #10]
 80017c0:	8bfb      	ldrh	r3, [r7, #30]
 80017c2:	f002 fa72 	bl	8003caa <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e0:	b29c      	uxth	r4, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	441a      	add	r2, r3
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <PCD_EP_ISR_Handler+0x530>)
 80017f2:	4323      	orrs	r3, r4
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	69da      	ldr	r2, [r3, #28]
 80017fc:	8bfb      	ldrh	r3, [r7, #30]
 80017fe:	441a      	add	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	8bfb      	ldrh	r3, [r7, #30]
 800180a:	441a      	add	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <PCD_EP_ISR_Handler+0x446>
 8001818:	8bfa      	ldrh	r2, [r7, #30]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	429a      	cmp	r2, r3
 8001820:	d206      	bcs.n	8001830 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4619      	mov	r1, r3
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f004 f813 	bl	8005854 <HAL_PCD_DataOutStageCallback>
 800182e:	e008      	b.n	8001842 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	7819      	ldrb	r1, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fc9d 	bl	800117c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001842:	8a7b      	ldrh	r3, [r7, #18]
 8001844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001848:	2b00      	cmp	r3, #0
 800184a:	d04f      	beq.n	80018ec <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800184c:	7d7b      	ldrb	r3, [r7, #21]
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	3328      	adds	r3, #40	; 0x28
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	7d7b      	ldrb	r3, [r7, #21]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800186c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001870:	b29c      	uxth	r4, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	7d7b      	ldrb	r3, [r7, #21]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	441a      	add	r2, r3
 800187e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001886:	b29b      	uxth	r3, r3
 8001888:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001892:	b29b      	uxth	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	3302      	adds	r3, #2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	441a      	add	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d106      	bne.n	80018da <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f003 ffd6 	bl	8005884 <HAL_PCD_DataInStageCallback>
 80018d8:	e008      	b.n	80018ec <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	7819      	ldrb	r1, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fc96 	bl	8001218 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f6ff ad74 	blt.w	80013e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3724      	adds	r7, #36	; 0x24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}
 8001908:	ffff8080 	.word	0xffff8080
 800190c:	ffff80c0 	.word	0xffff80c0

08001910 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	817b      	strh	r3, [r7, #10]
 800191e:	4613      	mov	r3, r2
 8001920:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001922:	897b      	ldrh	r3, [r7, #10]
 8001924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800192e:	897b      	ldrh	r3, [r7, #10]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	015b      	lsls	r3, r3, #5
 8001936:	3328      	adds	r3, #40	; 0x28
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e006      	b.n	800194e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001940:	897b      	ldrh	r3, [r7, #10]
 8001942:	015b      	lsls	r3, r3, #5
 8001944:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800194e:	893b      	ldrh	r3, [r7, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d107      	bne.n	8001964 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2200      	movs	r2, #0
 8001958:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	b29a      	uxth	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	80da      	strh	r2, [r3, #6]
 8001962:	e00b      	b.n	800197c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2201      	movs	r2, #1
 8001968:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	b29a      	uxth	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0c1b      	lsrs	r3, r3, #16
 8001976:	b29a      	uxth	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e26c      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a8:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b4:	4b8f      	ldr	r3, [pc, #572]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
 80019c0:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b89      	ldr	r3, [pc, #548]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d06c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d168      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e246      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x76>
 80019f0:	4b80      	ldr	r3, [pc, #512]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7f      	ldr	r2, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e02e      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x98>
 8001a06:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xbc>
 8001a2a:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a44:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6a      	ldr	r2, [pc, #424]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a67      	ldr	r2, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7fe fe24 	bl	80006b0 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7fe fe20 	bl	80006b0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1fa      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe4>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7fe fe10 	bl	80006b0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7fe fe0c 	bl	80006b0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1e6      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x10c>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1ba      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4939      	ldr	r1, [pc, #228]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7fe fdc5 	bl	80006b0 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7fe fdc1 	bl	80006b0 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e19b      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4927      	ldr	r1, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7fe fda4 	bl	80006b0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7fe fda0 	bl	80006b0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e17a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7fe fd84 	bl	80006b0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7fe fd80 	bl	80006b0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e15a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 faa8 	bl	8002120 <RCC_Delay>
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7fe fd6a 	bl	80006b0 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	e00f      	b.n	8001c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7fe fd66 	bl	80006b0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e140      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	42420000 	.word	0x42420000
 8001bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e9      	bne.n	8001be0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a6 	beq.w	8001d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b97      	ldr	r3, [pc, #604]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10d      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a93      	ldr	r2, [pc, #588]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b91      	ldr	r3, [pc, #580]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a8a      	ldr	r2, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7fe fd27 	bl	80006b0 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7fe fd23 	bl	80006b0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	; 0x64
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0fd      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x312>
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e02d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x334>
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	e01c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x356>
 8001cc4:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a6c      	ldr	r2, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a69      	ldr	r2, [pc, #420]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a66      	ldr	r2, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b64      	ldr	r3, [pc, #400]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a63      	ldr	r2, [pc, #396]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7fe fcd7 	bl	80006b0 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7fe fcd3 	bl	80006b0 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0ab      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ee      	beq.n	8001d06 <HAL_RCC_OscConfig+0x37e>
 8001d28:	e014      	b.n	8001d54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7fe fcc1 	bl	80006b0 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7fe fcbd 	bl	80006b0 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e095      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8081 	beq.w	8001e72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d061      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d146      	bne.n	8001e12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7fe fc91 	bl	80006b0 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe fc8d 	bl	80006b0 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e067      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	492d      	ldr	r1, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a19      	ldr	r1, [r3, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7fe fc61 	bl	80006b0 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7fe fc5d 	bl	80006b0 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e037      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46a>
 8001e10:	e02f      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7fe fc4a 	bl	80006b0 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe fc46 	bl	80006b0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e020      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x498>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42420060 	.word	0x42420060

08001e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0d0      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4965      	ldr	r1, [pc, #404]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d040      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d115      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e073      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06b      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fb9a 	bl	80006b0 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7fe fb96 	bl	80006b0 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e053      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d210      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4922      	ldr	r1, [pc, #136]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002016:	f000 f821 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201a:	4601      	mov	r1, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	fa21 f303 	lsr.w	r3, r1, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1cc>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1d0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe faf8 	bl	800062c <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	08005ee0 	.word	0x08005ee0
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b490      	push	{r4, r7}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002064:	1d3c      	adds	r4, r7, #4
 8002066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb4>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d002      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x40>
 8002096:	2b08      	cmp	r3, #8
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x46>
 800209a:	e02d      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 800209e:	623b      	str	r3, [r7, #32]
      break;
 80020a0:	e02d      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ae:	4413      	add	r3, r2
 80020b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0c5b      	lsrs	r3, r3, #17
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ce:	4413      	add	r3, r2
 80020d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020da:	fb02 f203 	mul.w	r2, r2, r3
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e004      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	623b      	str	r3, [r7, #32]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fa:	623b      	str	r3, [r7, #32]
      break;
 80020fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bc90      	pop	{r4, r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	08005e84 	.word	0x08005e84
 8002110:	08005e94 	.word	0x08005e94
 8002114:	40021000 	.word	0x40021000
 8002118:	007a1200 	.word	0x007a1200
 800211c:	003d0900 	.word	0x003d0900

08002120 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <RCC_Delay+0x34>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <RCC_Delay+0x38>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0a5b      	lsrs	r3, r3, #9
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800213c:	bf00      	nop
  }
  while (Delay --);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	60fa      	str	r2, [r7, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f9      	bne.n	800213c <RCC_Delay+0x1c>
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000000 	.word	0x20000000
 8002158:	10624dd3 	.word	0x10624dd3

0800215c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d07d      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217c:	4b4f      	ldr	r3, [pc, #316]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10d      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	61d3      	str	r3, [r2, #28]
 8002194:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d118      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b0:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a42      	ldr	r2, [pc, #264]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021bc:	f7fe fa78 	bl	80006b0 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	e008      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c4:	f7fe fa74 	bl	80006b0 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e06d      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02e      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d027      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002200:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002208:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800220a:	4b2e      	ldr	r3, [pc, #184]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002216:	4a29      	ldr	r2, [pc, #164]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d014      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7fe fa43 	bl	80006b0 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe fa3f 	bl	80006b0 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	; 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e036      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ee      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4917      	ldr	r1, [pc, #92]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	4313      	orrs	r3, r2
 8002260:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	4a13      	ldr	r2, [pc, #76]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002272:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	490b      	ldr	r1, [pc, #44]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4904      	ldr	r1, [pc, #16]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40007000 	.word	0x40007000
 80022c4:	42420440 	.word	0x42420440

080022c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e053      	b.n	8002382 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d106      	bne.n	80022fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7fe f87b 	bl	80003f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002310:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	ea42 0103 	orr.w	r1, r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	0c1a      	lsrs	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f002 0204 	and.w	r2, r2, #4
 8002360:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002370:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b088      	sub	sp, #32
 800238e:	af02      	add	r7, sp, #8
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	4613      	mov	r3, r2
 8002398:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023a6:	d112      	bne.n	80023ce <HAL_SPI_Receive+0x44>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10e      	bne.n	80023ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2204      	movs	r2, #4
 80023b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f8e9 	bl	800259c <HAL_SPI_TransmitReceive>
 80023ca:	4603      	mov	r3, r0
 80023cc:	e0e2      	b.n	8002594 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_SPI_Receive+0x52>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0db      	b.n	8002594 <HAL_SPI_Receive+0x20a>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023e4:	f7fe f964 	bl	80006b0 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d002      	beq.n	80023fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
 80023f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023fa:	e0c2      	b.n	8002582 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_SPI_Receive+0x7e>
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800240c:	e0b9      	b.n	8002582 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2204      	movs	r2, #4
 8002412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	88fa      	ldrh	r2, [r7, #6]
 8002426:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	88fa      	ldrh	r2, [r7, #6]
 800242c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002454:	d107      	bne.n	8002466 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d007      	beq.n	8002484 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d162      	bne.n	8002552 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800248c:	e02e      	b.n	80024ec <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d115      	bne.n	80024c8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f103 020c 	add.w	r2, r3, #12
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024c6:	e011      	b.n	80024ec <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024c8:	f7fe f8f2 	bl	80006b0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d803      	bhi.n	80024e0 <HAL_SPI_Receive+0x156>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d102      	bne.n	80024e6 <HAL_SPI_Receive+0x15c>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d102      	bne.n	80024ec <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024ea:	e04a      	b.n	8002582 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1cb      	bne.n	800248e <HAL_SPI_Receive+0x104>
 80024f6:	e031      	b.n	800255c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d113      	bne.n	800252e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	b292      	uxth	r2, r2
 8002512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	1c9a      	adds	r2, r3, #2
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800252c:	e011      	b.n	8002552 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252e:	f7fe f8bf 	bl	80006b0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d803      	bhi.n	8002546 <HAL_SPI_Receive+0x1bc>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d102      	bne.n	800254c <HAL_SPI_Receive+0x1c2>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002550:	e017      	b.n	8002582 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1cd      	bne.n	80024f8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa27 	bl	80029b4 <SPI_EndRxTransaction>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
 800257e:	e000      	b.n	8002582 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002580:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002592:	7dfb      	ldrb	r3, [r7, #23]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025aa:	2301      	movs	r3, #1
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x26>
 80025be:	2302      	movs	r3, #2
 80025c0:	e18a      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x33c>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025ca:	f7fe f871 	bl	80006b0 <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d00f      	beq.n	800260c <HAL_SPI_TransmitReceive+0x70>
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f2:	d107      	bne.n	8002604 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <HAL_SPI_TransmitReceive+0x68>
 80025fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002600:	2b04      	cmp	r3, #4
 8002602:	d003      	beq.n	800260c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002604:	2302      	movs	r3, #2
 8002606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800260a:	e15b      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_SPI_TransmitReceive+0x82>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_SPI_TransmitReceive+0x82>
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d103      	bne.n	8002626 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002624:	e14e      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b04      	cmp	r3, #4
 8002630:	d003      	beq.n	800263a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2205      	movs	r2, #5
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	887a      	ldrh	r2, [r7, #2]
 800264a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	887a      	ldrh	r2, [r7, #2]
 8002662:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d007      	beq.n	800268e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002696:	d178      	bne.n	800278a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x10a>
 80026a0:	8b7b      	ldrh	r3, [r7, #26]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d166      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	881a      	ldrh	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	1c9a      	adds	r2, r3, #2
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ca:	e053      	b.n	8002774 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d11b      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x176>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x176>
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d113      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	881a      	ldrh	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	1c9a      	adds	r2, r3, #2
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d119      	bne.n	8002754 <HAL_SPI_TransmitReceive+0x1b8>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d014      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	b292      	uxth	r2, r2
 8002736:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	1c9a      	adds	r2, r3, #2
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002750:	2301      	movs	r3, #1
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002754:	f7fd ffac 	bl	80006b0 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002760:	429a      	cmp	r2, r3
 8002762:	d807      	bhi.n	8002774 <HAL_SPI_TransmitReceive+0x1d8>
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d003      	beq.n	8002774 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002772:	e0a7      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1a6      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x130>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1a1      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x130>
 8002788:	e07c      	b.n	8002884 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x1fc>
 8002792:	8b7b      	ldrh	r3, [r7, #26]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d16b      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	7812      	ldrb	r2, [r2, #0]
 80027a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027be:	e057      	b.n	8002870 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d11c      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x26c>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d017      	beq.n	8002808 <HAL_SPI_TransmitReceive+0x26c>
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d114      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d119      	bne.n	800284a <HAL_SPI_TransmitReceive+0x2ae>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d014      	beq.n	800284a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002846:	2301      	movs	r3, #1
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800284a:	f7fd ff31 	bl	80006b0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002856:	429a      	cmp	r2, r3
 8002858:	d803      	bhi.n	8002862 <HAL_SPI_TransmitReceive+0x2c6>
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d102      	bne.n	8002868 <HAL_SPI_TransmitReceive+0x2cc>
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800286e:	e029      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1a2      	bne.n	80027c0 <HAL_SPI_TransmitReceive+0x224>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d19d      	bne.n	80027c0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f8e5 	bl	8002a58 <SPI_EndRxTxTransaction>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028a0:	e010      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10b      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	e000      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3730      	adds	r7, #48	; 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f0:	e04c      	b.n	800298c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d048      	beq.n	800298c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028fa:	f7fd fed9 	bl	80006b0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d902      	bls.n	8002910 <SPI_WaitFlagStateUntilTimeout+0x30>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d13d      	bne.n	800298c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800291e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002928:	d111      	bne.n	800294e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002932:	d004      	beq.n	800293e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293c:	d107      	bne.n	800294e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800294c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002956:	d10f      	bne.n	8002978 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002976:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e00f      	b.n	80029ac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d1a3      	bne.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c8:	d111      	bne.n	80029ee <SPI_EndRxTransaction+0x3a>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d2:	d004      	beq.n	80029de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029dc:	d107      	bne.n	80029ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ec:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f6:	d117      	bne.n	8002a28 <SPI_EndRxTransaction+0x74>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	d112      	bne.n	8002a28 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff ff67 	bl	80028e0 <SPI_WaitFlagStateUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01a      	beq.n	8002a4e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e013      	b.n	8002a50 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f7ff ff54 	bl	80028e0 <SPI_WaitFlagStateUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f043 0220 	orr.w	r2, r3, #32
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e000      	b.n	8002a50 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff ff36 	bl	80028e0 <SPI_WaitFlagStateUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e000      	b.n	8002a8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a94:	b084      	sub	sp, #16
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	f107 0014 	add.w	r0, r7, #20
 8002aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	b004      	add	sp, #16
 8002ab2:	4770      	bx	lr

08002ab4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002abc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002ac0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	89fb      	ldrh	r3, [r7, #14]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002aea:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002aee:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b21a      	sxth	r2, r3
 8002afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	b21b      	sxth	r3, r3
 8002b02:	4013      	ands	r3, r2
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b32:	b084      	sub	sp, #16
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	f107 0014 	add.w	r0, r7, #20
 8002b40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ffa5 	bl	8002ab4 <USB_EnableGlobalInt>

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b76:	b004      	add	sp, #16
 8002b78:	4770      	bx	lr
	...

08002b7c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b7c:	b490      	push	{r4, r7}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	78db      	ldrb	r3, [r3, #3]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d819      	bhi.n	8002bde <USB_ActivateEndpoint+0x62>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <USB_ActivateEndpoint+0x34>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002bc1 	.word	0x08002bc1
 8002bb4:	08002bd5 	.word	0x08002bd5
 8002bb8:	08002be5 	.word	0x08002be5
 8002bbc:	08002bcb 	.word	0x08002bcb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002bc0:	89bb      	ldrh	r3, [r7, #12]
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc6:	81bb      	strh	r3, [r7, #12]
      break;
 8002bc8:	e00d      	b.n	8002be6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002bca:	89bb      	ldrh	r3, [r7, #12]
 8002bcc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002bd0:	81bb      	strh	r3, [r7, #12]
      break;
 8002bd2:	e008      	b.n	8002be6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002bd4:	89bb      	ldrh	r3, [r7, #12]
 8002bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bda:	81bb      	strh	r3, [r7, #12]
      break;
 8002bdc:	e003      	b.n	8002be6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
      break;
 8002be2:	e000      	b.n	8002be6 <USB_ActivateEndpoint+0x6a>
      break;
 8002be4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	441a      	add	r2, r3
 8002bf0:	89bb      	ldrh	r3, [r7, #12]
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4313      	orrs	r3, r2
 8002c26:	b29c      	uxth	r4, r3
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	441a      	add	r2, r3
 8002c32:	4b8a      	ldr	r3, [pc, #552]	; (8002e5c <USB_ActivateEndpoint+0x2e0>)
 8002c34:	4323      	orrs	r3, r4
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	7b1b      	ldrb	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 8112 	bne.w	8002e68 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d067      	beq.n	8002d1c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c4c:	687c      	ldr	r4, [r7, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	441c      	add	r4, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	4423      	add	r3, r4
 8002c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c64:	461c      	mov	r4, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	88db      	ldrh	r3, [r3, #6]
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29c      	uxth	r4, r3
 8002c82:	4623      	mov	r3, r4
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d014      	beq.n	8002cb6 <USB_ActivateEndpoint+0x13a>
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca2:	b29c      	uxth	r4, r3
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	4b6c      	ldr	r3, [pc, #432]	; (8002e60 <USB_ActivateEndpoint+0x2e4>)
 8002cb0:	4323      	orrs	r3, r4
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	78db      	ldrb	r3, [r3, #3]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d018      	beq.n	8002cf0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd4:	b29c      	uxth	r4, r3
 8002cd6:	f084 0320 	eor.w	r3, r4, #32
 8002cda:	b29c      	uxth	r4, r3
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	4b5d      	ldr	r3, [pc, #372]	; (8002e5c <USB_ActivateEndpoint+0x2e0>)
 8002ce8:	4323      	orrs	r3, r4
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	8013      	strh	r3, [r2, #0]
 8002cee:	e22b      	b.n	8003148 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d06:	b29c      	uxth	r4, r3
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	441a      	add	r2, r3
 8002d12:	4b52      	ldr	r3, [pc, #328]	; (8002e5c <USB_ActivateEndpoint+0x2e0>)
 8002d14:	4323      	orrs	r3, r4
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8013      	strh	r3, [r2, #0]
 8002d1a:	e215      	b.n	8003148 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d1c:	687c      	ldr	r4, [r7, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	441c      	add	r4, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	4423      	add	r3, r4
 8002d30:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002d34:	461c      	mov	r4, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	88db      	ldrh	r3, [r3, #6]
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d44:	687c      	ldr	r4, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	441c      	add	r4, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	4423      	add	r3, r4
 8002d58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10e      	bne.n	8002d84 <USB_ActivateEndpoint+0x208>
 8002d66:	8823      	ldrh	r3, [r4, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	8023      	strh	r3, [r4, #0]
 8002d72:	8823      	ldrh	r3, [r4, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	8023      	strh	r3, [r4, #0]
 8002d82:	e02d      	b.n	8002de0 <USB_ActivateEndpoint+0x264>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b3e      	cmp	r3, #62	; 0x3e
 8002d8a:	d812      	bhi.n	8002db2 <USB_ActivateEndpoint+0x236>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <USB_ActivateEndpoint+0x22a>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3301      	adds	r3, #1
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	029b      	lsls	r3, r3, #10
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8023      	strh	r3, [r4, #0]
 8002db0:	e016      	b.n	8002de0 <USB_ActivateEndpoint+0x264>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <USB_ActivateEndpoint+0x250>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	029b      	lsls	r3, r3, #10
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b29c      	uxth	r4, r3
 8002dee:	4623      	mov	r3, r4
 8002df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d014      	beq.n	8002e22 <USB_ActivateEndpoint+0x2a6>
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	b29c      	uxth	r4, r3
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	441a      	add	r2, r3
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <USB_ActivateEndpoint+0x2e8>)
 8002e1c:	4323      	orrs	r3, r4
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e38:	b29c      	uxth	r4, r3
 8002e3a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002e3e:	b29c      	uxth	r4, r3
 8002e40:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002e44:	b29c      	uxth	r4, r3
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	441a      	add	r2, r3
 8002e50:	4b02      	ldr	r3, [pc, #8]	; (8002e5c <USB_ActivateEndpoint+0x2e0>)
 8002e52:	4323      	orrs	r3, r4
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	8013      	strh	r3, [r2, #0]
 8002e58:	e176      	b.n	8003148 <USB_ActivateEndpoint+0x5cc>
 8002e5a:	bf00      	nop
 8002e5c:	ffff8080 	.word	0xffff8080
 8002e60:	ffff80c0 	.word	0xffff80c0
 8002e64:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7e:	b29c      	uxth	r4, r3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	441a      	add	r2, r3
 8002e8a:	4b96      	ldr	r3, [pc, #600]	; (80030e4 <USB_ActivateEndpoint+0x568>)
 8002e8c:	4323      	orrs	r3, r4
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002e92:	687c      	ldr	r4, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	441c      	add	r4, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	4423      	add	r3, r4
 8002ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eaa:	461c      	mov	r4, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	891b      	ldrh	r3, [r3, #8]
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	8023      	strh	r3, [r4, #0]
 8002eba:	687c      	ldr	r4, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	441c      	add	r4, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	4423      	add	r3, r4
 8002ece:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002ed2:	461c      	mov	r4, r3
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	895b      	ldrh	r3, [r3, #10]
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 8088 	bne.w	8002ffc <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	b29c      	uxth	r4, r3
 8002efa:	4623      	mov	r3, r4
 8002efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d014      	beq.n	8002f2e <USB_ActivateEndpoint+0x3b2>
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	b29c      	uxth	r4, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	4b70      	ldr	r3, [pc, #448]	; (80030e8 <USB_ActivateEndpoint+0x56c>)
 8002f28:	4323      	orrs	r3, r4
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29c      	uxth	r4, r3
 8002f3c:	4623      	mov	r3, r4
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d014      	beq.n	8002f70 <USB_ActivateEndpoint+0x3f4>
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	b29c      	uxth	r4, r3
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	441a      	add	r2, r3
 8002f68:	4b60      	ldr	r3, [pc, #384]	; (80030ec <USB_ActivateEndpoint+0x570>)
 8002f6a:	4323      	orrs	r3, r4
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	b29c      	uxth	r4, r3
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	441a      	add	r2, r3
 8002f92:	4b56      	ldr	r3, [pc, #344]	; (80030ec <USB_ActivateEndpoint+0x570>)
 8002f94:	4323      	orrs	r3, r4
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb0:	b29c      	uxth	r4, r3
 8002fb2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002fb6:	b29c      	uxth	r4, r3
 8002fb8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002fbc:	b29c      	uxth	r4, r3
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	441a      	add	r2, r3
 8002fc8:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <USB_ActivateEndpoint+0x574>)
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe6:	b29c      	uxth	r4, r3
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <USB_ActivateEndpoint+0x574>)
 8002ff4:	4323      	orrs	r3, r4
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	8013      	strh	r3, [r2, #0]
 8002ffa:	e0a5      	b.n	8003148 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29c      	uxth	r4, r3
 800300a:	4623      	mov	r3, r4
 800300c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d014      	beq.n	800303e <USB_ActivateEndpoint+0x4c2>
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	b29c      	uxth	r4, r3
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <USB_ActivateEndpoint+0x56c>)
 8003038:	4323      	orrs	r3, r4
 800303a:	b29b      	uxth	r3, r3
 800303c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	b29c      	uxth	r4, r3
 800304c:	4623      	mov	r3, r4
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d014      	beq.n	8003080 <USB_ActivateEndpoint+0x504>
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306c:	b29c      	uxth	r4, r3
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	441a      	add	r2, r3
 8003078:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <USB_ActivateEndpoint+0x570>)
 800307a:	4323      	orrs	r3, r4
 800307c:	b29b      	uxth	r3, r3
 800307e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	b29c      	uxth	r4, r3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	441a      	add	r2, r3
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <USB_ActivateEndpoint+0x56c>)
 80030a4:	4323      	orrs	r3, r4
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	78db      	ldrb	r3, [r3, #3]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d020      	beq.n	80030f4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c8:	b29c      	uxth	r4, r3
 80030ca:	f084 0320 	eor.w	r3, r4, #32
 80030ce:	b29c      	uxth	r4, r3
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <USB_ActivateEndpoint+0x574>)
 80030dc:	4323      	orrs	r3, r4
 80030de:	b29b      	uxth	r3, r3
 80030e0:	8013      	strh	r3, [r2, #0]
 80030e2:	e01c      	b.n	800311e <USB_ActivateEndpoint+0x5a2>
 80030e4:	ffff8180 	.word	0xffff8180
 80030e8:	ffffc080 	.word	0xffffc080
 80030ec:	ffff80c0 	.word	0xffff80c0
 80030f0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800310a:	b29c      	uxth	r4, r3
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <USB_ActivateEndpoint+0x5d8>)
 8003118:	4323      	orrs	r3, r4
 800311a:	b29b      	uxth	r3, r3
 800311c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003134:	b29c      	uxth	r4, r3
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	441a      	add	r2, r3
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <USB_ActivateEndpoint+0x5d8>)
 8003142:	4323      	orrs	r3, r4
 8003144:	b29b      	uxth	r3, r3
 8003146:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bc90      	pop	{r4, r7}
 8003152:	4770      	bx	lr
 8003154:	ffff8080 	.word	0xffff8080

08003158 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003158:	b490      	push	{r4, r7}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	7b1b      	ldrb	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d171      	bne.n	800324e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d036      	beq.n	80031e0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	b29c      	uxth	r4, r3
 8003180:	4623      	mov	r3, r4
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d014      	beq.n	80031b4 <USB_DeactivateEndpoint+0x5c>
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a0:	b29c      	uxth	r4, r3
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	441a      	add	r2, r3
 80031ac:	4b6b      	ldr	r3, [pc, #428]	; (800335c <USB_DeactivateEndpoint+0x204>)
 80031ae:	4323      	orrs	r3, r4
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ca:	b29c      	uxth	r4, r3
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	441a      	add	r2, r3
 80031d6:	4b62      	ldr	r3, [pc, #392]	; (8003360 <USB_DeactivateEndpoint+0x208>)
 80031d8:	4323      	orrs	r3, r4
 80031da:	b29b      	uxth	r3, r3
 80031dc:	8013      	strh	r3, [r2, #0]
 80031de:	e144      	b.n	800346a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29c      	uxth	r4, r3
 80031ee:	4623      	mov	r3, r4
 80031f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d014      	beq.n	8003222 <USB_DeactivateEndpoint+0xca>
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b29b      	uxth	r3, r3
 8003206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	b29c      	uxth	r4, r3
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	4b52      	ldr	r3, [pc, #328]	; (8003364 <USB_DeactivateEndpoint+0x20c>)
 800321c:	4323      	orrs	r3, r4
 800321e:	b29b      	uxth	r3, r3
 8003220:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003238:	b29c      	uxth	r4, r3
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	441a      	add	r2, r3
 8003244:	4b46      	ldr	r3, [pc, #280]	; (8003360 <USB_DeactivateEndpoint+0x208>)
 8003246:	4323      	orrs	r3, r4
 8003248:	b29b      	uxth	r3, r3
 800324a:	8013      	strh	r3, [r2, #0]
 800324c:	e10d      	b.n	800346a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	785b      	ldrb	r3, [r3, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 8088 	bne.w	8003368 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29c      	uxth	r4, r3
 8003266:	4623      	mov	r3, r4
 8003268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d014      	beq.n	800329a <USB_DeactivateEndpoint+0x142>
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	b29c      	uxth	r4, r3
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <USB_DeactivateEndpoint+0x20c>)
 8003294:	4323      	orrs	r3, r4
 8003296:	b29b      	uxth	r3, r3
 8003298:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29c      	uxth	r4, r3
 80032a8:	4623      	mov	r3, r4
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d014      	beq.n	80032dc <USB_DeactivateEndpoint+0x184>
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c8:	b29c      	uxth	r4, r3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	441a      	add	r2, r3
 80032d4:	4b21      	ldr	r3, [pc, #132]	; (800335c <USB_DeactivateEndpoint+0x204>)
 80032d6:	4323      	orrs	r3, r4
 80032d8:	b29b      	uxth	r3, r3
 80032da:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f2:	b29c      	uxth	r4, r3
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	441a      	add	r2, r3
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <USB_DeactivateEndpoint+0x204>)
 8003300:	4323      	orrs	r3, r4
 8003302:	b29b      	uxth	r3, r3
 8003304:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331c:	b29c      	uxth	r4, r3
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	441a      	add	r2, r3
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <USB_DeactivateEndpoint+0x208>)
 800332a:	4323      	orrs	r3, r4
 800332c:	b29b      	uxth	r3, r3
 800332e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003346:	b29c      	uxth	r4, r3
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	441a      	add	r2, r3
 8003352:	4b03      	ldr	r3, [pc, #12]	; (8003360 <USB_DeactivateEndpoint+0x208>)
 8003354:	4323      	orrs	r3, r4
 8003356:	b29b      	uxth	r3, r3
 8003358:	8013      	strh	r3, [r2, #0]
 800335a:	e086      	b.n	800346a <USB_DeactivateEndpoint+0x312>
 800335c:	ffff80c0 	.word	0xffff80c0
 8003360:	ffff8080 	.word	0xffff8080
 8003364:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29c      	uxth	r4, r3
 8003376:	4623      	mov	r3, r4
 8003378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d014      	beq.n	80033aa <USB_DeactivateEndpoint+0x252>
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	b29c      	uxth	r4, r3
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	4b35      	ldr	r3, [pc, #212]	; (8003478 <USB_DeactivateEndpoint+0x320>)
 80033a4:	4323      	orrs	r3, r4
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29c      	uxth	r4, r3
 80033b8:	4623      	mov	r3, r4
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d014      	beq.n	80033ec <USB_DeactivateEndpoint+0x294>
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d8:	b29c      	uxth	r4, r3
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	441a      	add	r2, r3
 80033e4:	4b25      	ldr	r3, [pc, #148]	; (800347c <USB_DeactivateEndpoint+0x324>)
 80033e6:	4323      	orrs	r3, r4
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	b29c      	uxth	r4, r3
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <USB_DeactivateEndpoint+0x320>)
 8003410:	4323      	orrs	r3, r4
 8003412:	b29b      	uxth	r3, r3
 8003414:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800342c:	b29c      	uxth	r4, r3
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	441a      	add	r2, r3
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <USB_DeactivateEndpoint+0x328>)
 800343a:	4323      	orrs	r3, r4
 800343c:	b29b      	uxth	r3, r3
 800343e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	b29c      	uxth	r4, r3
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	441a      	add	r2, r3
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <USB_DeactivateEndpoint+0x328>)
 8003464:	4323      	orrs	r3, r4
 8003466:	b29b      	uxth	r3, r3
 8003468:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bc90      	pop	{r4, r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	ffffc080 	.word	0xffffc080
 800347c:	ffff80c0 	.word	0xffff80c0
 8003480:	ffff8080 	.word	0xffff8080

08003484 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b08d      	sub	sp, #52	; 0x34
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	2b01      	cmp	r3, #1
 8003494:	f040 8160 	bne.w	8003758 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d909      	bls.n	80034b8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	1ad2      	subs	r2, r2, r3
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	619a      	str	r2, [r3, #24]
 80034b6:	e005      	b.n	80034c4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	7b1b      	ldrb	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d119      	bne.n	8003500 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6959      	ldr	r1, [r3, #20]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	88da      	ldrh	r2, [r3, #6]
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fba2 	bl	8003c22 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80034de:	687c      	ldr	r4, [r7, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	441c      	add	r4, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	4423      	add	r3, r4
 80034f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034f6:	461c      	mov	r4, r3
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8023      	strh	r3, [r4, #0]
 80034fe:	e10f      	b.n	8003720 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d065      	beq.n	80035e2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003516:	687c      	ldr	r4, [r7, #4]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	785b      	ldrb	r3, [r3, #1]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d148      	bne.n	80035b2 <USB_EPStartXfer+0x12e>
 8003520:	687c      	ldr	r4, [r7, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003528:	b29b      	uxth	r3, r3
 800352a:	441c      	add	r4, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	4423      	add	r3, r4
 8003534:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003538:	461c      	mov	r4, r3
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10e      	bne.n	800355e <USB_EPStartXfer+0xda>
 8003540:	8823      	ldrh	r3, [r4, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003548:	b29b      	uxth	r3, r3
 800354a:	8023      	strh	r3, [r4, #0]
 800354c:	8823      	ldrh	r3, [r4, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003558:	b29b      	uxth	r3, r3
 800355a:	8023      	strh	r3, [r4, #0]
 800355c:	e03d      	b.n	80035da <USB_EPStartXfer+0x156>
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	2b3e      	cmp	r3, #62	; 0x3e
 8003562:	d810      	bhi.n	8003586 <USB_EPStartXfer+0x102>
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <USB_EPStartXfer+0xf6>
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	3301      	adds	r3, #1
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	b29b      	uxth	r3, r3
 800357e:	029b      	lsls	r3, r3, #10
 8003580:	b29b      	uxth	r3, r3
 8003582:	8023      	strh	r3, [r4, #0]
 8003584:	e029      	b.n	80035da <USB_EPStartXfer+0x156>
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <USB_EPStartXfer+0x118>
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	3b01      	subs	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	b29b      	uxth	r3, r3
 80035a0:	029b      	lsls	r3, r3, #10
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	8023      	strh	r3, [r4, #0]
 80035b0:	e013      	b.n	80035da <USB_EPStartXfer+0x156>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	785b      	ldrb	r3, [r3, #1]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d10f      	bne.n	80035da <USB_EPStartXfer+0x156>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	441c      	add	r4, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	4423      	add	r3, r4
 80035cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	895b      	ldrh	r3, [r3, #10]
 80035de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80035e0:	e063      	b.n	80036aa <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d148      	bne.n	800367c <USB_EPStartXfer+0x1f8>
 80035ea:	687c      	ldr	r4, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	441c      	add	r4, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	4423      	add	r3, r4
 80035fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003602:	461c      	mov	r4, r3
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <USB_EPStartXfer+0x1a4>
 800360a:	8823      	ldrh	r3, [r4, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003612:	b29b      	uxth	r3, r3
 8003614:	8023      	strh	r3, [r4, #0]
 8003616:	8823      	ldrh	r3, [r4, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800361e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003622:	b29b      	uxth	r3, r3
 8003624:	8023      	strh	r3, [r4, #0]
 8003626:	e03d      	b.n	80036a4 <USB_EPStartXfer+0x220>
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	2b3e      	cmp	r3, #62	; 0x3e
 800362c:	d810      	bhi.n	8003650 <USB_EPStartXfer+0x1cc>
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <USB_EPStartXfer+0x1c0>
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	3301      	adds	r3, #1
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	b29b      	uxth	r3, r3
 8003648:	029b      	lsls	r3, r3, #10
 800364a:	b29b      	uxth	r3, r3
 800364c:	8023      	strh	r3, [r4, #0]
 800364e:	e029      	b.n	80036a4 <USB_EPStartXfer+0x220>
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <USB_EPStartXfer+0x1e2>
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	3b01      	subs	r3, #1
 8003664:	623b      	str	r3, [r7, #32]
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	b29b      	uxth	r3, r3
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	b29b      	uxth	r3, r3
 800366e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003676:	b29b      	uxth	r3, r3
 8003678:	8023      	strh	r3, [r4, #0]
 800367a:	e013      	b.n	80036a4 <USB_EPStartXfer+0x220>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d10f      	bne.n	80036a4 <USB_EPStartXfer+0x220>
 8003684:	687c      	ldr	r4, [r7, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800368c:	b29b      	uxth	r3, r3
 800368e:	441c      	add	r4, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	4423      	add	r3, r4
 8003698:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800369c:	461c      	mov	r4, r3
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	891b      	ldrh	r3, [r3, #8]
 80036a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6959      	ldr	r1, [r3, #20]
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fab4 	bl	8003c22 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d115      	bne.n	80036ee <USB_EPStartXfer+0x26a>
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d8:	b29c      	uxth	r4, r3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	441a      	add	r2, r3
 80036e4:	4b9a      	ldr	r3, [pc, #616]	; (8003950 <USB_EPStartXfer+0x4cc>)
 80036e6:	4323      	orrs	r3, r4
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	8013      	strh	r3, [r2, #0]
 80036ec:	e018      	b.n	8003720 <USB_EPStartXfer+0x29c>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	785b      	ldrb	r3, [r3, #1]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d114      	bne.n	8003720 <USB_EPStartXfer+0x29c>
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370c:	b29c      	uxth	r4, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	4b8e      	ldr	r3, [pc, #568]	; (8003954 <USB_EPStartXfer+0x4d0>)
 800371a:	4323      	orrs	r3, r4
 800371c:	b29b      	uxth	r3, r3
 800371e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003736:	b29c      	uxth	r4, r3
 8003738:	f084 0310 	eor.w	r3, r4, #16
 800373c:	b29c      	uxth	r4, r3
 800373e:	f084 0320 	eor.w	r3, r4, #32
 8003742:	b29c      	uxth	r4, r3
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	4b82      	ldr	r3, [pc, #520]	; (8003958 <USB_EPStartXfer+0x4d4>)
 8003750:	4323      	orrs	r3, r4
 8003752:	b29b      	uxth	r3, r3
 8003754:	8013      	strh	r3, [r2, #0]
 8003756:	e146      	b.n	80039e6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	429a      	cmp	r2, r3
 8003762:	d909      	bls.n	8003778 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	1ad2      	subs	r2, r2, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	619a      	str	r2, [r3, #24]
 8003776:	e005      	b.n	8003784 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	7b1b      	ldrb	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d148      	bne.n	800381e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800378c:	687c      	ldr	r4, [r7, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003794:	b29b      	uxth	r3, r3
 8003796:	441c      	add	r4, r3
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	4423      	add	r3, r4
 80037a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037a4:	461c      	mov	r4, r3
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10e      	bne.n	80037ca <USB_EPStartXfer+0x346>
 80037ac:	8823      	ldrh	r3, [r4, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	8023      	strh	r3, [r4, #0]
 80037b8:	8823      	ldrh	r3, [r4, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	8023      	strh	r3, [r4, #0]
 80037c8:	e0f2      	b.n	80039b0 <USB_EPStartXfer+0x52c>
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	2b3e      	cmp	r3, #62	; 0x3e
 80037ce:	d810      	bhi.n	80037f2 <USB_EPStartXfer+0x36e>
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <USB_EPStartXfer+0x362>
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	029b      	lsls	r3, r3, #10
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	8023      	strh	r3, [r4, #0]
 80037f0:	e0de      	b.n	80039b0 <USB_EPStartXfer+0x52c>
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <USB_EPStartXfer+0x384>
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3b01      	subs	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	b29b      	uxth	r3, r3
 800380c:	029b      	lsls	r3, r3, #10
 800380e:	b29b      	uxth	r3, r3
 8003810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003818:	b29b      	uxth	r3, r3
 800381a:	8023      	strh	r3, [r4, #0]
 800381c:	e0c8      	b.n	80039b0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	785b      	ldrb	r3, [r3, #1]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d148      	bne.n	80038b8 <USB_EPStartXfer+0x434>
 8003826:	687c      	ldr	r4, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800382e:	b29b      	uxth	r3, r3
 8003830:	441c      	add	r4, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	4423      	add	r3, r4
 800383a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800383e:	461c      	mov	r4, r3
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10e      	bne.n	8003864 <USB_EPStartXfer+0x3e0>
 8003846:	8823      	ldrh	r3, [r4, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800384e:	b29b      	uxth	r3, r3
 8003850:	8023      	strh	r3, [r4, #0]
 8003852:	8823      	ldrh	r3, [r4, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800385a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800385e:	b29b      	uxth	r3, r3
 8003860:	8023      	strh	r3, [r4, #0]
 8003862:	e03d      	b.n	80038e0 <USB_EPStartXfer+0x45c>
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	2b3e      	cmp	r3, #62	; 0x3e
 8003868:	d810      	bhi.n	800388c <USB_EPStartXfer+0x408>
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <USB_EPStartXfer+0x3fc>
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3301      	adds	r3, #1
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	b29b      	uxth	r3, r3
 8003884:	029b      	lsls	r3, r3, #10
 8003886:	b29b      	uxth	r3, r3
 8003888:	8023      	strh	r3, [r4, #0]
 800388a:	e029      	b.n	80038e0 <USB_EPStartXfer+0x45c>
 800388c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <USB_EPStartXfer+0x41e>
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	3b01      	subs	r3, #1
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	029b      	lsls	r3, r3, #10
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	8023      	strh	r3, [r4, #0]
 80038b6:	e013      	b.n	80038e0 <USB_EPStartXfer+0x45c>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d10f      	bne.n	80038e0 <USB_EPStartXfer+0x45c>
 80038c0:	687c      	ldr	r4, [r7, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	441c      	add	r4, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	4423      	add	r3, r4
 80038d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038d8:	461c      	mov	r4, r3
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	b29b      	uxth	r3, r3
 80038de:	8023      	strh	r3, [r4, #0]
 80038e0:	687c      	ldr	r4, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d14e      	bne.n	8003988 <USB_EPStartXfer+0x504>
 80038ea:	687c      	ldr	r4, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	441c      	add	r4, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	4423      	add	r3, r4
 80038fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003902:	461c      	mov	r4, r3
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10e      	bne.n	8003928 <USB_EPStartXfer+0x4a4>
 800390a:	8823      	ldrh	r3, [r4, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003912:	b29b      	uxth	r3, r3
 8003914:	8023      	strh	r3, [r4, #0]
 8003916:	8823      	ldrh	r3, [r4, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800391e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003922:	b29b      	uxth	r3, r3
 8003924:	8023      	strh	r3, [r4, #0]
 8003926:	e043      	b.n	80039b0 <USB_EPStartXfer+0x52c>
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	2b3e      	cmp	r3, #62	; 0x3e
 800392c:	d816      	bhi.n	800395c <USB_EPStartXfer+0x4d8>
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	085b      	lsrs	r3, r3, #1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <USB_EPStartXfer+0x4c0>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3301      	adds	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	b29b      	uxth	r3, r3
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	b29b      	uxth	r3, r3
 800394c:	8023      	strh	r3, [r4, #0]
 800394e:	e02f      	b.n	80039b0 <USB_EPStartXfer+0x52c>
 8003950:	ffff80c0 	.word	0xffff80c0
 8003954:	ffffc080 	.word	0xffffc080
 8003958:	ffff8080 	.word	0xffff8080
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <USB_EPStartXfer+0x4ee>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3b01      	subs	r3, #1
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	b29b      	uxth	r3, r3
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	b29b      	uxth	r3, r3
 800397a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800397e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003982:	b29b      	uxth	r3, r3
 8003984:	8023      	strh	r3, [r4, #0]
 8003986:	e013      	b.n	80039b0 <USB_EPStartXfer+0x52c>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10f      	bne.n	80039b0 <USB_EPStartXfer+0x52c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003996:	b29b      	uxth	r3, r3
 8003998:	441c      	add	r4, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4423      	add	r3, r4
 80039a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	b29c      	uxth	r4, r3
 80039c8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80039cc:	b29c      	uxth	r4, r3
 80039ce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80039d2:	b29c      	uxth	r4, r3
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <USB_EPStartXfer+0x56c>)
 80039e0:	4323      	orrs	r3, r4
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3734      	adds	r7, #52	; 0x34
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd90      	pop	{r4, r7, pc}
 80039f0:	ffff8080 	.word	0xffff8080

080039f4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039f4:	b490      	push	{r4, r7}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	785b      	ldrb	r3, [r3, #1]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d018      	beq.n	8003a38 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1c:	b29c      	uxth	r4, r3
 8003a1e:	f084 0310 	eor.w	r3, r4, #16
 8003a22:	b29c      	uxth	r4, r3
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <USB_EPSetStall+0x80>)
 8003a30:	4323      	orrs	r3, r4
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	8013      	strh	r3, [r2, #0]
 8003a36:	e017      	b.n	8003a68 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	b29c      	uxth	r4, r3
 8003a50:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003a54:	b29c      	uxth	r4, r3
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	441a      	add	r2, r3
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <USB_EPSetStall+0x80>)
 8003a62:	4323      	orrs	r3, r4
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc90      	pop	{r4, r7}
 8003a72:	4770      	bx	lr
 8003a74:	ffff8080 	.word	0xffff8080

08003a78 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a78:	b490      	push	{r4, r7}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	7b1b      	ldrb	r3, [r3, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d17d      	bne.n	8003b86 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d03d      	beq.n	8003b0e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29c      	uxth	r4, r3
 8003aa0:	4623      	mov	r3, r4
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d014      	beq.n	8003ad4 <USB_EPClearStall+0x5c>
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	b29c      	uxth	r4, r3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <USB_EPClearStall+0x11c>)
 8003ace:	4323      	orrs	r3, r4
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	78db      	ldrb	r3, [r3, #3]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d054      	beq.n	8003b86 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af2:	b29c      	uxth	r4, r3
 8003af4:	f084 0320 	eor.w	r3, r4, #32
 8003af8:	b29c      	uxth	r4, r3
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	441a      	add	r2, r3
 8003b04:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <USB_EPClearStall+0x120>)
 8003b06:	4323      	orrs	r3, r4
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	8013      	strh	r3, [r2, #0]
 8003b0c:	e03b      	b.n	8003b86 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	b29c      	uxth	r4, r3
 8003b1c:	4623      	mov	r3, r4
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d014      	beq.n	8003b50 <USB_EPClearStall+0xd8>
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3c:	b29c      	uxth	r4, r3
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	441a      	add	r2, r3
 8003b48:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <USB_EPClearStall+0x124>)
 8003b4a:	4323      	orrs	r3, r4
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	b29c      	uxth	r4, r3
 8003b68:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003b6c:	b29c      	uxth	r4, r3
 8003b6e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003b72:	b29c      	uxth	r4, r3
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	441a      	add	r2, r3
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <USB_EPClearStall+0x120>)
 8003b80:	4323      	orrs	r3, r4
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc90      	pop	{r4, r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	ffff80c0 	.word	0xffff80c0
 8003b98:	ffff8080 	.word	0xffff8080
 8003b9c:	ffffc080 	.word	0xffffc080

08003ba0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003c00:	68fb      	ldr	r3, [r7, #12]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b08d      	sub	sp, #52	; 0x34
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	461a      	mov	r2, r3
 8003c30:	460b      	mov	r3, r1
 8003c32:	80fb      	strh	r3, [r7, #6]
 8003c34:	4613      	mov	r3, r2
 8003c36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c38:	88bb      	ldrh	r3, [r7, #4]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	005a      	lsls	r2, r3, #1
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5a:	e01e      	b.n	8003c9a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	3301      	adds	r3, #1
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	3302      	adds	r3, #2
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	3302      	adds	r3, #2
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	3301      	adds	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	3b01      	subs	r3, #1
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1dd      	bne.n	8003c5c <USB_WritePMA+0x3a>
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	3734      	adds	r7, #52	; 0x34
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b08b      	sub	sp, #44	; 0x2c
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	460b      	mov	r3, r1
 8003cba:	80fb      	strh	r3, [r7, #6]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003cc0:	88bb      	ldrh	r3, [r7, #4]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	005a      	lsls	r2, r3, #1
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cdc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	e01b      	b.n	8003d1c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	3302      	adds	r3, #2
 8003cf0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	3302      	adds	r3, #2
 8003d14:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e0      	bne.n	8003ce4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003d22:	88bb      	ldrh	r3, [r7, #4]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	701a      	strb	r2, [r3, #0]
  }
}
 8003d3e:	bf00      	nop
 8003d40:	372c      	adds	r7, #44	; 0x2c
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	7c1b      	ldrb	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d115      	bne.n	8003d8c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d64:	2202      	movs	r2, #2
 8003d66:	2181      	movs	r1, #129	; 0x81
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f001 fe6c 	bl	8005a46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d78:	2202      	movs	r2, #2
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f001 fe62 	bl	8005a46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8003d8a:	e012      	b.n	8003db2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003d8c:	2340      	movs	r3, #64	; 0x40
 8003d8e:	2202      	movs	r2, #2
 8003d90:	2181      	movs	r1, #129	; 0x81
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f001 fe57 	bl	8005a46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003d9e:	2340      	movs	r3, #64	; 0x40
 8003da0:	2202      	movs	r2, #2
 8003da2:	2101      	movs	r1, #1
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f001 fe4e 	bl	8005a46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003db2:	2308      	movs	r3, #8
 8003db4:	2203      	movs	r2, #3
 8003db6:	2182      	movs	r1, #130	; 0x82
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f001 fe44 	bl	8005a46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003dc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003dc8:	f001 ff5e 	bl	8005c88 <USBD_static_malloc>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	e026      	b.n	8003e32 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003dea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7c1b      	ldrb	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e18:	2101      	movs	r1, #1
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f001 fefd 	bl	8005c1a <USBD_LL_PrepareReceive>
 8003e20:	e007      	b.n	8003e32 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e28:	2340      	movs	r3, #64	; 0x40
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f001 fef4 	bl	8005c1a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003e4c:	2181      	movs	r1, #129	; 0x81
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f001 fe1f 	bl	8005a92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f001 fe18 	bl	8005a92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003e6a:	2182      	movs	r1, #130	; 0x82
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f001 fe10 	bl	8005a92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00e      	beq.n	8003ea0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 ff04 	bl	8005ca0 <USBD_static_free>
    pdev->pClassData = NULL;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003eba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d039      	beq.n	8003f48 <USBD_CDC_Setup+0x9e>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d17c      	bne.n	8003fd2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	88db      	ldrh	r3, [r3, #6]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d029      	beq.n	8003f34 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b25b      	sxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da11      	bge.n	8003f0e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003ef6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	88d2      	ldrh	r2, [r2, #6]
 8003efc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003efe:	6939      	ldr	r1, [r7, #16]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	88db      	ldrh	r3, [r3, #6]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f001 f9f6 	bl	80052f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003f0c:	e068      	b.n	8003fe0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	785a      	ldrb	r2, [r3, #1]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	88db      	ldrh	r3, [r3, #6]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f24:	6939      	ldr	r1, [r7, #16]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	88db      	ldrh	r3, [r3, #6]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f001 fa11 	bl	8005354 <USBD_CtlPrepareRx>
      break;
 8003f32:	e055      	b.n	8003fe0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	7850      	ldrb	r0, [r2, #1]
 8003f40:	2200      	movs	r2, #0
 8003f42:	6839      	ldr	r1, [r7, #0]
 8003f44:	4798      	blx	r3
      break;
 8003f46:	e04b      	b.n	8003fe0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b0a      	cmp	r3, #10
 8003f4e:	d017      	beq.n	8003f80 <USBD_CDC_Setup+0xd6>
 8003f50:	2b0b      	cmp	r3, #11
 8003f52:	d029      	beq.n	8003fa8 <USBD_CDC_Setup+0xfe>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d133      	bne.n	8003fc0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d107      	bne.n	8003f72 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003f62:	f107 030c 	add.w	r3, r7, #12
 8003f66:	2202      	movs	r2, #2
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f001 f9c4 	bl	80052f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003f70:	e02e      	b.n	8003fd0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003f72:	6839      	ldr	r1, [r7, #0]
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f001 f955 	bl	8005224 <USBD_CtlError>
            ret = USBD_FAIL;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8003f7e:	e027      	b.n	8003fd0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d107      	bne.n	8003f9a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003f8a:	f107 030f 	add.w	r3, r7, #15
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 f9b0 	bl	80052f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003f98:	e01a      	b.n	8003fd0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003f9a:	6839      	ldr	r1, [r7, #0]
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f001 f941 	bl	8005224 <USBD_CtlError>
            ret = USBD_FAIL;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8003fa6:	e013      	b.n	8003fd0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d00d      	beq.n	8003fce <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003fb2:	6839      	ldr	r1, [r7, #0]
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f001 f935 	bl	8005224 <USBD_CtlError>
            ret = USBD_FAIL;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003fbe:	e006      	b.n	8003fce <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003fc0:	6839      	ldr	r1, [r7, #0]
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f001 f92e 	bl	8005224 <USBD_CtlError>
          ret = USBD_FAIL;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	75fb      	strb	r3, [r7, #23]
          break;
 8003fcc:	e000      	b.n	8003fd0 <USBD_CDC_Setup+0x126>
          break;
 8003fce:	bf00      	nop
      }
      break;
 8003fd0:	e006      	b.n	8003fe0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003fd2:	6839      	ldr	r1, [r7, #0]
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f001 f925 	bl	8005224 <USBD_CtlError>
      ret = USBD_FAIL;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fde:	bf00      	nop
  }

  return ret;
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ffc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004004:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d037      	beq.n	8004080 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	331c      	adds	r3, #28
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d026      	beq.n	8004074 <USBD_CDC_DataIn+0x8a>
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	331c      	adds	r3, #28
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	0152      	lsls	r2, r2, #5
 800403e:	440a      	add	r2, r1
 8004040:	3238      	adds	r2, #56	; 0x38
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	fbb3 f1f2 	udiv	r1, r3, r2
 8004048:	fb02 f201 	mul.w	r2, r2, r1
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d110      	bne.n	8004074 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	331c      	adds	r3, #28
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004066:	78f9      	ldrb	r1, [r7, #3]
 8004068:	2300      	movs	r3, #0
 800406a:	2200      	movs	r2, #0
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f001 fdb1 	bl	8005bd4 <USBD_LL_Transmit>
 8004072:	e003      	b.n	800407c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	460b      	mov	r3, r1
 8004094:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800409c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	4619      	mov	r1, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f001 fddc 	bl	8005c60 <USBD_LL_GetRxDataSize>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80040ce:	4611      	mov	r1, r2
 80040d0:	4798      	blx	r3

    return USBD_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040ee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d015      	beq.n	8004126 <USBD_CDC_EP0_RxReady+0x46>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004100:	2bff      	cmp	r3, #255	; 0xff
 8004102:	d010      	beq.n	8004126 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004112:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800411a:	b292      	uxth	r2, r2
 800411c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	22ff      	movs	r2, #255	; 0xff
 8004122:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2243      	movs	r2, #67	; 0x43
 800413c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800413e:	4b03      	ldr	r3, [pc, #12]	; (800414c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000094 	.word	0x20000094

08004150 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2243      	movs	r2, #67	; 0x43
 800415c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800415e:	4b03      	ldr	r3, [pc, #12]	; (800416c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000050 	.word	0x20000050

08004170 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2243      	movs	r2, #67	; 0x43
 800417c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800417e:	4b03      	ldr	r3, [pc, #12]	; (800418c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	200000d8 	.word	0x200000d8

08004190 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	220a      	movs	r2, #10
 800419c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800419e:	4b03      	ldr	r3, [pc, #12]	; (80041ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	2000000c 	.word	0x2000000c

080041b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80041ba:	2302      	movs	r3, #2
 80041bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	4613      	mov	r3, r2
 80041e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80041fa:	88fa      	ldrh	r2, [r7, #6]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800421e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004242:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01c      	beq.n	8004288 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004254:	2b00      	cmp	r3, #0
 8004256:	d115      	bne.n	8004284 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004276:	b29b      	uxth	r3, r3
 8004278:	2181      	movs	r1, #129	; 0x81
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f001 fcaa 	bl	8005bd4 <USBD_LL_Transmit>

      return USBD_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e002      	b.n	800428a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d017      	beq.n	80042dc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	7c1b      	ldrb	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042be:	2101      	movs	r1, #1
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f001 fcaa 	bl	8005c1a <USBD_LL_PrepareReceive>
 80042c6:	e007      	b.n	80042d8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042ce:	2340      	movs	r3, #64	; 0x40
 80042d0:	2101      	movs	r1, #1
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 fca1 	bl	8005c1a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	4613      	mov	r3, r2
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80042fa:	2302      	movs	r3, #2
 80042fc:	e01a      	b.n	8004334 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	79fa      	ldrb	r2, [r7, #7]
 800432a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f001 fb15 	bl	800595c <USBD_LL_Init>

  return USBD_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]
 800435c:	e001      	b.n	8004362 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800435e:	2302      	movs	r3, #2
 8004360:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004362:	7bfb      	ldrb	r3, [r7, #15]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f001 fb4a 	bl	8005a10 <USBD_LL_Start>

  return USBD_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80043a6:	2302      	movs	r3, #2
 80043a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00c      	beq.n	80043ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	4611      	mov	r1, r2
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	4611      	mov	r1, r2
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3

  return USBD_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fecb 	bl	80051ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004424:	461a      	mov	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	2b01      	cmp	r3, #1
 8004438:	d00c      	beq.n	8004454 <USBD_LL_SetupStage+0x56>
 800443a:	2b01      	cmp	r3, #1
 800443c:	d302      	bcc.n	8004444 <USBD_LL_SetupStage+0x46>
 800443e:	2b02      	cmp	r3, #2
 8004440:	d010      	beq.n	8004464 <USBD_LL_SetupStage+0x66>
 8004442:	e017      	b.n	8004474 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9cb 	bl	80047e8 <USBD_StdDevReq>
      break;
 8004452:	e01a      	b.n	800448a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fa2d 	bl	80048bc <USBD_StdItfReq>
      break;
 8004462:	e012      	b.n	800448a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800446a:	4619      	mov	r1, r3
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa6b 	bl	8004948 <USBD_StdEPReq>
      break;
 8004472:	e00a      	b.n	800448a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800447a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800447e:	b2db      	uxtb	r3, r3
 8004480:	4619      	mov	r1, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f001 fb24 	bl	8005ad0 <USBD_LL_StallEP>
      break;
 8004488:	bf00      	nop
  }

  return USBD_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	460b      	mov	r3, r1
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80044a2:	7afb      	ldrb	r3, [r7, #11]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d14b      	bne.n	8004540 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80044ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d134      	bne.n	8004524 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d919      	bls.n	80044fa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	1ad2      	subs	r2, r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80044dc:	429a      	cmp	r2, r3
 80044de:	d203      	bcs.n	80044e8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	e002      	b.n	80044ee <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 ff4c 	bl	8005390 <USBD_CtlContinueRx>
 80044f8:	e038      	b.n	800456c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800450c:	2b03      	cmp	r3, #3
 800450e:	d105      	bne.n	800451c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 ff49 	bl	80053b4 <USBD_CtlSendStatus>
 8004522:	e023      	b.n	800456c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800452a:	2b05      	cmp	r3, #5
 800452c:	d11e      	bne.n	800456c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004536:	2100      	movs	r1, #0
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f001 fac9 	bl	8005ad0 <USBD_LL_StallEP>
 800453e:	e015      	b.n	800456c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00d      	beq.n	8004568 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004552:	2b03      	cmp	r3, #3
 8004554:	d108      	bne.n	8004568 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	7afa      	ldrb	r2, [r7, #11]
 8004560:	4611      	mov	r1, r2
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	4798      	blx	r3
 8004566:	e001      	b.n	800456c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004568:	2302      	movs	r3, #2
 800456a:	e000      	b.n	800456e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b086      	sub	sp, #24
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	460b      	mov	r3, r1
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004584:	7afb      	ldrb	r3, [r7, #11]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d17f      	bne.n	800468a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3314      	adds	r3, #20
 800458e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004596:	2b02      	cmp	r3, #2
 8004598:	d15c      	bne.n	8004654 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d915      	bls.n	80045d2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 feb6 	bl	8005330 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80045c4:	2300      	movs	r3, #0
 80045c6:	2200      	movs	r2, #0
 80045c8:	2100      	movs	r1, #0
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f001 fb25 	bl	8005c1a <USBD_LL_PrepareReceive>
 80045d0:	e04e      	b.n	8004670 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	6912      	ldr	r2, [r2, #16]
 80045da:	fbb3 f1f2 	udiv	r1, r3, r2
 80045de:	fb02 f201 	mul.w	r2, r2, r1
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d11c      	bne.n	8004622 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d316      	bcc.n	8004622 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80045fe:	429a      	cmp	r2, r3
 8004600:	d20f      	bcs.n	8004622 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004602:	2200      	movs	r2, #0
 8004604:	2100      	movs	r1, #0
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fe92 	bl	8005330 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004614:	2300      	movs	r3, #0
 8004616:	2200      	movs	r2, #0
 8004618:	2100      	movs	r1, #0
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f001 fafd 	bl	8005c1a <USBD_LL_PrepareReceive>
 8004620:	e026      	b.n	8004670 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004634:	2b03      	cmp	r3, #3
 8004636:	d105      	bne.n	8004644 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004644:	2180      	movs	r1, #128	; 0x80
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f001 fa42 	bl	8005ad0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fec4 	bl	80053da <USBD_CtlReceiveStatus>
 8004652:	e00d      	b.n	8004670 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800465a:	2b04      	cmp	r3, #4
 800465c:	d004      	beq.n	8004668 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004664:	2b00      	cmp	r3, #0
 8004666:	d103      	bne.n	8004670 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004668:	2180      	movs	r1, #128	; 0x80
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f001 fa30 	bl	8005ad0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004676:	2b01      	cmp	r3, #1
 8004678:	d11d      	bne.n	80046b6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff fe83 	bl	8004386 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004688:	e015      	b.n	80046b6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800469c:	2b03      	cmp	r3, #3
 800469e:	d108      	bne.n	80046b2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	7afa      	ldrb	r2, [r7, #11]
 80046aa:	4611      	mov	r1, r2
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	4798      	blx	r3
 80046b0:	e001      	b.n	80046b6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80046b2:	2302      	movs	r3, #2
 80046b4:	e000      	b.n	80046b8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80046c8:	2340      	movs	r3, #64	; 0x40
 80046ca:	2200      	movs	r2, #0
 80046cc:	2100      	movs	r1, #0
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f001 f9b9 	bl	8005a46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2240      	movs	r2, #64	; 0x40
 80046e0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80046e4:	2340      	movs	r3, #64	; 0x40
 80046e6:	2200      	movs	r2, #0
 80046e8:	2180      	movs	r1, #128	; 0x80
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f001 f9ab 	bl	8005a46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2240      	movs	r2, #64	; 0x40
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6852      	ldr	r2, [r2, #4]
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	4611      	mov	r1, r2
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
  }

  return USBD_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2204      	movs	r2, #4
 8004778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004796:	2b04      	cmp	r3, #4
 8004798:	d105      	bne.n	80047a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d10b      	bne.n	80047dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d004      	beq.n	800480c <USBD_StdDevReq+0x24>
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d002      	beq.n	800480c <USBD_StdDevReq+0x24>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <USBD_StdDevReq+0x34>
 800480a:	e04c      	b.n	80048a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	6839      	ldr	r1, [r7, #0]
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
      break;
 800481a:	e049      	b.n	80048b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b09      	cmp	r3, #9
 8004822:	d83a      	bhi.n	800489a <USBD_StdDevReq+0xb2>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <USBD_StdDevReq+0x44>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	0800487d 	.word	0x0800487d
 8004830:	08004891 	.word	0x08004891
 8004834:	0800489b 	.word	0x0800489b
 8004838:	08004887 	.word	0x08004887
 800483c:	0800489b 	.word	0x0800489b
 8004840:	0800485f 	.word	0x0800485f
 8004844:	08004855 	.word	0x08004855
 8004848:	0800489b 	.word	0x0800489b
 800484c:	08004873 	.word	0x08004873
 8004850:	08004869 	.word	0x08004869
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9d4 	bl	8004c04 <USBD_GetDescriptor>
          break;
 800485c:	e022      	b.n	80048a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800485e:	6839      	ldr	r1, [r7, #0]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fb37 	bl	8004ed4 <USBD_SetAddress>
          break;
 8004866:	e01d      	b.n	80048a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fb74 	bl	8004f58 <USBD_SetConfig>
          break;
 8004870:	e018      	b.n	80048a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fbfd 	bl	8005074 <USBD_GetConfig>
          break;
 800487a:	e013      	b.n	80048a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800487c:	6839      	ldr	r1, [r7, #0]
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fc2c 	bl	80050dc <USBD_GetStatus>
          break;
 8004884:	e00e      	b.n	80048a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fc5a 	bl	8005142 <USBD_SetFeature>
          break;
 800488e:	e009      	b.n	80048a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004890:	6839      	ldr	r1, [r7, #0]
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fc69 	bl	800516a <USBD_ClrFeature>
          break;
 8004898:	e004      	b.n	80048a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800489a:	6839      	ldr	r1, [r7, #0]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fcc1 	bl	8005224 <USBD_CtlError>
          break;
 80048a2:	bf00      	nop
      }
      break;
 80048a4:	e004      	b.n	80048b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fcbb 	bl	8005224 <USBD_CtlError>
      break;
 80048ae:	bf00      	nop
  }

  return ret;
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop

080048bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d003      	beq.n	80048de <USBD_StdItfReq+0x22>
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d001      	beq.n	80048de <USBD_StdItfReq+0x22>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d12a      	bne.n	8004934 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048e4:	3b01      	subs	r3, #1
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d81d      	bhi.n	8004926 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	889b      	ldrh	r3, [r3, #4]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d813      	bhi.n	800491c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
 8004902:	4603      	mov	r3, r0
 8004904:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	88db      	ldrh	r3, [r3, #6]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d110      	bne.n	8004930 <USBD_StdItfReq+0x74>
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10d      	bne.n	8004930 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fd4d 	bl	80053b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800491a:	e009      	b.n	8004930 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fc80 	bl	8005224 <USBD_CtlError>
          break;
 8004924:	e004      	b.n	8004930 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004926:	6839      	ldr	r1, [r7, #0]
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fc7b 	bl	8005224 <USBD_CtlError>
          break;
 800492e:	e000      	b.n	8004932 <USBD_StdItfReq+0x76>
          break;
 8004930:	bf00      	nop
      }
      break;
 8004932:	e004      	b.n	800493e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fc74 	bl	8005224 <USBD_CtlError>
      break;
 800493c:	bf00      	nop
  }

  return USBD_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	889b      	ldrh	r3, [r3, #4]
 800495a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004964:	2b20      	cmp	r3, #32
 8004966:	d004      	beq.n	8004972 <USBD_StdEPReq+0x2a>
 8004968:	2b40      	cmp	r3, #64	; 0x40
 800496a:	d002      	beq.n	8004972 <USBD_StdEPReq+0x2a>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <USBD_StdEPReq+0x3a>
 8004970:	e13d      	b.n	8004bee <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	6839      	ldr	r1, [r7, #0]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
      break;
 8004980:	e13a      	b.n	8004bf8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800498a:	2b20      	cmp	r3, #32
 800498c:	d10a      	bne.n	80049a4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	6839      	ldr	r1, [r7, #0]
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4798      	blx	r3
 800499c:	4603      	mov	r3, r0
 800499e:	73fb      	strb	r3, [r7, #15]

        return ret;
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	e12a      	b.n	8004bfa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d03e      	beq.n	8004a2a <USBD_StdEPReq+0xe2>
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d002      	beq.n	80049b6 <USBD_StdEPReq+0x6e>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d070      	beq.n	8004a96 <USBD_StdEPReq+0x14e>
 80049b4:	e115      	b.n	8004be2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d002      	beq.n	80049c6 <USBD_StdEPReq+0x7e>
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d015      	beq.n	80049f0 <USBD_StdEPReq+0xa8>
 80049c4:	e02b      	b.n	8004a1e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049c6:	7bbb      	ldrb	r3, [r7, #14]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <USBD_StdEPReq+0x9e>
 80049cc:	7bbb      	ldrb	r3, [r7, #14]
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d009      	beq.n	80049e6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80049d2:	7bbb      	ldrb	r3, [r7, #14]
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f001 f87a 	bl	8005ad0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80049dc:	2180      	movs	r1, #128	; 0x80
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 f876 	bl	8005ad0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80049e4:	e020      	b.n	8004a28 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80049e6:	6839      	ldr	r1, [r7, #0]
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fc1b 	bl	8005224 <USBD_CtlError>
              break;
 80049ee:	e01b      	b.n	8004a28 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	885b      	ldrh	r3, [r3, #2]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10e      	bne.n	8004a16 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80049f8:	7bbb      	ldrb	r3, [r7, #14]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <USBD_StdEPReq+0xce>
 80049fe:	7bbb      	ldrb	r3, [r7, #14]
 8004a00:	2b80      	cmp	r3, #128	; 0x80
 8004a02:	d008      	beq.n	8004a16 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	88db      	ldrh	r3, [r3, #6]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004a0c:	7bbb      	ldrb	r3, [r7, #14]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f001 f85d 	bl	8005ad0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fccc 	bl	80053b4 <USBD_CtlSendStatus>

              break;
 8004a1c:	e004      	b.n	8004a28 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004a1e:	6839      	ldr	r1, [r7, #0]
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fbff 	bl	8005224 <USBD_CtlError>
              break;
 8004a26:	bf00      	nop
          }
          break;
 8004a28:	e0e0      	b.n	8004bec <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d002      	beq.n	8004a3a <USBD_StdEPReq+0xf2>
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d015      	beq.n	8004a64 <USBD_StdEPReq+0x11c>
 8004a38:	e026      	b.n	8004a88 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a3a:	7bbb      	ldrb	r3, [r7, #14]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00c      	beq.n	8004a5a <USBD_StdEPReq+0x112>
 8004a40:	7bbb      	ldrb	r3, [r7, #14]
 8004a42:	2b80      	cmp	r3, #128	; 0x80
 8004a44:	d009      	beq.n	8004a5a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004a46:	7bbb      	ldrb	r3, [r7, #14]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f001 f840 	bl	8005ad0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 f83c 	bl	8005ad0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004a58:	e01c      	b.n	8004a94 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004a5a:	6839      	ldr	r1, [r7, #0]
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fbe1 	bl	8005224 <USBD_CtlError>
              break;
 8004a62:	e017      	b.n	8004a94 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	885b      	ldrh	r3, [r3, #2]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d112      	bne.n	8004a92 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004a6c:	7bbb      	ldrb	r3, [r7, #14]
 8004a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d004      	beq.n	8004a80 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a76:	7bbb      	ldrb	r3, [r7, #14]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f001 f847 	bl	8005b0e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fc97 	bl	80053b4 <USBD_CtlSendStatus>
              }
              break;
 8004a86:	e004      	b.n	8004a92 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004a88:	6839      	ldr	r1, [r7, #0]
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fbca 	bl	8005224 <USBD_CtlError>
              break;
 8004a90:	e000      	b.n	8004a94 <USBD_StdEPReq+0x14c>
              break;
 8004a92:	bf00      	nop
          }
          break;
 8004a94:	e0aa      	b.n	8004bec <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d002      	beq.n	8004aa6 <USBD_StdEPReq+0x15e>
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d032      	beq.n	8004b0a <USBD_StdEPReq+0x1c2>
 8004aa4:	e097      	b.n	8004bd6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004aa6:	7bbb      	ldrb	r3, [r7, #14]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <USBD_StdEPReq+0x174>
 8004aac:	7bbb      	ldrb	r3, [r7, #14]
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d004      	beq.n	8004abc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004ab2:	6839      	ldr	r1, [r7, #0]
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fbb5 	bl	8005224 <USBD_CtlError>
                break;
 8004aba:	e091      	b.n	8004be0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	da0b      	bge.n	8004adc <USBD_StdEPReq+0x194>
 8004ac4:	7bbb      	ldrb	r3, [r7, #14]
 8004ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	3310      	adds	r3, #16
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3304      	adds	r3, #4
 8004ada:	e00b      	b.n	8004af4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004adc:	7bbb      	ldrb	r3, [r7, #14]
 8004ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	3304      	adds	r3, #4
 8004af4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2202      	movs	r2, #2
 8004b00:	4619      	mov	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fbf8 	bl	80052f8 <USBD_CtlSendData>
              break;
 8004b08:	e06a      	b.n	8004be0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004b0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	da11      	bge.n	8004b36 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004b12:	7bbb      	ldrb	r3, [r7, #14]
 8004b14:	f003 020f 	and.w	r2, r3, #15
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3318      	adds	r3, #24
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d117      	bne.n	8004b5c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fb78 	bl	8005224 <USBD_CtlError>
                  break;
 8004b34:	e054      	b.n	8004be0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004b36:	7bbb      	ldrb	r3, [r7, #14]
 8004b38:	f003 020f 	and.w	r2, r3, #15
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d104      	bne.n	8004b5c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004b52:	6839      	ldr	r1, [r7, #0]
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fb65 	bl	8005224 <USBD_CtlError>
                  break;
 8004b5a:	e041      	b.n	8004be0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	da0b      	bge.n	8004b7c <USBD_StdEPReq+0x234>
 8004b64:	7bbb      	ldrb	r3, [r7, #14]
 8004b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	3310      	adds	r3, #16
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	4413      	add	r3, r2
 8004b78:	3304      	adds	r3, #4
 8004b7a:	e00b      	b.n	8004b94 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004b7c:	7bbb      	ldrb	r3, [r7, #14]
 8004b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	3304      	adds	r3, #4
 8004b94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004b96:	7bbb      	ldrb	r3, [r7, #14]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <USBD_StdEPReq+0x25a>
 8004b9c:	7bbb      	ldrb	r3, [r7, #14]
 8004b9e:	2b80      	cmp	r3, #128	; 0x80
 8004ba0:	d103      	bne.n	8004baa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	e00e      	b.n	8004bc8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004baa:	7bbb      	ldrb	r3, [r7, #14]
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 ffcc 	bl	8005b4c <USBD_LL_IsStallEP>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e002      	b.n	8004bc8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fb92 	bl	80052f8 <USBD_CtlSendData>
              break;
 8004bd4:	e004      	b.n	8004be0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fb23 	bl	8005224 <USBD_CtlError>
              break;
 8004bde:	bf00      	nop
          }
          break;
 8004be0:	e004      	b.n	8004bec <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fb1d 	bl	8005224 <USBD_CtlError>
          break;
 8004bea:	bf00      	nop
      }
      break;
 8004bec:	e004      	b.n	8004bf8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004bee:	6839      	ldr	r1, [r7, #0]
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fb17 	bl	8005224 <USBD_CtlError>
      break;
 8004bf6:	bf00      	nop
  }

  return ret;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	885b      	ldrh	r3, [r3, #2]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	2b06      	cmp	r3, #6
 8004c26:	f200 8128 	bhi.w	8004e7a <USBD_GetDescriptor+0x276>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <USBD_GetDescriptor+0x2c>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c4d 	.word	0x08004c4d
 8004c34:	08004c65 	.word	0x08004c65
 8004c38:	08004ca5 	.word	0x08004ca5
 8004c3c:	08004e7b 	.word	0x08004e7b
 8004c40:	08004e7b 	.word	0x08004e7b
 8004c44:	08004e1b 	.word	0x08004e1b
 8004c48:	08004e47 	.word	0x08004e47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	7c12      	ldrb	r2, [r2, #16]
 8004c58:	f107 0108 	add.w	r1, r7, #8
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4798      	blx	r3
 8004c60:	60f8      	str	r0, [r7, #12]
      break;
 8004c62:	e112      	b.n	8004e8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	7c1b      	ldrb	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10d      	bne.n	8004c88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	f107 0208 	add.w	r2, r7, #8
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4798      	blx	r3
 8004c7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	2202      	movs	r2, #2
 8004c84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004c86:	e100      	b.n	8004e8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	f107 0208 	add.w	r2, r7, #8
 8004c94:	4610      	mov	r0, r2
 8004c96:	4798      	blx	r3
 8004c98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	701a      	strb	r2, [r3, #0]
      break;
 8004ca2:	e0f2      	b.n	8004e8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	885b      	ldrh	r3, [r3, #2]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	f200 80ac 	bhi.w	8004e08 <USBD_GetDescriptor+0x204>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <USBD_GetDescriptor+0xb4>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cd1 	.word	0x08004cd1
 8004cbc:	08004d05 	.word	0x08004d05
 8004cc0:	08004d39 	.word	0x08004d39
 8004cc4:	08004d6d 	.word	0x08004d6d
 8004cc8:	08004da1 	.word	0x08004da1
 8004ccc:	08004dd5 	.word	0x08004dd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00b      	beq.n	8004cf4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	7c12      	ldrb	r2, [r2, #16]
 8004ce8:	f107 0108 	add.w	r1, r7, #8
 8004cec:	4610      	mov	r0, r2
 8004cee:	4798      	blx	r3
 8004cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004cf2:	e091      	b.n	8004e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa94 	bl	8005224 <USBD_CtlError>
            err++;
 8004cfc:	7afb      	ldrb	r3, [r7, #11]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	72fb      	strb	r3, [r7, #11]
          break;
 8004d02:	e089      	b.n	8004e18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00b      	beq.n	8004d28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	7c12      	ldrb	r2, [r2, #16]
 8004d1c:	f107 0108 	add.w	r1, r7, #8
 8004d20:	4610      	mov	r0, r2
 8004d22:	4798      	blx	r3
 8004d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004d26:	e077      	b.n	8004e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa7a 	bl	8005224 <USBD_CtlError>
            err++;
 8004d30:	7afb      	ldrb	r3, [r7, #11]
 8004d32:	3301      	adds	r3, #1
 8004d34:	72fb      	strb	r3, [r7, #11]
          break;
 8004d36:	e06f      	b.n	8004e18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00b      	beq.n	8004d5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	7c12      	ldrb	r2, [r2, #16]
 8004d50:	f107 0108 	add.w	r1, r7, #8
 8004d54:	4610      	mov	r0, r2
 8004d56:	4798      	blx	r3
 8004d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004d5a:	e05d      	b.n	8004e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa60 	bl	8005224 <USBD_CtlError>
            err++;
 8004d64:	7afb      	ldrb	r3, [r7, #11]
 8004d66:	3301      	adds	r3, #1
 8004d68:	72fb      	strb	r3, [r7, #11]
          break;
 8004d6a:	e055      	b.n	8004e18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00b      	beq.n	8004d90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	7c12      	ldrb	r2, [r2, #16]
 8004d84:	f107 0108 	add.w	r1, r7, #8
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4798      	blx	r3
 8004d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004d8e:	e043      	b.n	8004e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fa46 	bl	8005224 <USBD_CtlError>
            err++;
 8004d98:	7afb      	ldrb	r3, [r7, #11]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8004d9e:	e03b      	b.n	8004e18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00b      	beq.n	8004dc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	7c12      	ldrb	r2, [r2, #16]
 8004db8:	f107 0108 	add.w	r1, r7, #8
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4798      	blx	r3
 8004dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004dc2:	e029      	b.n	8004e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa2c 	bl	8005224 <USBD_CtlError>
            err++;
 8004dcc:	7afb      	ldrb	r3, [r7, #11]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8004dd2:	e021      	b.n	8004e18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	7c12      	ldrb	r2, [r2, #16]
 8004dec:	f107 0108 	add.w	r1, r7, #8
 8004df0:	4610      	mov	r0, r2
 8004df2:	4798      	blx	r3
 8004df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004df6:	e00f      	b.n	8004e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fa12 	bl	8005224 <USBD_CtlError>
            err++;
 8004e00:	7afb      	ldrb	r3, [r7, #11]
 8004e02:	3301      	adds	r3, #1
 8004e04:	72fb      	strb	r3, [r7, #11]
          break;
 8004e06:	e007      	b.n	8004e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa0a 	bl	8005224 <USBD_CtlError>
          err++;
 8004e10:	7afb      	ldrb	r3, [r7, #11]
 8004e12:	3301      	adds	r3, #1
 8004e14:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004e16:	e038      	b.n	8004e8a <USBD_GetDescriptor+0x286>
 8004e18:	e037      	b.n	8004e8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	7c1b      	ldrb	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2a:	f107 0208 	add.w	r2, r7, #8
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4798      	blx	r3
 8004e32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004e34:	e029      	b.n	8004e8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f9f3 	bl	8005224 <USBD_CtlError>
        err++;
 8004e3e:	7afb      	ldrb	r3, [r7, #11]
 8004e40:	3301      	adds	r3, #1
 8004e42:	72fb      	strb	r3, [r7, #11]
      break;
 8004e44:	e021      	b.n	8004e8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7c1b      	ldrb	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10d      	bne.n	8004e6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f107 0208 	add.w	r2, r7, #8
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4798      	blx	r3
 8004e5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3301      	adds	r3, #1
 8004e64:	2207      	movs	r2, #7
 8004e66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004e68:	e00f      	b.n	8004e8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f9d9 	bl	8005224 <USBD_CtlError>
        err++;
 8004e72:	7afb      	ldrb	r3, [r7, #11]
 8004e74:	3301      	adds	r3, #1
 8004e76:	72fb      	strb	r3, [r7, #11]
      break;
 8004e78:	e007      	b.n	8004e8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f9d1 	bl	8005224 <USBD_CtlError>
      err++;
 8004e82:	7afb      	ldrb	r3, [r7, #11]
 8004e84:	3301      	adds	r3, #1
 8004e86:	72fb      	strb	r3, [r7, #11]
      break;
 8004e88:	bf00      	nop
  }

  if (err != 0U)
 8004e8a:	7afb      	ldrb	r3, [r7, #11]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d11c      	bne.n	8004eca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004e90:	893b      	ldrh	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d011      	beq.n	8004eba <USBD_GetDescriptor+0x2b6>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	88db      	ldrh	r3, [r3, #6]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	88da      	ldrh	r2, [r3, #6]
 8004ea2:	893b      	ldrh	r3, [r7, #8]
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	bf28      	it	cs
 8004ea8:	4613      	movcs	r3, r2
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004eae:	893b      	ldrh	r3, [r7, #8]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fa1f 	bl	80052f8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	88db      	ldrh	r3, [r3, #6]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa76 	bl	80053b4 <USBD_CtlSendStatus>
 8004ec8:	e000      	b.n	8004ecc <USBD_GetDescriptor+0x2c8>
    return;
 8004eca:	bf00      	nop
    }
  }
}
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop

08004ed4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	889b      	ldrh	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d130      	bne.n	8004f48 <USBD_SetAddress+0x74>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	88db      	ldrh	r3, [r3, #6]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d12c      	bne.n	8004f48 <USBD_SetAddress+0x74>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	885b      	ldrh	r3, [r3, #2]
 8004ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef4:	d828      	bhi.n	8004f48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	885b      	ldrh	r3, [r3, #2]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d104      	bne.n	8004f16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f988 	bl	8005224 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f14:	e01c      	b.n	8004f50 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	7bfa      	ldrb	r2, [r7, #15]
 8004f1a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fe37 	bl	8005b96 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fa43 	bl	80053b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f3c:	e008      	b.n	8004f50 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f46:	e003      	b.n	8004f50 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f96a 	bl	8005224 <USBD_CtlError>
  }
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	885b      	ldrh	r3, [r3, #2]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	4b41      	ldr	r3, [pc, #260]	; (8005070 <USBD_SetConfig+0x118>)
 8004f6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004f6c:	4b40      	ldr	r3, [pc, #256]	; (8005070 <USBD_SetConfig+0x118>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d904      	bls.n	8004f7e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f954 	bl	8005224 <USBD_CtlError>
 8004f7c:	e075      	b.n	800506a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d002      	beq.n	8004f8e <USBD_SetConfig+0x36>
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d023      	beq.n	8004fd4 <USBD_SetConfig+0x7c>
 8004f8c:	e062      	b.n	8005054 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004f8e:	4b38      	ldr	r3, [pc, #224]	; (8005070 <USBD_SetConfig+0x118>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01a      	beq.n	8004fcc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004f96:	4b36      	ldr	r3, [pc, #216]	; (8005070 <USBD_SetConfig+0x118>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004fa8:	4b31      	ldr	r3, [pc, #196]	; (8005070 <USBD_SetConfig+0x118>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff f9f3 	bl	800439a <USBD_SetClassConfig>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d104      	bne.n	8004fc4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f931 	bl	8005224 <USBD_CtlError>
            return;
 8004fc2:	e052      	b.n	800506a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f9f5 	bl	80053b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004fca:	e04e      	b.n	800506a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f9f1 	bl	80053b4 <USBD_CtlSendStatus>
        break;
 8004fd2:	e04a      	b.n	800506a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004fd4:	4b26      	ldr	r3, [pc, #152]	; (8005070 <USBD_SetConfig+0x118>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d112      	bne.n	8005002 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004fe4:	4b22      	ldr	r3, [pc, #136]	; (8005070 <USBD_SetConfig+0x118>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004fee:	4b20      	ldr	r3, [pc, #128]	; (8005070 <USBD_SetConfig+0x118>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff f9ef 	bl	80043d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f9da 	bl	80053b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005000:	e033      	b.n	800506a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005002:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <USBD_SetConfig+0x118>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	d01d      	beq.n	800504c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff f9dd 	bl	80043d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800501e:	4b14      	ldr	r3, [pc, #80]	; (8005070 <USBD_SetConfig+0x118>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005028:	4b11      	ldr	r3, [pc, #68]	; (8005070 <USBD_SetConfig+0x118>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff f9b3 	bl	800439a <USBD_SetClassConfig>
 8005034:	4603      	mov	r3, r0
 8005036:	2b02      	cmp	r3, #2
 8005038:	d104      	bne.n	8005044 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f8f1 	bl	8005224 <USBD_CtlError>
            return;
 8005042:	e012      	b.n	800506a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f9b5 	bl	80053b4 <USBD_CtlSendStatus>
        break;
 800504a:	e00e      	b.n	800506a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f9b1 	bl	80053b4 <USBD_CtlSendStatus>
        break;
 8005052:	e00a      	b.n	800506a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f8e4 	bl	8005224 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800505c:	4b04      	ldr	r3, [pc, #16]	; (8005070 <USBD_SetConfig+0x118>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff f9b8 	bl	80043d8 <USBD_ClrClassConfig>
        break;
 8005068:	bf00      	nop
    }
  }
}
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20000200 	.word	0x20000200

08005074 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	88db      	ldrh	r3, [r3, #6]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d004      	beq.n	8005090 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f8cb 	bl	8005224 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800508e:	e021      	b.n	80050d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005096:	2b01      	cmp	r3, #1
 8005098:	db17      	blt.n	80050ca <USBD_GetConfig+0x56>
 800509a:	2b02      	cmp	r3, #2
 800509c:	dd02      	ble.n	80050a4 <USBD_GetConfig+0x30>
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d00b      	beq.n	80050ba <USBD_GetConfig+0x46>
 80050a2:	e012      	b.n	80050ca <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3308      	adds	r3, #8
 80050ae:	2201      	movs	r2, #1
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f920 	bl	80052f8 <USBD_CtlSendData>
        break;
 80050b8:	e00c      	b.n	80050d4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	2201      	movs	r2, #1
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f918 	bl	80052f8 <USBD_CtlSendData>
        break;
 80050c8:	e004      	b.n	80050d4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80050ca:	6839      	ldr	r1, [r7, #0]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f8a9 	bl	8005224 <USBD_CtlError>
        break;
 80050d2:	bf00      	nop
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ec:	3b01      	subs	r3, #1
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d81e      	bhi.n	8005130 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	88db      	ldrh	r3, [r3, #6]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d004      	beq.n	8005104 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f891 	bl	8005224 <USBD_CtlError>
        break;
 8005102:	e01a      	b.n	800513a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f043 0202 	orr.w	r2, r3, #2
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	330c      	adds	r3, #12
 8005124:	2202      	movs	r2, #2
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f8e5 	bl	80052f8 <USBD_CtlSendData>
      break;
 800512e:	e004      	b.n	800513a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005130:	6839      	ldr	r1, [r7, #0]
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f876 	bl	8005224 <USBD_CtlError>
      break;
 8005138:	bf00      	nop
  }
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	885b      	ldrh	r3, [r3, #2]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d106      	bne.n	8005162 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f929 	bl	80053b4 <USBD_CtlSendStatus>
  }
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800517a:	3b01      	subs	r3, #1
 800517c:	2b02      	cmp	r3, #2
 800517e:	d80b      	bhi.n	8005198 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	885b      	ldrh	r3, [r3, #2]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d10c      	bne.n	80051a2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f90f 	bl	80053b4 <USBD_CtlSendStatus>
      }
      break;
 8005196:	e004      	b.n	80051a2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f842 	bl	8005224 <USBD_CtlError>
      break;
 80051a0:	e000      	b.n	80051a4 <USBD_ClrFeature+0x3a>
      break;
 80051a2:	bf00      	nop
  }
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	785a      	ldrb	r2, [r3, #1]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	3302      	adds	r3, #2
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	3303      	adds	r3, #3
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	021b      	lsls	r3, r3, #8
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4413      	add	r3, r2
 80051dc:	b29a      	uxth	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	3304      	adds	r3, #4
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	3305      	adds	r3, #5
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	4413      	add	r3, r2
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	3306      	adds	r3, #6
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	b29a      	uxth	r2, r3
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	3307      	adds	r3, #7
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	b29b      	uxth	r3, r3
 8005212:	4413      	add	r3, r2
 8005214:	b29a      	uxth	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	80da      	strh	r2, [r3, #6]

}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800522e:	2180      	movs	r1, #128	; 0x80
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fc4d 	bl	8005ad0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005236:	2100      	movs	r1, #0
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fc49 	bl	8005ad0 <USBD_LL_StallEP>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d032      	beq.n	80052c2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f834 	bl	80052ca <USBD_GetLen>
 8005262:	4603      	mov	r3, r0
 8005264:	3301      	adds	r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005270:	7dfb      	ldrb	r3, [r7, #23]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	75fa      	strb	r2, [r7, #23]
 8005276:	461a      	mov	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4413      	add	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	7812      	ldrb	r2, [r2, #0]
 8005280:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	75fa      	strb	r2, [r7, #23]
 8005288:	461a      	mov	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	2203      	movs	r2, #3
 8005290:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005292:	e012      	b.n	80052ba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	60fa      	str	r2, [r7, #12]
 800529a:	7dfa      	ldrb	r2, [r7, #23]
 800529c:	1c51      	adds	r1, r2, #1
 800529e:	75f9      	strb	r1, [r7, #23]
 80052a0:	4611      	mov	r1, r2
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	440a      	add	r2, r1
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	75fa      	strb	r2, [r7, #23]
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4413      	add	r3, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e8      	bne.n	8005294 <USBD_GetString+0x4e>
    }
  }
}
 80052c2:	bf00      	nop
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80052d6:	e005      	b.n	80052e4 <USBD_GetLen+0x1a>
  {
    len++;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	3301      	adds	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3301      	adds	r3, #1
 80052e2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1f5      	bne.n	80052d8 <USBD_GetLen+0xe>
  }

  return len;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2202      	movs	r2, #2
 800530a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005314:	88fa      	ldrh	r2, [r7, #6]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	2100      	movs	r1, #0
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fc57 	bl	8005bd4 <USBD_LL_Transmit>

  return USBD_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	2100      	movs	r1, #0
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fc45 	bl	8005bd4 <USBD_LL_Transmit>

  return USBD_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	4613      	mov	r3, r2
 8005360:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2203      	movs	r2, #3
 8005366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005372:	88fa      	ldrh	r2, [r7, #6]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	2100      	movs	r1, #0
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 fc4a 	bl	8005c1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	2100      	movs	r1, #0
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fc38 	bl	8005c1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2204      	movs	r2, #4
 80053c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80053c4:	2300      	movs	r3, #0
 80053c6:	2200      	movs	r2, #0
 80053c8:	2100      	movs	r1, #0
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fc02 	bl	8005bd4 <USBD_LL_Transmit>

  return USBD_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2205      	movs	r2, #5
 80053e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053ea:	2300      	movs	r3, #0
 80053ec:	2200      	movs	r2, #0
 80053ee:	2100      	movs	r1, #0
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fc12 	bl	8005c1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005404:	2200      	movs	r2, #0
 8005406:	4912      	ldr	r1, [pc, #72]	; (8005450 <MX_USB_DEVICE_Init+0x50>)
 8005408:	4812      	ldr	r0, [pc, #72]	; (8005454 <MX_USB_DEVICE_Init+0x54>)
 800540a:	f7fe ff6c 	bl	80042e6 <USBD_Init>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005414:	f7fa ffb4 	bl	8000380 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005418:	490f      	ldr	r1, [pc, #60]	; (8005458 <MX_USB_DEVICE_Init+0x58>)
 800541a:	480e      	ldr	r0, [pc, #56]	; (8005454 <MX_USB_DEVICE_Init+0x54>)
 800541c:	f7fe ff8e 	bl	800433c <USBD_RegisterClass>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005426:	f7fa ffab 	bl	8000380 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800542a:	490c      	ldr	r1, [pc, #48]	; (800545c <MX_USB_DEVICE_Init+0x5c>)
 800542c:	4809      	ldr	r0, [pc, #36]	; (8005454 <MX_USB_DEVICE_Init+0x54>)
 800542e:	f7fe febf 	bl	80041b0 <USBD_CDC_RegisterInterface>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005438:	f7fa ffa2 	bl	8000380 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800543c:	4805      	ldr	r0, [pc, #20]	; (8005454 <MX_USB_DEVICE_Init+0x54>)
 800543e:	f7fe ff96 	bl	800436e <USBD_Start>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005448:	f7fa ff9a 	bl	8000380 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800544c:	bf00      	nop
 800544e:	bd80      	pop	{r7, pc}
 8005450:	2000012c 	.word	0x2000012c
 8005454:	20000488 	.word	0x20000488
 8005458:	20000018 	.word	0x20000018
 800545c:	2000011c 	.word	0x2000011c

08005460 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005464:	2200      	movs	r2, #0
 8005466:	4905      	ldr	r1, [pc, #20]	; (800547c <CDC_Init_FS+0x1c>)
 8005468:	4805      	ldr	r0, [pc, #20]	; (8005480 <CDC_Init_FS+0x20>)
 800546a:	f7fe feb7 	bl	80041dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800546e:	4905      	ldr	r1, [pc, #20]	; (8005484 <CDC_Init_FS+0x24>)
 8005470:	4803      	ldr	r0, [pc, #12]	; (8005480 <CDC_Init_FS+0x20>)
 8005472:	f7fe fecc 	bl	800420e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005476:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005478:	4618      	mov	r0, r3
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000b34 	.word	0x20000b34
 8005480:	20000488 	.word	0x20000488
 8005484:	2000074c 	.word	0x2000074c

08005488 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800548c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800548e:	4618      	mov	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr
	...

08005498 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	6039      	str	r1, [r7, #0]
 80054a2:	71fb      	strb	r3, [r7, #7]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b23      	cmp	r3, #35	; 0x23
 80054ac:	d84a      	bhi.n	8005544 <CDC_Control_FS+0xac>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <CDC_Control_FS+0x1c>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	08005545 	.word	0x08005545
 80054b8:	08005545 	.word	0x08005545
 80054bc:	08005545 	.word	0x08005545
 80054c0:	08005545 	.word	0x08005545
 80054c4:	08005545 	.word	0x08005545
 80054c8:	08005545 	.word	0x08005545
 80054cc:	08005545 	.word	0x08005545
 80054d0:	08005545 	.word	0x08005545
 80054d4:	08005545 	.word	0x08005545
 80054d8:	08005545 	.word	0x08005545
 80054dc:	08005545 	.word	0x08005545
 80054e0:	08005545 	.word	0x08005545
 80054e4:	08005545 	.word	0x08005545
 80054e8:	08005545 	.word	0x08005545
 80054ec:	08005545 	.word	0x08005545
 80054f0:	08005545 	.word	0x08005545
 80054f4:	08005545 	.word	0x08005545
 80054f8:	08005545 	.word	0x08005545
 80054fc:	08005545 	.word	0x08005545
 8005500:	08005545 	.word	0x08005545
 8005504:	08005545 	.word	0x08005545
 8005508:	08005545 	.word	0x08005545
 800550c:	08005545 	.word	0x08005545
 8005510:	08005545 	.word	0x08005545
 8005514:	08005545 	.word	0x08005545
 8005518:	08005545 	.word	0x08005545
 800551c:	08005545 	.word	0x08005545
 8005520:	08005545 	.word	0x08005545
 8005524:	08005545 	.word	0x08005545
 8005528:	08005545 	.word	0x08005545
 800552c:	08005545 	.word	0x08005545
 8005530:	08005545 	.word	0x08005545
 8005534:	08005545 	.word	0x08005545
 8005538:	08005545 	.word	0x08005545
 800553c:	08005545 	.word	0x08005545
 8005540:	08005545 	.word	0x08005545
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005544:	bf00      	nop
  }

  return (USBD_OK);
 8005546:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop

08005554 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4805      	ldr	r0, [pc, #20]	; (8005578 <CDC_Receive_FS+0x24>)
 8005562:	f7fe fe54 	bl	800420e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005566:	4804      	ldr	r0, [pc, #16]	; (8005578 <CDC_Receive_FS+0x24>)
 8005568:	f7fe fe93 	bl	8004292 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800556c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000488 	.word	0x20000488

0800557c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <CDC_Transmit_FS+0x48>)
 800558e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005592:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800559e:	2301      	movs	r3, #1
 80055a0:	e00b      	b.n	80055ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80055a2:	887b      	ldrh	r3, [r7, #2]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4806      	ldr	r0, [pc, #24]	; (80055c4 <CDC_Transmit_FS+0x48>)
 80055aa:	f7fe fe17 	bl	80041dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80055ae:	4805      	ldr	r0, [pc, #20]	; (80055c4 <CDC_Transmit_FS+0x48>)
 80055b0:	f7fe fe40 	bl	8004234 <USBD_CDC_TransmitPacket>
 80055b4:	4603      	mov	r3, r0
 80055b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000488 	.word	0x20000488

080055c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	6039      	str	r1, [r7, #0]
 80055d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2212      	movs	r2, #18
 80055d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80055da:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000148 	.word	0x20000148

080055ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	6039      	str	r1, [r7, #0]
 80055f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2204      	movs	r2, #4
 80055fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80055fe:	4b03      	ldr	r3, [pc, #12]	; (800560c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	2000015c 	.word	0x2000015c

08005610 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	6039      	str	r1, [r7, #0]
 800561a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d105      	bne.n	800562e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	4907      	ldr	r1, [pc, #28]	; (8005644 <USBD_FS_ProductStrDescriptor+0x34>)
 8005626:	4808      	ldr	r0, [pc, #32]	; (8005648 <USBD_FS_ProductStrDescriptor+0x38>)
 8005628:	f7ff fe0d 	bl	8005246 <USBD_GetString>
 800562c:	e004      	b.n	8005638 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	4904      	ldr	r1, [pc, #16]	; (8005644 <USBD_FS_ProductStrDescriptor+0x34>)
 8005632:	4805      	ldr	r0, [pc, #20]	; (8005648 <USBD_FS_ProductStrDescriptor+0x38>)
 8005634:	f7ff fe07 	bl	8005246 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005638:	4b02      	ldr	r3, [pc, #8]	; (8005644 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000f1c 	.word	0x20000f1c
 8005648:	08005e98 	.word	0x08005e98

0800564c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	6039      	str	r1, [r7, #0]
 8005656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	4904      	ldr	r1, [pc, #16]	; (800566c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800565c:	4804      	ldr	r0, [pc, #16]	; (8005670 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800565e:	f7ff fdf2 	bl	8005246 <USBD_GetString>
  return USBD_StrDesc;
 8005662:	4b02      	ldr	r3, [pc, #8]	; (800566c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000f1c 	.word	0x20000f1c
 8005670:	08005eb0 	.word	0x08005eb0

08005674 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	6039      	str	r1, [r7, #0]
 800567e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	221a      	movs	r2, #26
 8005684:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005686:	f000 f843 	bl	8005710 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800568a:	4b02      	ldr	r3, [pc, #8]	; (8005694 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20000160 	.word	0x20000160

08005698 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	4907      	ldr	r1, [pc, #28]	; (80056cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80056ae:	4808      	ldr	r0, [pc, #32]	; (80056d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80056b0:	f7ff fdc9 	bl	8005246 <USBD_GetString>
 80056b4:	e004      	b.n	80056c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	4904      	ldr	r1, [pc, #16]	; (80056cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80056ba:	4805      	ldr	r0, [pc, #20]	; (80056d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80056bc:	f7ff fdc3 	bl	8005246 <USBD_GetString>
  }
  return USBD_StrDesc;
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000f1c 	.word	0x20000f1c
 80056d0:	08005ec4 	.word	0x08005ec4

080056d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	6039      	str	r1, [r7, #0]
 80056de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d105      	bne.n	80056f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	4907      	ldr	r1, [pc, #28]	; (8005708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80056ea:	4808      	ldr	r0, [pc, #32]	; (800570c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80056ec:	f7ff fdab 	bl	8005246 <USBD_GetString>
 80056f0:	e004      	b.n	80056fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	4904      	ldr	r1, [pc, #16]	; (8005708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80056f6:	4805      	ldr	r0, [pc, #20]	; (800570c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80056f8:	f7ff fda5 	bl	8005246 <USBD_GetString>
  }
  return USBD_StrDesc;
 80056fc:	4b02      	ldr	r3, [pc, #8]	; (8005708 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000f1c 	.word	0x20000f1c
 800570c:	08005ed0 	.word	0x08005ed0

08005710 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005716:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <Get_SerialNum+0x44>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800571c:	4b0e      	ldr	r3, [pc, #56]	; (8005758 <Get_SerialNum+0x48>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005722:	4b0e      	ldr	r3, [pc, #56]	; (800575c <Get_SerialNum+0x4c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005736:	2208      	movs	r2, #8
 8005738:	4909      	ldr	r1, [pc, #36]	; (8005760 <Get_SerialNum+0x50>)
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f814 	bl	8005768 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005740:	2204      	movs	r2, #4
 8005742:	4908      	ldr	r1, [pc, #32]	; (8005764 <Get_SerialNum+0x54>)
 8005744:	68b8      	ldr	r0, [r7, #8]
 8005746:	f000 f80f 	bl	8005768 <IntToUnicode>
  }
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	1ffff7e8 	.word	0x1ffff7e8
 8005758:	1ffff7ec 	.word	0x1ffff7ec
 800575c:	1ffff7f0 	.word	0x1ffff7f0
 8005760:	20000162 	.word	0x20000162
 8005764:	20000172 	.word	0x20000172

08005768 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800577a:	2300      	movs	r3, #0
 800577c:	75fb      	strb	r3, [r7, #23]
 800577e:	e027      	b.n	80057d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	0f1b      	lsrs	r3, r3, #28
 8005784:	2b09      	cmp	r3, #9
 8005786:	d80b      	bhi.n	80057a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	0f1b      	lsrs	r3, r3, #28
 800578c:	b2da      	uxtb	r2, r3
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	4619      	mov	r1, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	440b      	add	r3, r1
 8005798:	3230      	adds	r2, #48	; 0x30
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	e00a      	b.n	80057b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	0f1b      	lsrs	r3, r3, #28
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4619      	mov	r1, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	440b      	add	r3, r1
 80057b0:	3237      	adds	r2, #55	; 0x37
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	3301      	adds	r3, #1
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	4413      	add	r3, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
 80057cc:	3301      	adds	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
 80057d0:	7dfa      	ldrb	r2, [r7, #23]
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d3d3      	bcc.n	8005780 <IntToUnicode+0x18>
  }
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a0d      	ldr	r2, [pc, #52]	; (8005828 <HAL_PCD_MspInit+0x44>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d113      	bne.n	800581e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80057f6:	4b0d      	ldr	r3, [pc, #52]	; (800582c <HAL_PCD_MspInit+0x48>)
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	4a0c      	ldr	r2, [pc, #48]	; (800582c <HAL_PCD_MspInit+0x48>)
 80057fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005800:	61d3      	str	r3, [r2, #28]
 8005802:	4b0a      	ldr	r3, [pc, #40]	; (800582c <HAL_PCD_MspInit+0x48>)
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800580e:	2200      	movs	r2, #0
 8005810:	2100      	movs	r1, #0
 8005812:	2014      	movs	r0, #20
 8005814:	f7fb f82d 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005818:	2014      	movs	r0, #20
 800581a:	f7fb f846 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40005c00 	.word	0x40005c00
 800582c:	40021000 	.word	0x40021000

08005830 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f7fe fdd9 	bl	80043fe <USBD_LL_SetupStage>
}
 800584c:	bf00      	nop
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	015b      	lsls	r3, r3, #5
 800586c:	4413      	add	r3, r2
 800586e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	4619      	mov	r1, r3
 8005878:	f7fe fe0c 	bl	8004494 <USBD_LL_DataOutStage>
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	015b      	lsls	r3, r3, #5
 800589c:	4413      	add	r3, r2
 800589e:	333c      	adds	r3, #60	; 0x3c
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	4619      	mov	r1, r3
 80058a6:	f7fe fe66 	bl	8004576 <USBD_LL_DataInStage>
}
 80058aa:	bf00      	nop
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fe ff76 	bl	80047b2 <USBD_LL_SOF>
}
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80058d6:	2301      	movs	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d001      	beq.n	80058e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80058e2:	f7fa fd4d 	bl	8000380 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80058ec:	7bfa      	ldrb	r2, [r7, #15]
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fe ff26 	bl	8004742 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe fedf 	bl	80046c0 <USBD_LL_Reset>
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe ff20 	bl	8004760 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <HAL_PCD_SuspendCallback+0x30>)
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	4a03      	ldr	r2, [pc, #12]	; (800593c <HAL_PCD_SuspendCallback+0x30>)
 800592e:	f043 0306 	orr.w	r3, r3, #6
 8005932:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe ff1a 	bl	8004788 <USBD_LL_Resume>
}
 8005954:	bf00      	nop
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005964:	4a28      	ldr	r2, [pc, #160]	; (8005a08 <USBD_LL_Init+0xac>)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <USBD_LL_Init+0xac>)
 8005970:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8005974:	4b24      	ldr	r3, [pc, #144]	; (8005a08 <USBD_LL_Init+0xac>)
 8005976:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <USBD_LL_Init+0xb0>)
 8005978:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800597a:	4b23      	ldr	r3, [pc, #140]	; (8005a08 <USBD_LL_Init+0xac>)
 800597c:	2208      	movs	r2, #8
 800597e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005980:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <USBD_LL_Init+0xac>)
 8005982:	2202      	movs	r2, #2
 8005984:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005986:	4b20      	ldr	r3, [pc, #128]	; (8005a08 <USBD_LL_Init+0xac>)
 8005988:	2200      	movs	r2, #0
 800598a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800598c:	4b1e      	ldr	r3, [pc, #120]	; (8005a08 <USBD_LL_Init+0xac>)
 800598e:	2200      	movs	r2, #0
 8005990:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005992:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <USBD_LL_Init+0xac>)
 8005994:	2200      	movs	r2, #0
 8005996:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005998:	481b      	ldr	r0, [pc, #108]	; (8005a08 <USBD_LL_Init+0xac>)
 800599a:	f7fb f913 	bl	8000bc4 <HAL_PCD_Init>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80059a4:	f7fa fcec 	bl	8000380 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059ae:	2318      	movs	r3, #24
 80059b0:	2200      	movs	r2, #0
 80059b2:	2100      	movs	r1, #0
 80059b4:	f7fb ffac 	bl	8001910 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059be:	2358      	movs	r3, #88	; 0x58
 80059c0:	2200      	movs	r2, #0
 80059c2:	2180      	movs	r1, #128	; 0x80
 80059c4:	f7fb ffa4 	bl	8001910 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059ce:	23c0      	movs	r3, #192	; 0xc0
 80059d0:	2200      	movs	r2, #0
 80059d2:	2181      	movs	r1, #129	; 0x81
 80059d4:	f7fb ff9c 	bl	8001910 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80059e2:	2200      	movs	r2, #0
 80059e4:	2101      	movs	r1, #1
 80059e6:	f7fb ff93 	bl	8001910 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f4:	2200      	movs	r2, #0
 80059f6:	2182      	movs	r1, #130	; 0x82
 80059f8:	f7fb ff8a 	bl	8001910 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	2000111c 	.word	0x2000111c
 8005a0c:	40005c00 	.word	0x40005c00

08005a10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fb f9ad 	bl	8000d86 <HAL_PCD_Start>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f948 	bl	8005cc8 <USBD_Get_USB_Status>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	4608      	mov	r0, r1
 8005a50:	4611      	mov	r1, r2
 8005a52:	461a      	mov	r2, r3
 8005a54:	4603      	mov	r3, r0
 8005a56:	70fb      	strb	r3, [r7, #3]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70bb      	strb	r3, [r7, #2]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a6e:	78bb      	ldrb	r3, [r7, #2]
 8005a70:	883a      	ldrh	r2, [r7, #0]
 8005a72:	78f9      	ldrb	r1, [r7, #3]
 8005a74:	f7fb fae0 	bl	8001038 <HAL_PCD_EP_Open>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f922 	bl	8005cc8 <USBD_Get_USB_Status>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aac:	78fa      	ldrb	r2, [r7, #3]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fb fb21 	bl	80010f8 <HAL_PCD_EP_Close>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f903 	bl	8005cc8 <USBD_Get_USB_Status>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	4611      	mov	r1, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fb fbcb 	bl	800128a <HAL_PCD_EP_SetStall>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f8e4 	bl	8005cc8 <USBD_Get_USB_Status>
 8005b00:	4603      	mov	r3, r0
 8005b02:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b28:	78fa      	ldrb	r2, [r7, #3]
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fb fc06 	bl	800133e <HAL_PCD_EP_ClrStall>
 8005b32:	4603      	mov	r3, r0
 8005b34:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f8c5 	bl	8005cc8 <USBD_Get_USB_Status>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b5e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	da08      	bge.n	8005b7a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	015b      	lsls	r3, r3, #5
 8005b72:	4413      	add	r3, r2
 8005b74:	332a      	adds	r3, #42	; 0x2a
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	e008      	b.n	8005b8c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	015b      	lsls	r3, r3, #5
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005b8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr

08005b96 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bb0:	78fa      	ldrb	r2, [r7, #3]
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fb fa1a 	bl	8000fee <HAL_PCD_SetAddress>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 f881 	bl	8005cc8 <USBD_Get_USB_Status>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	607a      	str	r2, [r7, #4]
 8005bde:	461a      	mov	r2, r3
 8005be0:	460b      	mov	r3, r1
 8005be2:	72fb      	strb	r3, [r7, #11]
 8005be4:	4613      	mov	r3, r2
 8005be6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005bf6:	893b      	ldrh	r3, [r7, #8]
 8005bf8:	7af9      	ldrb	r1, [r7, #11]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	f7fb fb0c 	bl	8001218 <HAL_PCD_EP_Transmit>
 8005c00:	4603      	mov	r3, r0
 8005c02:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 f85e 	bl	8005cc8 <USBD_Get_USB_Status>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005c10:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	461a      	mov	r2, r3
 8005c26:	460b      	mov	r3, r1
 8005c28:	72fb      	strb	r3, [r7, #11]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c3c:	893b      	ldrh	r3, [r7, #8]
 8005c3e:	7af9      	ldrb	r1, [r7, #11]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	f7fb fa9b 	bl	800117c <HAL_PCD_EP_Receive>
 8005c46:	4603      	mov	r3, r0
 8005c48:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 f83b 	bl	8005cc8 <USBD_Get_USB_Status>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005c56:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	4611      	mov	r1, r2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fb faba 	bl	80011f0 <HAL_PCD_EP_GetRxCount>
 8005c7c:	4603      	mov	r3, r0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005c90:	4b02      	ldr	r3, [pc, #8]	; (8005c9c <USBD_static_malloc+0x14>)
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr
 8005c9c:	20000204 	.word	0x20000204

08005ca0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d817      	bhi.n	8005d0c <USBD_Get_USB_Status+0x44>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <USBD_Get_USB_Status+0x1c>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005cf5 	.word	0x08005cf5
 8005ce8:	08005cfb 	.word	0x08005cfb
 8005cec:	08005d01 	.word	0x08005d01
 8005cf0:	08005d07 	.word	0x08005d07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8005cf8:	e00b      	b.n	8005d12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8005cfe:	e008      	b.n	8005d12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
    break;
 8005d04:	e005      	b.n	8005d12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005d06:	2302      	movs	r3, #2
 8005d08:	73fb      	strb	r3, [r7, #15]
    break;
 8005d0a:	e002      	b.n	8005d12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8005d10:	bf00      	nop
  }
  return usb_status;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop

08005d20 <__errno>:
 8005d20:	4b01      	ldr	r3, [pc, #4]	; (8005d28 <__errno+0x8>)
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	2000017c 	.word	0x2000017c

08005d2c <__libc_init_array>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	2500      	movs	r5, #0
 8005d30:	4e0c      	ldr	r6, [pc, #48]	; (8005d64 <__libc_init_array+0x38>)
 8005d32:	4c0d      	ldr	r4, [pc, #52]	; (8005d68 <__libc_init_array+0x3c>)
 8005d34:	1ba4      	subs	r4, r4, r6
 8005d36:	10a4      	asrs	r4, r4, #2
 8005d38:	42a5      	cmp	r5, r4
 8005d3a:	d109      	bne.n	8005d50 <__libc_init_array+0x24>
 8005d3c:	f000 f896 	bl	8005e6c <_init>
 8005d40:	2500      	movs	r5, #0
 8005d42:	4e0a      	ldr	r6, [pc, #40]	; (8005d6c <__libc_init_array+0x40>)
 8005d44:	4c0a      	ldr	r4, [pc, #40]	; (8005d70 <__libc_init_array+0x44>)
 8005d46:	1ba4      	subs	r4, r4, r6
 8005d48:	10a4      	asrs	r4, r4, #2
 8005d4a:	42a5      	cmp	r5, r4
 8005d4c:	d105      	bne.n	8005d5a <__libc_init_array+0x2e>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d54:	4798      	blx	r3
 8005d56:	3501      	adds	r5, #1
 8005d58:	e7ee      	b.n	8005d38 <__libc_init_array+0xc>
 8005d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d5e:	4798      	blx	r3
 8005d60:	3501      	adds	r5, #1
 8005d62:	e7f2      	b.n	8005d4a <__libc_init_array+0x1e>
 8005d64:	08005ef0 	.word	0x08005ef0
 8005d68:	08005ef0 	.word	0x08005ef0
 8005d6c:	08005ef0 	.word	0x08005ef0
 8005d70:	08005ef4 	.word	0x08005ef4

08005d74 <malloc>:
 8005d74:	4b02      	ldr	r3, [pc, #8]	; (8005d80 <malloc+0xc>)
 8005d76:	4601      	mov	r1, r0
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	f000 b80b 	b.w	8005d94 <_malloc_r>
 8005d7e:	bf00      	nop
 8005d80:	2000017c 	.word	0x2000017c

08005d84 <memset>:
 8005d84:	4603      	mov	r3, r0
 8005d86:	4402      	add	r2, r0
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d100      	bne.n	8005d8e <memset+0xa>
 8005d8c:	4770      	bx	lr
 8005d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d92:	e7f9      	b.n	8005d88 <memset+0x4>

08005d94 <_malloc_r>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	1ccd      	adds	r5, r1, #3
 8005d98:	f025 0503 	bic.w	r5, r5, #3
 8005d9c:	3508      	adds	r5, #8
 8005d9e:	2d0c      	cmp	r5, #12
 8005da0:	bf38      	it	cc
 8005da2:	250c      	movcc	r5, #12
 8005da4:	2d00      	cmp	r5, #0
 8005da6:	4606      	mov	r6, r0
 8005da8:	db01      	blt.n	8005dae <_malloc_r+0x1a>
 8005daa:	42a9      	cmp	r1, r5
 8005dac:	d903      	bls.n	8005db6 <_malloc_r+0x22>
 8005dae:	230c      	movs	r3, #12
 8005db0:	6033      	str	r3, [r6, #0]
 8005db2:	2000      	movs	r0, #0
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
 8005db6:	f000 f857 	bl	8005e68 <__malloc_lock>
 8005dba:	4a21      	ldr	r2, [pc, #132]	; (8005e40 <_malloc_r+0xac>)
 8005dbc:	6814      	ldr	r4, [r2, #0]
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	b991      	cbnz	r1, 8005de8 <_malloc_r+0x54>
 8005dc2:	4c20      	ldr	r4, [pc, #128]	; (8005e44 <_malloc_r+0xb0>)
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	b91b      	cbnz	r3, 8005dd0 <_malloc_r+0x3c>
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f000 f83d 	bl	8005e48 <_sbrk_r>
 8005dce:	6020      	str	r0, [r4, #0]
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f000 f838 	bl	8005e48 <_sbrk_r>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d124      	bne.n	8005e26 <_malloc_r+0x92>
 8005ddc:	230c      	movs	r3, #12
 8005dde:	4630      	mov	r0, r6
 8005de0:	6033      	str	r3, [r6, #0]
 8005de2:	f000 f842 	bl	8005e6a <__malloc_unlock>
 8005de6:	e7e4      	b.n	8005db2 <_malloc_r+0x1e>
 8005de8:	680b      	ldr	r3, [r1, #0]
 8005dea:	1b5b      	subs	r3, r3, r5
 8005dec:	d418      	bmi.n	8005e20 <_malloc_r+0x8c>
 8005dee:	2b0b      	cmp	r3, #11
 8005df0:	d90f      	bls.n	8005e12 <_malloc_r+0x7e>
 8005df2:	600b      	str	r3, [r1, #0]
 8005df4:	18cc      	adds	r4, r1, r3
 8005df6:	50cd      	str	r5, [r1, r3]
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f000 f836 	bl	8005e6a <__malloc_unlock>
 8005dfe:	f104 000b 	add.w	r0, r4, #11
 8005e02:	1d23      	adds	r3, r4, #4
 8005e04:	f020 0007 	bic.w	r0, r0, #7
 8005e08:	1ac3      	subs	r3, r0, r3
 8005e0a:	d0d3      	beq.n	8005db4 <_malloc_r+0x20>
 8005e0c:	425a      	negs	r2, r3
 8005e0e:	50e2      	str	r2, [r4, r3]
 8005e10:	e7d0      	b.n	8005db4 <_malloc_r+0x20>
 8005e12:	684b      	ldr	r3, [r1, #4]
 8005e14:	428c      	cmp	r4, r1
 8005e16:	bf16      	itet	ne
 8005e18:	6063      	strne	r3, [r4, #4]
 8005e1a:	6013      	streq	r3, [r2, #0]
 8005e1c:	460c      	movne	r4, r1
 8005e1e:	e7eb      	b.n	8005df8 <_malloc_r+0x64>
 8005e20:	460c      	mov	r4, r1
 8005e22:	6849      	ldr	r1, [r1, #4]
 8005e24:	e7cc      	b.n	8005dc0 <_malloc_r+0x2c>
 8005e26:	1cc4      	adds	r4, r0, #3
 8005e28:	f024 0403 	bic.w	r4, r4, #3
 8005e2c:	42a0      	cmp	r0, r4
 8005e2e:	d005      	beq.n	8005e3c <_malloc_r+0xa8>
 8005e30:	1a21      	subs	r1, r4, r0
 8005e32:	4630      	mov	r0, r6
 8005e34:	f000 f808 	bl	8005e48 <_sbrk_r>
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d0cf      	beq.n	8005ddc <_malloc_r+0x48>
 8005e3c:	6025      	str	r5, [r4, #0]
 8005e3e:	e7db      	b.n	8005df8 <_malloc_r+0x64>
 8005e40:	20000424 	.word	0x20000424
 8005e44:	20000428 	.word	0x20000428

08005e48 <_sbrk_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	4c05      	ldr	r4, [pc, #20]	; (8005e64 <_sbrk_r+0x1c>)
 8005e4e:	4605      	mov	r5, r0
 8005e50:	4608      	mov	r0, r1
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	f7fa fb4e 	bl	80004f4 <_sbrk>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_sbrk_r+0x1a>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_sbrk_r+0x1a>
 8005e60:	602b      	str	r3, [r5, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	20001388 	.word	0x20001388

08005e68 <__malloc_lock>:
 8005e68:	4770      	bx	lr

08005e6a <__malloc_unlock>:
 8005e6a:	4770      	bx	lr

08005e6c <_init>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr

08005e78 <_fini>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr
